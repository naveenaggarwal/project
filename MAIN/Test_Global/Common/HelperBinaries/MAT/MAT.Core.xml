<?xml version="1.0"?>
<doc>
  <assembly>
    <name>MAT.Core</name>
  </assembly>
  <members>
    <member name="T:MAT.SendKeys">
      <summary>
            Based on <see cref="T:System.Windows.Forms.SendKeys" /> allows for keys to be sent to a specific window.
            </summary>
    </member>
    <member name="M:MAT.SendKeys.Send(System.String)">
      <summary>
            Send keystrokes to the active window.
            </summary>
      <seealso cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <param name="keys">Key strokes to send.</param>
    </member>
    <member name="M:MAT.SendKeys.Send(System.String,System.Windows.Forms.Control)">
      <summary>
            Send keystrokes to the <paremref name="control" />.
            </summary>
      <seealso cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <param name="keys">Key strokes to send.</param>
      <param name="control">Control to send to</param>
    </member>
    <member name="M:MAT.SendKeys.Send(System.String,System.Windows.Forms.Control,System.Int32)">
      <summary>
            Send keystrokes to the <paremref name="control" />.
            </summary>
      <seealso cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <param name="keys">Key strokes to send.</param>
      <param name="control">Control to send to</param>
      <param name="delay">Milliseconds to wait between key strokes</param>
    </member>
    <member name="M:MAT.SendKeys.Send(System.String,System.IntPtr,System.Int32)">
      <summary>
            Send keystrokes to the <paremref name="windowHandle" />.
            </summary>
      <seealso cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <param name="keys">Key strokes to send.</param>
      <param name="windowHandle">Handle to the window to send to</param>
      <param name="delay">Milliseconds to wait between key strokes</param>
    </member>
    <member name="M:MAT.SendKeys.Wait(System.Int32)">
      <summary>
            Wait for <paramref name="seconds" /> before continue.
            </summary>
      <param name="seconds">Milliseconds to wait</param>
    </member>
    <member name="M:MAT.SendKeys.SendWait(System.String)">
      <summary>
            Sends the given <paramref name="keys" /> to the active application, then waits for the message to be processed
            </summary>
      <seealso cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <param name="keys">The string of keystrokes to send</param>
    </member>
    <member name="M:MAT.SendKeys.SendWait(System.String,System.Windows.Forms.Control)">
      <summary>
            Sends the given <paramref name="keys" /> to the <paramref name="control" /> window, then waits for the message to be processed
            </summary>
      <seealso cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <param name="keys">The string of keystrokes to send</param>
      <param name="control">Control to send keys to</param>
    </member>
    <member name="M:MAT.SendKeys.SendWait(System.String,System.IntPtr)">
      <summary>
            Sends the given <paramref name="keys" /> to the <paramref name="windowHandle" /> window, then waits for the message to be processed
            </summary>
      <seealso cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <param name="keys">The string of keystrokes to send</param>
      <param name="windowHandle">Control to send keys to</param>
    </member>
    <member name="T:MAT.CommandLineParser.PositionalArgumentAttribute">
      <summary>
            Instructs the conversion engine to process this switch by position unless it is defined somewhere else.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.PositionalArgumentAttribute.#ctor(System.Int32)">
      <param name="index">The zero-based index of the arguements position, unless defined by switch</param>
    </member>
    <member name="P:MAT.CommandLineParser.PositionalArgumentAttribute.Index">
      <summary>
            Gets or sets the index.
            </summary>
      <value>The index.</value>
    </member>
    <member name="T:MAT.CommandLineParser.RequiredAttribute">
      <summary>
            Instructs the validator engine that this switch must be defined by the user
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.OptionalAttribute">
      <summary>
            Instructs the validator engine ignore validators on this object if it isn't defined.
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.DescriptionAttribute">
      <summary>
            Description to use when rendering the "help" message
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DescriptionAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.DescriptionAttribute" /> class.
            </summary>
      <param name="description">The description.</param>
    </member>
    <member name="P:MAT.CommandLineParser.DescriptionAttribute.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="T:MAT.CommandLineParser.IgnoreAttribute">
      <summary>
            Causes the command line reading system to ignore whatever property this is applied to.
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.NameAttribute">
      <summary>
            Unique name for a switch.  This attribute overrides the property name detected, if it is set.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.NameAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.NameAttribute" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="P:MAT.CommandLineParser.NameAttribute.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="T:MAT.CommandLineParser.AliasAttribute">
      <summary>
            Secondary shortened name for a switch.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.AliasAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.AliasAttribute" /> class.
            </summary>
      <param name="aliasName">Name of the alias.</param>
    </member>
    <member name="P:MAT.CommandLineParser.AliasAttribute.AliasName">
      <summary>
            Gets the name of the alias.
            </summary>
      <value>The name of the alias.</value>
    </member>
    <member name="T:MAT.CommandLineParser.IApplyDefault">
      <summary>
            Implement this interface in a TypeConverter to allow it to provide default values if a field is not set.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.IApplyDefault.ApplyDefault(System.Reflection.PropertyInfo)">
      <summary>
            Applies the default.
            </summary>
      <param name="prop">The prop.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.CommandLineParser.IApplyDefault.GetDefaultForDisplay">
      <summary>
            Gets the default for display.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.IAlwaysRunConverter">
      <summary>
            Implement this interface to always run your this converter for any object it appears on.  This will run before normal switches are processed.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.IAlwaysRunConverter.RunBeforeConversion(System.Reflection.PropertyInfo,System.Boolean)">
      <summary>
            Runs the before conversion.
            </summary>
      <param name="prop">The prop.</param>
      <param name="wasSet">if set to <c>true</c> [was set].</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.DefaultAttribute">
      <summary>
            Provide a default value for an optional attribute.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.DefaultAttribute" /> class.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor(System.String)">
      <summary>
            Will set the property to the defaultValue if one isn't provided.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor(System.Enum)">
      <summary>
            Will set the property to the defaultValue if one isn't provided.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor(System.Int32)">
      <summary>
            Will set the property to the defaultValue if one isn't provided.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor(System.Int64)">
      <summary>
            Will set the property to the defaultValue if one isn't provided.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor(System.UInt32)">
      <summary>
            Will set the property to the defaultValue if one isn't provided.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor(System.UInt64)">
      <summary>
            Will set the property to the defaultValue if one isn't provided.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor(System.Double)">
      <summary>
            Will set the property to the defaultValue if one isn't provided.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor(System.Single)">
      <summary>
            Will set the property to the defaultValue if one isn't provided.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.#ctor(System.Boolean)">
      <summary>
            Will set the property to the defaultValue if one isn't provided.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.ApplyDefault(System.Reflection.PropertyInfo)">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The prop.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultAttribute.GetDefaultForDisplay">
      <summary>
            Gets the default for display.
            </summary>
      <returns>Returns the default to display.</returns>
    </member>
    <member name="P:MAT.CommandLineParser.DefaultAttribute.DefaultValue">
      <summary>
            Gets the default value for this property.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="T:MAT.TextFileCommands">
      <summary>
            Commands for manipulating text files
            </summary>
      <example>
            Write a file, read the file back, replace some text then save again.
            <code>
            TextFileCommands.WriteFileContents("C:\\test.txt","Hello my name is XXXX");
            string a = TextFileCommands.GetFileContents("C:\\test.txt");
            Console.WriteLine(a);
            
            if(a.IndexOf("XXXX") != -1)
            {
            	a = a.Replace("XXXX","Ryan");
            	TextFileCommands.WriteFileContents("C:\\test.txt",a);
            }
            
            string b = TextFileCommands.GetFileContents("C:\\test.txt");
            Console.WriteLine(b);
            
            string c = StringParsing.GetTextBetween(a, "Hello", "Ryan");
            Console.WriteLine(c);
            </code></example>
      <example>
            Convert the file to unicode if it is not already
            <code>
            System.Text.Encoding enc = TextFileCommands.DetermineEncoding("C:\\test.txt"); 
            if(enc != System.Text.Encoding.UTF8)
            {
            	TextFileCommands.ConvertFileEncoding("C:\\test.txt", "C:\\test.txt", System.Text.Encoding.UTF8);
            }
            </code></example>
    </member>
    <member name="M:MAT.TextFileCommands.GetFileContents(System.String)">
      <summary>
            Gets the contents of a file
            </summary>
      <example>
            Write a file, read the file back, replace some text then save again.
            <code>
            TextFileCommands.WriteFileContents("C:\\test.txt","Hello my name is XXXX");
            string a = TextFileCommands.GetFileContents("C:\\test.txt");
            Console.WriteLine(a);
            
            if(a.IndexOf("XXXX") != -1)
            {
            	a = a.Replace("XXXX","Ryan");
            	TextFileCommands.WriteFileContents("C:\\test.txt",a);
            }
            
            string b = TextFileCommands.GetFileContents("C:\\test.txt");
            Console.WriteLine(b);
            
            string c = StringParsing.GetTextBetween(a, "Hello", "Ryan");
            Console.WriteLine(c);
            </code></example>
      <param name="path">The file to get text from</param>
      <returns>The text from the file</returns>
    </member>
    <member name="M:MAT.TextFileCommands.WriteFileContents(System.String,System.String)">
      <summary>
            Writes text to a file
            </summary>
      <example>
            Write a file, read the file back, replace some text then save again.
            <code>
            TextFileCommands.WriteFileContents("C:\\test.txt","Hello my name is XXXX");
            string a = TextFileCommands.GetFileContents("C:\\test.txt");
            Console.WriteLine(a);
            
            if(a.IndexOf("XXXX") != -1)
            {
            	a = a.Replace("XXXX","Ryan");
            	TextFileCommands.WriteFileContents("C:\\test.txt",a);
            }
            
            string b = TextFileCommands.GetFileContents("C:\\test.txt");
            Console.WriteLine(b);
            
            string c = StringParsing.GetTextBetween(a, "Hello", "Ryan");
            Console.WriteLine(c);
            </code></example>
      <param name="path">The path of the file</param>
      <param name="content">The content to be written</param>
    </member>
    <member name="M:MAT.TextFileCommands.ConvertFileEncoding(System.String,System.String,System.Text.Encoding)">
      <summary>
            Converts a file from its current encoding to another encoding to another.
            </summary>
      <example>
            Convert the file to unicode if it is not already
            <code>
            TextFileCommands.ConvertFileEncoding("C:\\test.txt", "C:\\test.txt", System.Text.Encoding.UTF8);
            </code></example>
      <example>
            Convert all the files in a folder to Unicode
            <code>
            TextFileCommands.ConvertFileEncoding("C:\\source\\", "C:\\dest\\", System.Text.Encoding.UTF8);
            </code></example>
      <param name="sourcePath">File to convert</param>
      <param name="destinationPath">Destination for the converted file</param>
      <param name="destinationEncoding">Encoding to which the contents should be converted</param>
    </member>
    <member name="M:MAT.TextFileCommands.DetermineEncoding(System.String)">
      <summary>
            Returns the encoding type of a file if it exists.
            </summary>
      <example>
            Determine the encoding type for a file.
            <code>
            System.Text.Encoding enc = TextFileCommands.DetermineEncoding("C:\\test.txt"); 
            System.Console.WriteLine("C:\\test.txt" + " has an encoding type of " + enc.ToString());
            </code></example>
      <param name="fileName">file to review</param>
      <returns>Encoding determined from preamble or default</returns>
    </member>
    <member name="M:MAT.TextFileCommands.GetItemList(System.String)">
      <summary>
            Reads a plain text file one line at a time adding each line to a string array.
            </summary>
      <example>
            Give a file with a list of languages:
            <code>
            English
            German
            Italian
            French
            </code>
            the list can be read for use as data in tests.
            <code>
            string[] langs = TextFileCommands.GetItemList("C:\\languages.txt");
            foreach(string lang in langs)
            {
            	Console.WriteLine(lang);
            }
            </code></example>
      <param name="path">The path of the file</param>
      <returns>Files contents are string array.</returns>
    </member>
    <member name="M:MAT.TextFileCommands.GetXmlString(System.String,System.String)">
      <summary>
            Reads the first XML node from a file give a proper XPATH query.
            Search help for Introduction to the Syntax of XPath
            </summary>
      <example>
            Retrieving settings from element or attribute:<br /><br />
            Sample File:
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="msnAdGroup" value="CMSIE4" /&gt;
            		&lt;add key="dualSearch" value="true" /&gt;
            	&lt;/appSettings&gt;
            	&lt;customSettings&gt;
            		&lt;data&gt;This is sample data.&lt;/data&gt;
            	&lt;/customSettings&gt;
            &lt;/configuration&gt;
            </code>
            Reads value attribute for the add element whose key attribute is 'dualSearch'
            <code>
            string result = TextFileCommands.GetXmlString("C:\\config.xml", "//configuration/appSettings/add[@key = 'dualSearch']/@value");
            </code>
            Read value for data
            <code>
            string result = TextFileCommands.GetXmlString("C:\\config.xml", "//configuration/customsettings/data");
            </code></example>
      <param name="file">XML file to load</param>
      <param name="xpathQuery">XPath query to read</param>
    </member>
    <member name="M:MAT.TextFileCommands.GetXmlString(System.String,System.String,System.Boolean)">
      <summary>
            Reads the first XML node from a file give a proper XPATH query.
            <seealso href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/html/xmconIntroductiontoXPathSyntax.asp">Introduction to the Syntax of XPath</seealso></summary>
      <example>
            Retrieving settings from element or attribute:<br /><br />
            Sample File:
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="msnAdGroup" value="CMSIE4" /&gt;
            		&lt;add key="dualSearch" value="true" /&gt;
            	&lt;/appSettings&gt;
            	&lt;customSettings&gt;
            		&lt;data&gt;This is sample data.&lt;/data&gt;
            	&lt;/customSettings&gt;
            &lt;/configuration&gt;
            </code>
            Reads value attribute for the add element whose key attribute is 'dualSearch'
            <code>
            string result = TextFileCommands.GetXmlString("C:\\config.xml", "//configuration/appSettings/add[@key = 'dualSearch']/@value");
            </code>
            Read value for data
            <code>
            string result = TextFileCommands.GetXmlString("C:\\config.xml", "//configuration/customsettings/data");
            </code></example>
      <param name="file">XML file to load</param>
      <param name="xpathQuery">XPath query to read</param>
      <param name="decode">Decode XML information; default is true</param>
      <returns>string containing data content</returns>
    </member>
    <member name="M:MAT.TextFileCommands.SetXmlString(System.String,System.String,System.String)">
      <summary>
            Writes data to the first XML node from a file give a proper XPATH query.
            <seealso href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/html/xmconIntroductiontoXPathSyntax.asp">Introduction to the Syntax of XPath</seealso></summary>
      <example>
            Retrieving settings from element or attribute:<br /><br />
            Sample File:
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="msnAdGroup" value="CMSIE4" /&gt;
            		&lt;add key="dualSearch" value="true" /&gt;
            	&lt;/appSettings&gt;
            	&lt;customSettings&gt;
            		&lt;data&gt;This is sample data.&lt;/data&gt;
            	&lt;/customSettings&gt;
            &lt;/configuration&gt;
            </code>
            Write new data to the value attribute for the add element whose key attribute is 'dualSearch'
            <code>
            TextFileCommands.SetXmlString("C:\\config.xml", "//configuration/appSettings/add[@key = 'dualSearch']/@value", "false");
            </code>
            Write a new value for data
            <code>
            TextFileCommands.GetXmlString("C:\\config.xml", "//configuration/customsettings/data", "New content.");
            </code></example>
      <remarks>
            Make sure that &amp; is written as &amp;amp;
            </remarks>
      <param name="file">XML file to load</param>
      <param name="xpathQuery">XPath query to read</param>
      <param name="content">Content to place in the node replacing existing content</param>
    </member>
    <member name="M:MAT.TextFileCommands.SetXmlString(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Writes data to the first XML node from a file give a proper XPATH query.
            </summary>
      <example>
            Retrieving settings from element or attribute:<br /><br />
            Sample File:
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="msnAdGroup" value="CMSIE4" /&gt;
            		&lt;add key="dualSearch" value="true" /&gt;
            	&lt;/appSettings&gt;
            	&lt;customSettings&gt;
            		&lt;data&gt;This is sample data.&lt;/data&gt;
            	&lt;/customSettings&gt;
            &lt;/configuration&gt;
            </code>
            Write new data to the value attribute for the add element whose key attribute is 'dualSearch'
            <code>
            TextFileCommands.SetXmlString("C:\\config.xml", "//configuration/appSettings/add[@key = 'dualSearch']/@value", "false");
            </code>
            Write a new value for data
            <code>
            TextFileCommands.GetXmlString("C:\\config.xml", "//configuration/customsettings/data", "New content.");
            </code></example>
      <remarks>
            Make sure that &amp; is written as &amp;amp;
            </remarks>
      <param name="file">XML file to load</param>
      <param name="xpathQuery">XPath query to read</param>
      <param name="content">Content to place in the node replacing existing content</param>
      <param name="encode">Encode XML information; default is true</param>
    </member>
    <member name="T:MAT.Server.IisWebService">
      <summary>
            Represents an IIS web service. It can be used to 
            set metabase properties for web sites and web virtual directories
            </summary>
      <remarks>This class uses ADSI as the underlying technology for
            setting and retrieving metabase</remarks>
    </member>
    <member name="M:MAT.Server.IisWebService.#ctor(System.String)">
      <summary>
            Initializes an IIsWebService based on a machine name
            </summary>
      <param name="hostName">Name of the machine where IIS is running</param>
    </member>
    <member name="M:MAT.Server.IisWebService.Restart">
      <summary>
            Starts IIS (World Wide Web Publishing service) on the machine. If it is already started, it will be stopped first.
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebService.Stop">
      <summary>
            Stops IIS (World Wide Web Publishing service) on the machine. 
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebService.Start">
      <summary>
            Starts IIS (World Wide Web Publishing service) on the machine. 
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebService.GetStatus">
      <summary>
            Returns the status of IIS (World Wide Web Publishing service) on the machine
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebService.Restart(System.String)">
      <summary>
            Starts IIS (World Wide Web Publishing service) on the machine. If it is already started, it will be stopped first.
            </summary>
      <param name="machineName">The machine name</param>
    </member>
    <member name="M:MAT.Server.IisWebService.Stop(System.String)">
      <summary>
            Stops IIS (World Wide Web Publishing service) on the machine. 
            </summary>
      <param name="machineName">The machine name</param>
    </member>
    <member name="M:MAT.Server.IisWebService.Start(System.String)">
      <summary>
            Starts IIS (World Wide Web Publishing service) on the machine. 
            </summary>
      <param name="machineName">The machine name</param>
    </member>
    <member name="M:MAT.Server.IisWebService.GetStatus(System.String)">
      <summary>
            Returns the status of IIS (World Wide Web Publishing service) on the machine
            </summary>
      <param name="machineName">The machine name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.IisWebService.CreateWebsite(System.String,System.Int32,System.String,System.String)">
      <summary>
            Creates a new web site
            </summary>
      <param name="websiteName">Name of the web site</param>
      <param name="port">Port on which the website is hosted</param>
      <param name="hostHeaderName">Domain name used to get to the host</param>
      <param name="pathToRoot">Path to the Root virtual directory of the website</param>
      <returns>An IIsWebsite object</returns>
    </member>
    <member name="M:MAT.Server.IisWebService.CreateWebsite(System.String,System.Int32,System.String)">
      <summary>
            Creates a new web site
            </summary>
      <param name="websiteName">Name of the web site</param>
      <param name="port">Port on which the website is hosted</param>
      <param name="pathToRoot">Path to the Root virtual directory of the website</param>
      <returns>An IIsWebsite object</returns>
    </member>
    <member name="M:MAT.Server.IisWebService.DeleteWebsite(System.String)">
      <summary>
            Deletes the web site with specified name
            </summary>
      <param name="websiteName">Name of the web site</param>
      <returns>true if deleted the web site, false
            if failed or not found</returns>
    </member>
    <member name="M:MAT.Server.IisWebService.GetWebsite(System.String)">
      <summary>
            Returns a web site based on the name
            </summary>
      <param name="websiteName">Name of the web site</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.IisWebService.GetAppPool(System.String)">
      <summary>
            Gets the app pool.
            </summary>
      <param name="appPoolName">Name of the app pool.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.IisWebService.Dispose">
      <summary>
            Implements Dispose method
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebService.Finalize">
      <summary>
            Finalize method
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebService.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:MAT.Server.IisWebService.DefaultWebsite">
      <summary>
            Returns the default web site hosted by this web service
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebService.Websites">
      <summary>
            Returns an array of web sites hosted by this web service
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebService.DefaultAppPool">
      <summary>
            Returns the default app pool hosted by this web service
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebService.AppPools">
      <summary>
            Returns an array of app pools hosted by this web service
            </summary>
    </member>
    <member name="T:MAT.Server.IisWebsite">
      <summary>
            Represents an IIS web site. It can be used to set metabase properties
            for virtual directories under this web site and manipulating the web site.
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebsite.#ctor(System.String,System.Int32)">
      <summary>
            Initializes an IIsWebsite based on the
            machine and site ID
            </summary>
      <param name="hostName">Name of the machine</param>
      <param name="siteId">ID of the machine</param>
    </member>
    <member name="M:MAT.Server.IisWebsite.#ctor(System.String,System.String,System.Int32)">
      <summary>
            Initializes an IIsWebsite based on the
            machine and site ID
            </summary>
      <param name="hostName">Name of the machine</param>
      <param name="matIisExe">Name of the Exe used for remote calls</param>
      <param name="siteId">ID of the machine</param>
    </member>
    <member name="M:MAT.Server.IisWebsite.Start">
      <summary>
            Starts the web site
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebsite.Stop">
      <summary>
            Stops teh web site
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebsite.Dispose">
      <summary>
            Implements Dispose method
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebsite.Finalize">
      <summary>
            Finalize method
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebsite.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:MAT.Server.IisWebsite.Root">
      <summary>
            Returns the Root virtual directory of this web site
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebsite.Id">
      <summary>
            Id number for the Web Site
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebsite.AnonymousUserName">
      <summary>
            Gets or set name of Anonymous User being used for site.
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebsite.AppPool">
      <summary>
            Gets or sets the AppPool being used for site.
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebsite.Name">
      <summary>
            Sets and returns the Name of this web site
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebsite.Port">
      <summary>
            Sets and returns the Port of this web site
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebsite.HostHeaderName">
      <summary>
            Sets and returns the hostHeaderName
            </summary>
    </member>
    <member name="T:MAT.Server.IisWebVirtualDir">
      <summary>
            Represents an IIS virtual directory
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebVirtualDir.#ctor(System.String,System.Int32,System.String)">
      <summary>
            Initializes an IIsWebVirtualDirectory
            </summary>
      <param name="hostName">Name of the machine</param>
      <param name="siteId">Site ID of the web site</param>
      <param name="virtualDirFullName">Full name of the virtual directory.
            This is of the form  - rootDir/subDir1/vDir</param>
    </member>
    <member name="M:MAT.Server.IisWebVirtualDir.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>
            Initializes an IIsWebVirtualDirectory
            </summary>
      <param name="hostName">Name of the machine</param>
      <param name="matIisExe">Name of the Exe used for remote calls</param>
      <param name="siteId">Site ID of the web site</param>
      <param name="virtualDirFullName">Full name of the virtual directory.
            This is of the form  - rootDir/subDir1/vDir</param>
    </member>
    <member name="M:MAT.Server.IisWebVirtualDir.CreateVirtualDir(System.String,System.String)">
      <summary>
            Creates a virtual directory under this virtual directory
            </summary>
      <param name="virtualDirName">Name of the virtual directory</param>
      <param name="path">Path to the virtual directory</param>
      <returns>An IIsWebVirtualDir object</returns>
    </member>
    <member name="M:MAT.Server.IisWebVirtualDir.DeleteVirtualDir(System.String)">
      <summary>
            Delete the specified virtual directory
            </summary>
      <param name="virtualDirName">Name of the virtual directory</param>
      <returns>true if deleted successfully otherwise false</returns>
    </member>
    <member name="M:MAT.Server.IisWebVirtualDir.GetVirtualDir(System.String)">
      <summary>
            Gets a virtual directory based on the name under this
            virtual directory
            </summary>
      <param name="virtualDirName">Name of the virtual directory</param>
      <returns>An IIsWebVirtualDir object</returns>
    </member>
    <member name="M:MAT.Server.IisWebVirtualDir.Dispose">
      <summary>
            Implements Dispose method
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebVirtualDir.Finalize">
      <summary>
            Finalize method
            </summary>
    </member>
    <member name="M:MAT.Server.IisWebVirtualDir.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:MAT.Server.IisWebVirtualDir.Name">
      <summary>
            Returns the name of the virtual directory
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebVirtualDir.FullName">
      <summary>
            Returns the full name of the virtual directory
            with parent virtual directories
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebVirtualDir.Path">
      <summary>
            Returns and sets the physical path of this virtual directory
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebVirtualDir.AppPoolName">
      <summary>
            Gets or sets name of AppPool being used for this virtual directory.
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebVirtualDir.AnonymousUserName">
      <summary>
            Gets or set name of Anonymous User being used for this virtual directory.
            </summary>
    </member>
    <member name="P:MAT.Server.IisWebVirtualDir.VirtualDirs">
      <summary>
            Returns an array of virutal directories 
            under this virtual directory
            </summary>
    </member>
    <member name="T:MAT.Server.AppPoolIdentity">
      <summary>
            App pool identity. (Local, Network, User)
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolIdentity.LocalSystem">
      <summary>
            Run using Local System account.
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolIdentity.LocalService">
      <summary>
            Run using Local Service account.
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolIdentity.NetworkService">
      <summary>
            Run using Network Service account.
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolIdentity.CustomUser">
      <summary>
            Run under a custom user account.
            </summary>
    </member>
    <member name="T:MAT.Server.AppPoolLogonMethod">
      <summary>
            AppPoolLogonMethod
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolLogonMethod.Interactive">
      <summary>
            Interactive
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolLogonMethod.Batch">
      <summary>
            Batch
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolLogonMethod.Network">
      <summary>
            Network
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolLogonMethod.ClearText">
      <summary>
            ClearText
            </summary>
    </member>
    <member name="T:MAT.Server.AppPoolState">
      <summary>
            AppPoolState
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolState.Starting">
      <summary>
            Starting
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolState.Started">
      <summary>
            Started
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolState.Stopping">
      <summary>
            Stopping
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolState.Stopped">
      <summary>
            Stopped
            </summary>
    </member>
    <member name="T:MAT.Server.AppPoolMode">
      <summary>
            AppPoolMode
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolMode.Integrated">
      <summary>
            IIS 7.0 Mode
            </summary>
    </member>
    <member name="F:MAT.Server.AppPoolMode.Classic">
      <summary>
            IIS 6.0 Mode
            </summary>
    </member>
    <member name="T:MAT.Server.IisAppPool">
      <summary>
            Represents an AppPool for the current web serverice
            </summary>
    </member>
    <member name="M:MAT.Server.IisAppPool.#ctor(System.String,System.String)">
      <summary>
            Initializes an IIS AppPool
            </summary>
      <param name="hostName">Name of the machine</param>
      <param name="appPoolName">Name of AppPool</param>
    </member>
    <member name="M:MAT.Server.IisAppPool.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes an IIS AppPool
            </summary>
      <param name="hostName">Name of the machine</param>
      <param name="matIisExe">Name of the Exe used for remote calls</param>
      <param name="appPoolName">Name of AppPool</param>
    </member>
    <member name="M:MAT.Server.IisAppPool.Dispose">
      <summary>
            Implements Dispose method
            </summary>
    </member>
    <member name="M:MAT.Server.IisAppPool.Finalize">
      <summary>
            Finalize method
            </summary>
    </member>
    <member name="M:MAT.Server.IisAppPool.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:MAT.Server.IisAppPool.Name">
      <summary>
            Gets the app pool name.
            </summary>
    </member>
    <member name="P:MAT.Server.IisAppPool.Identity">
      <summary>
            Gets or sets the app pool identity. (Local, Network, User)
            </summary>
    </member>
    <member name="P:MAT.Server.IisAppPool.LogonMethod">
      <summary>
            Gets or sets the logon method.
            </summary>
      <value>The logon method.</value>
    </member>
    <member name="P:MAT.Server.IisAppPool.Enabled32Bit">
      <summary>
            Gets or sets a value indicating whether [enabled32 bit].
            </summary>
      <value>
        <c>true</c> if [enabled32 bit]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Server.IisAppPool.State">
      <summary>
            Gets or sets the state.
            </summary>
      <value>The state.</value>
    </member>
    <member name="P:MAT.Server.IisAppPool.User">
      <summary>
            Gets or sets the user.
            </summary>
      <value>The user.</value>
    </member>
    <member name="P:MAT.Server.IisAppPool.Password">
      <summary>
            Gets or sets the password.
            </summary>
      <value>The password.</value>
    </member>
    <member name="P:MAT.Server.IisAppPool.Mode">
      <summary>
            Gets or sets the managed pipeline mode (classic vs integrated).
            </summary>
      <value>The mode.</value>
    </member>
    <member name="T:MAT.Log">
      <summary>
            Logs events to various output types at various levels
            Contact: FBurian
            </summary>
    </member>
    <member name="M:MAT.Log.MethodDetails.Assert(System.String,System.String,MAT.DataCompareResult,System.String,System.Int32,System.String)">
      <summary>
            Gets the result.
            </summary>
      <param name="sourceQuery">The source query.</param>
      <param name="destQuery">The dest query.</param>
      <param name="resultObj">The result obj.</param>
      <param name="methodName">Name of the method.</param>
      <param name="workItemId">The work item ID.</param>
      <param name="className">Name of the class.</param>
    </member>
    <member name="M:MAT.Log.MethodDetails.GetResult(System.String,System.String,MAT.DataCompareResult,System.String,System.Int32,System.String)">
      <summary>
            Gets the result.
            </summary>
      <param name="sourceQuery">The source query.</param>
      <param name="destQuery">The dest query.</param>
      <param name="resultObj">The result obj.</param>
      <param name="methodName">Name of the method.</param>
      <param name="workItemId">The work item ID.</param>
      <param name="className">Name of the class.</param>
    </member>
    <member name="M:MAT.Log.Error(System.String,System.String,System.Object[])">
      <summary>
            Write error message to specified output
            </summary>
      <param name="format">Message</param>
      <param name="context">The context (usually the name of the calling class and method)</param>
      <param name="args">Replacement Args.<br />Log.Error("Show {0}", "this");</param>
    </member>
    <member name="M:MAT.Log.Error(System.String,System.String)">
      <summary>
            Write error message to specified output
            </summary>
      <param name="message">Message</param>
      <param name="context">The context (usually the name of the calling class and method)</param>
    </member>
    <member name="M:MAT.Log.Error(System.String)">
      <summary>
            Write error message to specified output
            </summary>
      <param name="message">Message</param>
    </member>
    <member name="M:MAT.Log.Warning(System.String,System.String,System.Object[])">
      <summary>
            Write Warning message to specified output
            </summary>
      <param name="format">Message</param>
      <param name="context">The context (usually the name of the calling class and method)</param>
      <param name="args">Replacement Args.<br />Log.Warning("Show {0}", "this");</param>
    </member>
    <member name="M:MAT.Log.Warning(System.String,System.String)">
      <summary>
            Write warning message to specified output
            The warning message is highlighted like this:
            ============================================
            !!! WARNING: "This is a warning message"
            ============================================
            </summary>
      <param name="message">Message</param>
      <param name="context">The context (usually the name of the calling class and method)</param>
    </member>
    <member name="M:MAT.Log.Warning(System.String)">
      <summary>
            Write warning message to specified output
            The warning message is highlighted like this:
            ============================================
            !!! WARNING: "This is a warning message"
            ============================================
            </summary>
      <param name="message">Message</param>
    </member>
    <member name="M:MAT.Log.Info(System.String,System.String,System.Object[])">
      <summary>
            Write info message to specified output
            </summary>
      <param name="format">Message</param>
      <param name="context">The context (usually the name of the calling class and method)</param>
      <param name="args">Replacement Args.<br />Log.Info("Show {0}", "this");</param>
    </member>
    <member name="M:MAT.Log.Info(System.String,System.String,MAT.LogLevel)">
      <summary>
            Write info message to specified output
            </summary>
      <param name="message">The message to write</param>
      <param name="context">The context (usually the name of the calling class and method)</param>
      <param name="level">The level of this message</param>
    </member>
    <member name="M:MAT.Log.Info(System.String,System.String)">
      <summary>
            Write info message to specified output
            </summary>
      <param name="message">The message to write</param>
      <param name="context">The context (usually the name of the calling class and method)</param>
    </member>
    <member name="M:MAT.Log.Info(System.String)">
      <summary>
            Write info message to specified output
            </summary>
      <param name="message">The message to write</param>
    </member>
    <member name="P:MAT.Log.WriteErrorTo">
      <summary>
            Method of output for Error Events
            </summary>
    </member>
    <member name="P:MAT.Log.WriteInfoTo">
      <summary>
            Method of output for Info Events
            </summary>
    </member>
    <member name="P:MAT.Log.WriteAllTo">
      <summary>
            Method of output for All Events
            </summary>
    </member>
    <member name="P:MAT.Log.LogLevel">
      <summary>
            Set the logging level of all future events
            </summary>
    </member>
    <member name="T:MAT.OutputType">
      <summary>
            Output Types - can be combined with bitwise or operator ("|")
            </summary>
    </member>
    <member name="F:MAT.OutputType.None">
      <summary>
            Don't write anything
            </summary>
    </member>
    <member name="F:MAT.OutputType.Debug">
      <summary>
            Send message to debug window
            </summary>
    </member>
    <member name="F:MAT.OutputType.Console">
      <summary>
            Write to console
            </summary>
    </member>
    <member name="F:MAT.OutputType.Trace">
      <summary>
            Write to trace log
            </summary>
    </member>
    <member name="F:MAT.OutputType.MessageBox">
      <summary>
            Display MessageBox
            </summary>
    </member>
    <member name="T:MAT.LogLevel">
      <summary>
            Determines level of tracing
            </summary>
    </member>
    <member name="F:MAT.LogLevel.L0Low">
      <summary>
            Minor, trace-level output
            </summary>
    </member>
    <member name="F:MAT.LogLevel.L1Library">
      <summary>
            Library code trace level
            </summary>
    </member>
    <member name="F:MAT.LogLevel.L2Medium">
      <summary>
            Important library trace, or low-level test case trace
            </summary>
    </member>
    <member name="F:MAT.LogLevel.L3TestCase">
      <summary>
            Test case level tracing
            </summary>
    </member>
    <member name="F:MAT.LogLevel.L4Results">
      <summary>
            Individual verification Results
            </summary>
    </member>
    <member name="F:MAT.LogLevel.L5RunContext">
      <summary>
            Test information run context
            </summary>
    </member>
    <member name="F:MAT.LogLevel.L6High">
      <summary>
            Always written to to the log
            </summary>
    </member>
    <member name="T:MAT.Data.RangeTree">
      <summary>
            RangeTree is an abstract class used for creating simple random generation.  See <see cref="T:MAT.Data.RandomString" /> and <see cref="T:MAT.Data.RandomData" /></summary>
    </member>
    <member name="M:MAT.Data.RangeTree.GetInstance(System.String,System.Int32,System.Int32)">
      <summary>
            Gets the instance.
            </summary>
      <param name="name">The name.</param>
      <param name="low">The low.</param>
      <param name="high">The high.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RangeTree.GetInstance(System.String,MAT.Data.RangeTree[])">
      <summary>
            Gets the instance.
            </summary>
      <param name="name">The name.</param>
      <param name="children">The children.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RangeTree.PickRandom(System.Random)">
      <summary>
            Picks the random.
            </summary>
      <param name="rnd">The RND.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RangeTree.AddChild(MAT.Data.RangeTree)">
      <summary>
            Adds a child RangeTree.
            </summary>
      <param name="child">The child.</param>
    </member>
    <member name="P:MAT.Data.RangeTree.Size">
      <summary>
            Gets the size.
            </summary>
      <value>The size.</value>
    </member>
    <member name="P:MAT.Data.RangeTree.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="T:MAT.Data.RangeLeaf">
      <summary>
            RangeLeaf is a class used for creating simple random generation.  See <see cref="T:MAT.Data.RandomString" /> and <see cref="T:MAT.Data.RandomData" /></summary>
    </member>
    <member name="M:MAT.Data.RangeLeaf.PickRandom(System.Random)">
      <summary>
            Picks the random.
            </summary>
      <param name="rnd">The RND.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RangeLeaf.AddChild(MAT.Data.RangeTree)">
      <summary>
            Adds a child RangeTree.
            </summary>
      <param name="child">The child.</param>
    </member>
    <member name="T:MAT.Data.RangeNode">
      <summary>
            RangeNode is an abstract class used for creating simple random generation.  See <see cref="T:MAT.Data.RandomString" /> and <see cref="T:MAT.Data.RandomData" /></summary>
    </member>
    <member name="M:MAT.Data.RangeNode.PickRandom(System.Random)">
      <summary>
            Picks the random.
            </summary>
      <param name="rnd">The RND.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RangeNode.AddChild(MAT.Data.RangeTree)">
      <summary>
            Adds a child RangeTree.
            </summary>
      <param name="child">The child.</param>
    </member>
    <member name="T:MAT.Data.StringType">
      <summary>
            The type of characters to use
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.LowerCase">
      <summary>
            a-z
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.UpperCase">
      <summary>
            A-Z
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.Alpha">
      <summary>
            a-z, A-Z
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.Numeric">
      <summary>
            0-9
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.AlphaNumeric">
      <summary>
            a-z, A-Z, 0-9
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.LowerPrintable">
      <summary>
            Ascii 32 through 126
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.UpperPrintable">
      <summary>
            Ascii 128 through 255
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.Printable">
      <summary>
            Ascii 32 through 255, not including 127
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.NonPrintable">
      <summary>
            Ascii 0 through 31
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.AllAscii">
      <summary>
            Ascii 0 through 255
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.Unicode">
      <summary>
            All Unicode character sets: Greek, Cyrillic, etc.
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.Greek">
      <summary>
            Greek or Coptic (0x370 through 0x3FF)
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.Cyrillic">
      <summary>
            Cyrillic (Russian) (0x400 through 0x52F)
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.Hebrew">
      <summary>
            Hebrew (0x590 through 0x5FF)
            </summary>
    </member>
    <member name="F:MAT.Data.StringType.Arabic">
      <summary>
            Arabic (0x600 trhough 0x77F)
            </summary>
    </member>
    <member name="T:MAT.Data.RandomAbstractBase">
      <summary>
            RandomAbstractBase is an abstract class used for creating simple random generation.  See <see cref="T:MAT.Data.RandomString" /> and <see cref="T:MAT.Data.RandomData" /></summary>
    </member>
    <member name="F:MAT.Data.RandomAbstractBase.m_rnd">
      <summary>
            Gets the System.Random instance used to create random data
            </summary>
    </member>
    <member name="M:MAT.Data.RandomAbstractBase.#ctor(System.Int32)">
      <summary>
            Constructor is inaccessible from outside the class
            </summary>
    </member>
    <member name="M:MAT.Data.RandomAbstractBase.RandomSeed">
      <summary>
            Random seed.
            </summary>
    </member>
    <member name="P:MAT.Data.RandomAbstractBase.Rnd">
      <summary>
            Gets the System.Random instance used to create random data
            </summary>
    </member>
    <member name="P:MAT.Data.RandomAbstractBase.Seed">
      <summary>
            Gets the seed used to initialize the RandomData generator
            </summary>
      <value>The seed.</value>
    </member>
    <member name="T:MAT.Data.RandomString">
      <summary>
            RandomString is a class designed for creating quick random strings.
            </summary>
      <example>
        <para>Initialization</para>
        <code>RandomData rnd = RandomData.GetInstance();</code>
        <para>Quick usage</para>
        <code>string rndString = rnd.String.Next(); //printable characters, length 256</code>
        <para>More in-depth</para>
        <code> 
            RandomString rs = rnd.String;
            string str = rs.Next(); //printable characters, length 256
            str = rs.Next(StringType.LowerCase | StringType.Numeric, 50); //50 lowercase or numeric chars
            str = rs.Next(StringType.Printable, 12, true); //12 alphanumeric characters, trimmed (not beginning or ending in whitespace)
            </code>
        <para>Email</para>
        <code>string email = rs.NextEmail(15); //random email with *@*.* format, where * is one or more characters</code>
        <para>Unicode</para>
        <code>string greek = rs.Next(StringType.Greek);</code>
      </example>
    </member>
    <member name="M:MAT.Data.RandomString.#ctor(System.Int32)">
      <summary>
            Constructor is inaccessible from outside the class
            </summary>
    </member>
    <member name="M:MAT.Data.RandomString.GetInstance">
      <summary>
            Creates a new instance of the RandomString class with a random seed
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomString.GetInstance(System.Int32)">
      <summary>
            Creates a new instance of the RandomString class
            </summary>
      <param name="seed">The seed to be used to generate random data with</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomString.Next">
      <summary>
            Creates a random (trimmed) string of printable characters with length 256
            </summary>
      <returns>The string</returns>
    </member>
    <member name="M:MAT.Data.RandomString.Next(MAT.Data.StringType)">
      <summary>
            Creates a random (trimmed) string of length 256
            </summary>
      <param name="type">The type of string to create</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomString.Next(MAT.Data.StringType,System.Int32)">
      <summary>
            Creates a random (trimmed) string
            </summary>
      <param name="type">The type of string to create</param>
      <param name="length">The length of the string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomString.Next(MAT.Data.StringType,System.Int32,System.Boolean)">
      <summary>
            Creates a random string
            </summary>
      <param name="type">The type of string to create</param>
      <param name="length">The length of the string</param>
      <param name="trimmed">True: No whitespace at beginning or end. False: allow whitespace if part of type</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomString.Next(MAT.Data.RangeTree,System.Int32,System.Boolean)">
      <summary>
            Creates a random string
            </summary>
      <param name="range">A range of values (or tree of ranges) to create the string from</param>
      <param name="length">The length of the string</param>
      <param name="trimmed">True: No whitespace at beginning or end. False: allow whitespace if part of type</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomString.NextEmail(MAT.Data.StringType,System.Int32)">
      <summary>
            Creates an email up to the specified length with AlphaNumeric characters
            </summary>
      <param name="type">The type of string to create</param>
      <param name="length">The minimum length of the email - has to be =&gt; 5</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomString.NextEmail(System.Int32)">
      <summary>
            Creates an email up to the specified length with AlphaNumeric characters
            </summary>
      <param name="length">The minimum length of the email - has to be =&gt; 5</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.Data.RandomString.OverrideChar">
      <summary>
            Used for testing.  Forces random character to be filled with one specific character.
            </summary>
    </member>
    <member name="T:MAT.DataCompare.Core.ColumnEntry">
      <summary>
            Column class hold column information
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.ColumnEntry.setWhereClause(MAT.DataCompare.Core.WhereClauseType,System.String,System.String,System.String)">
      <summary>
            Set where clause on column entry
            </summary>
      <param name="type">Set filter clause</param>
      <param name="isGreaterValue">Set lower bound of greater than or Set lower bound of between</param>
      <param name="isLessValue">Set highr bound of less than or Set higher bound of between</param>
      <param name="isEqualValue">Set value equal to or not equal to</param>
    </member>
    <member name="M:MAT.DataCompare.Core.ColumnEntry.CompareTo(MAT.DataCompare.Core.ColumnEntry)">
      <summary>
            Compares to this method compares the column with other column object
            </summary>
      <param name="other">The other.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.ColumnEntry.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.ColumnEntry.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.ColumnName">
      <summary>
            Gets or sets the name of the column.
            </summary>
      <value>The name of the column.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.ColumnNameInLowerCase">
      <summary>
            Gets the column name in lower case.
            </summary>
      <value>The column name in lower case.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.ColumnNameInUpperCase">
      <summary>
            Gets the column name in upper case.
            </summary>
      <value>The column name in upper case.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.ColumnValue">
      <summary>
            Gets or sets the column value eg. navarchar(100) in this case value = 100.
            </summary>
      <value>The column value.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.DataType">
      <summary>
            Gets or sets the type of the data.
            </summary>
      <value>The type of the data.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.ColumnLength">
      <summary>
            Gets or sets the length of the column.
            </summary>
      <value>The length of the column.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.IsIndexed">
      <summary>
            Gets or sets the is indexed.
            </summary>
      <value>The is indexed.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.IsForeignKey">
      <summary>
            Gets or sets the Is foreign key.
            </summary>
      <value>The is foreign key.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.IsNull">
      <summary>
            Gets or sets the is null.
            </summary>
      <value>The is null.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.IsPrimary">
      <summary>
            Gets or sets the is primary.
            </summary>
      <value>The is primary.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.IsSelected">
      <summary>
            Gets or sets the is selected.
            </summary>
      <value>The is selected.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.IsExcluded">
      <summary>
            Gets or sets the is excluded.
            </summary>
      <value>The is excluded.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.Precision">
      <summary>
            Gets or sets the precision.
            </summary>
      <value>The precision.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.Scale">
      <summary>
            Gets or sets the scale.
            </summary>
      <value>The scale.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.FilterClauseAdded">
      <summary>
            Gets or sets the filter clause added.
            </summary>
      <value>The filter clause added.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.FilterType">
      <summary>
            Where filter type
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.EqualToValue">
      <summary>
            Used to set for equal to clause
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.IsGreaterThanValue">
      <summary>
            Used to set smaller bound for greater than or between clause  (small bound)  
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.ColumnEntry.IsLessThanValue">
      <summary>
            Used to set larger bound for less than or between clause (large bound)
            </summary>
    </member>
    <member name="T:MAT.Verify.AssertException">
      <summary>
            The base assert exception class
            </summary>
    </member>
    <member name="M:MAT.Verify.AssertException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Verify.AssertException" /> class.
            </summary>
    </member>
    <member name="M:MAT.Verify.AssertException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Verify.AssertException" /> class.
            </summary>
      <param name="userMessage">The user message to be displayed</param>
    </member>
    <member name="M:MAT.Verify.AssertException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Verify.AssertException" /> class.
            </summary>
      <param name="userMessage">The user message to be displayed</param>
      <param name="innerException">The inner exception</param>
    </member>
    <member name="M:MAT.Verify.AssertException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Verify.AssertException" /> class.
            </summary>
      <param name="userMessage">The user message to be displayed</param>
      <param name="stackTrace">The stack trace to be displayed</param>
    </member>
    <member name="M:MAT.Verify.AssertException.FilterStackTrace(System.String)">
      <summary>
            Filters the stack trace to remove all lines that occur within the testing framework.
            </summary>
      <param name="stackTrace">The original stack trace</param>
      <returns>The filtered stack trace</returns>
    </member>
    <member name="M:MAT.Verify.AssertException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:MAT.Verify.AssertException.StackTrace">
      <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
      <returns>A string that describes the contents of the call stack, with the most recent method call appearing first.</returns>
    </member>
    <member name="P:MAT.Verify.AssertException.UserMessage">
      <summary>
            Gets the user message
            </summary>
    </member>
    <member name="T:MAT.Verify.AssertActualExpectedException">
      <summary>
            Base class for exceptions that have actual and expected values
            </summary>
    </member>
    <member name="M:MAT.Verify.AssertActualExpectedException.#ctor(System.Object,System.Object,System.String)">
      <summary>
            Creates a new instance of the <see href="AssertActualExpectedException" /> class.
            </summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="userMessage">The user message to be shown</param>
    </member>
    <member name="M:MAT.Verify.AssertActualExpectedException.#ctor(System.Object,System.Object,System.String,System.Boolean)">
      <summary>
            Creates a new instance of the <see href="AssertActualExpectedException" /> class.
            </summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="userMessage">The user message to be shown</param>
      <param name="skipPositionCheck">Set to true to skip the check for difference position</param>
    </member>
    <member name="M:MAT.Verify.AssertActualExpectedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:MAT.Verify.AssertActualExpectedException.Actual">
      <summary>
            Gets the actual value.
            </summary>
    </member>
    <member name="P:MAT.Verify.AssertActualExpectedException.Expected">
      <summary>
            Gets the expected value.
            </summary>
    </member>
    <member name="P:MAT.Verify.AssertActualExpectedException.Message">
      <summary>
            Gets a message that describes the current exception. Includes the expected and actual values.
            </summary>
      <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:MAT.Verify.SameException">
      <summary>
            Exception thrown when two object references are unexpectedly not the same instance.
            </summary>
    </member>
    <member name="M:MAT.Verify.SameException.#ctor(System.Object,System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.SameException" /> class.
            </summary>
      <param name="expected">The expected object reference</param>
      <param name="actual">The actual object reference</param>
    </member>
    <member name="T:MAT.Verify.NullException">
      <summary>
            Exception thrown when an object reference is unexpectedly not null.
            </summary>
    </member>
    <member name="M:MAT.Verify.NullException.#ctor(System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.NullException" /> class.
            </summary>
      <param name="actual">
      </param>
    </member>
    <member name="T:MAT.Data.DataSetComparer">
      <summary>
             Compare two data sets.
             </summary>
      <example>
        <code>
             DataContext dataReaderCtx = new DataContext();
             dataReaderCtx.SourceConnectionType = DataContext.ConnectionType.SqlConnection;
             dataReaderCtx.SourceDB = "AdventureWorksLT";
             dataReaderCtx.SourceServer = "MATDaily01";
             dataReaderCtx.DestinationConnectionType = DataContext.ConnectionType.SqlConnection;
             dataReaderCtx.DestinationDB = "AdventureWorksLT";
             dataReaderCtx.DestinationServer = "MATDaily01";
             dataReaderCtx.IsAsync = true;
            
             string sourceQuery = "select * from SalesLT.Product";
             string destQuery = "select * from SalesLT.Product";
             message = DataComparer.DataReaderCompare(dataReaderCtx, sourceQuery, destQuery);
             Assert.IsNull(message);
             </code>
      </example>
    </member>
    <member name="M:MAT.Data.DataSetComparer.#ctor(System.String,MAT.Data.DataContext.ConnectionType,System.String,MAT.Data.DataContext.ConnectionType)">
      <summary>
            Constructor which takes the Input for SQL connection and MDX connection types
            </summary>
      <param name="firstConnection">Sql ConnectionString or Analysis services Connection String </param>
      <param name="firstType">SQLconnection or MDXConnection</param>
      <param name="secondConnection">Sql ConnectionString or Analysis services Connection String </param>
      <param name="secondType">SQLconnection or MDXConnection</param>
    </member>
    <member name="M:MAT.Data.DataSetComparer.#ctor(System.String,MAT.Data.DataContext.ConnectionType)">
      <summary>
      </summary>
      <param name="firstConnection">
      </param>
      <param name="firstType">
      </param>
            This is for executing the except clauses.
        </member>
    <member name="M:MAT.Data.DataSetComparer.CompareDataSet(System.Data.DataSet,System.Data.DataSet,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            The Actual Method which does the Data set comparison between the two Data sets 
            </summary>
      <param name="firstDS">Source Data set which you want to compare</param>
      <param name="secondDS">Destination Data set which you want to compare </param>
      <param name="maxCountOfErrorsShown">The  Max Number of Errors which can be shown</param>
      <returns>Comparison results.  Null == No errors</returns>
    </member>
    <member name="M:MAT.Data.DataSetComparer.CompareData(MAT.Data.DataContext,System.String)">
      <summary>
            Perform data comparison
            </summary>
      <param name="context">The data context.</param>
      <param name="query">Query string.</param>
      <returns>Comparison results.  Null == No errors</returns>
    </member>
    <member name="M:MAT.Data.DataSetComparer.CompareData(MAT.Data.DataContext,System.String,System.String,System.Int32,System.Boolean)">
      <summary>
            Perform data comparison
            </summary>
      <param name="context">The data context.</param>
      <param name="firstQuery">The first query string.</param>
      <param name="secondQuery">The second query string.</param>
      <param name="countOfErrors">Number of errors to find before returning.</param>
      <returns>Comparison results.  Null == No errors</returns>
    </member>
    <member name="T:MAT.DataCompare.Core.TableMapResult">
      <summary>
            Table map results
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.TableMapResult.schemaCompareFilters">
      <summary>
            Set default value = true
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.TableMapResult.includeTables">
      <summary>
            include table list eg:  "table1" or "table1, table2" 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.TableMapResult.excludeTables">
      <summary>
            exclude table list eg:  "table1" or "table1, table2" 
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.TableMapResult.AssertSchemaMatched(System.String,System.String)">
      <summary>
            Asserts the schema matched.
            </summary>
      <param name="excludeTables">The exclude tables. eg: "table1" or "table1, table2"</param>
      <param name="includeTables">The include tables. eg: "table1" or "table1, table2"</param>
    </member>
    <member name="M:MAT.DataCompare.Core.TableMapResult.AssertSchemaMatchedWithOnlyFailedResults(System.String,System.String)">
      <summary>
            Asserts the schema matched with only failed results.
            </summary>
      <param name="excludeTables">The exclude tables. eg: "table1" or "table1, table2"</param>
      <param name="includeTables">The exclude tables. eg: "table1" or "table1, table2"</param>
    </member>
    <member name="P:MAT.DataCompare.Core.TableMapResult.SchemaCompareFilters">
      <summary>
            Gets or sets the schema compare filters.
            </summary>
      <value>The schema compare filters.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.TableMapResult.SchemaCompareResults">
      <summary>
            Gets or sets the schema compare results.
            </summary>
      <value>The schema compare results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.TableMapResult.PassedResults">
      <summary>
            Gets the passed results.
            </summary>
      <value>The passed results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.TableMapResult.FailedResults">
      <summary>
            Gets the failed results.
            </summary>
      <value>The failed results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.TableMapResult.SummaryMessage">
      <summary>
            Gets the summary message.
            </summary>
      <value>The summary message.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.TableMapResult.SummaryMessageOnlyMissmatchedResults">
      <summary>
            Gets the summary message.
            </summary>
      <value>The summary message.</value>
    </member>
    <member name="T:MAT.DataCompare.DataAccess.HashDatabaseSettings">
      <summary>
            It provides mechanism to check server is alive, db exist etc
            </summary>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabaseSettings.pingServer(System.String)">
      <summary>
            Pings the server.
            Validate server is alive
            </summary>
      <param name="serverName">Name of the server.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabaseSettings.pingDatabase(System.String)">
      <summary>
            Pings the database.
            Check database exist
            </summary>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabaseSettings.IsSysAdmin(System.String)">
      <summary>
            Gets true for sys admin or false
            </summary>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabaseSettings.parseSqlString(System.String,System.String)">
      <summary>
            Parses the SQL string.
            </summary>
      <param name="sqlCommandText">The SQL command text.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabaseSettings.GetSqlServerVersion(System.String)">
      <summary>
            Gets the SQL server version.
            </summary>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="F:MAT.DataCompare.Core.StoredProcedureMapResult.schemaCompareFilters">
      <summary>
            Set default value = true
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.StoredProcedureMapResult.AssertSchemaMatched">
      <summary>
            Asserts the schema matched.
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.StoredProcedureMapResult.AssertSchemaMatchedWithOnlyFailedResults">
      <summary>
            Asserts the schema matched with only failed results.
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.StoredProcedureMapResult.SchemaCompareFilters">
      <summary>
            Gets or sets the schema compare filters.
            </summary>
      <value>The schema compare filters.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.StoredProcedureMapResult.SchemaCompareResults">
      <summary>
            Gets or sets the schema compare results.
            </summary>
      <value>The schema compare results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.StoredProcedureMapResult.PassedResults">
      <summary>
            Gets the passed results.
            </summary>
      <value>The passed results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.StoredProcedureMapResult.FailedResults">
      <summary>
            Gets the failed results.
            </summary>
      <value>The failed results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.StoredProcedureMapResult.SummaryMessage">
      <summary>
            Gets the summary message.
            </summary>
      <value>The summary message.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.StoredProcedureMapResult.SummaryMessageOnlyMissmatchedResults">
      <summary>
            Gets the summary message.
            </summary>
      <value>The summary message.</value>
    </member>
    <member name="T:MAT.Verify.DoesNotContainException">
      <summary>
            Exception thrown when a collection unexpectedly contains the expected value.
            </summary>
    </member>
    <member name="M:MAT.Verify.DoesNotContainException.#ctor(System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.DoesNotContainException" /> class.
            </summary>
      <param name="expected">The expected object value</param>
    </member>
    <member name="T:MAT.HttpAnalysis.AttachType">
      <summary>
            Attach types for starting HttpAnalyzer
            </summary>
    </member>
    <member name="F:MAT.HttpAnalysis.AttachType.All">
      <summary>
            Attach to all processes
            </summary>
    </member>
    <member name="F:MAT.HttpAnalysis.AttachType.CurrentSession">
      <summary>
            Attach only to processes owned by the currently running assembly
            </summary>
    </member>
    <member name="T:MAT.HttpAnalysis.HttpAnalyze">
      <summary>
            Wrapper to HttpAnalyzer.  
            </summary>
      <remarks>HttpAnalyzer is a COM object that must be registered on the server running this code.  You can install from the KAF install folder.</remarks>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.#ctor(MAT.HttpAnalysis.AttachType)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.HttpAnalysis.HttpAnalyze" /> class.
            </summary>
      <param name="type">Type of attachment (all processes or current process)</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">HttpAnalyzer not installed.</exception>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.HttpAnalysis.HttpAnalyze" /> class.
            </summary>
      <param name="processId">The process ID.</param>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.HttpAnalysis.HttpAnalyze" /> class.
            </summary>
      <param name="processName">Name of the process.</param>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.Start">
      <summary>
            Starts listening.
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.Stop">
      <summary>
            Stops listening.
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.Pause">
      <summary>
            Pauses listening.
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.Resume">
      <summary>
            Resumes listening.
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.Clear">
      <summary>
            Clears the list of entries found during last listen state.
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.DeletePersistentCookie(System.String)">
      <summary>
            The DeletePersistentCookie method is used to clear all persistent cookies for a specific URL in the local browser cookies.
            </summary>
      <param name="cookiePath"> The local browser persistent cookies files matched with the URL should be deleted.</param>
      <remarks>The DeletePersistentCookie method is only available in WinInet-based applications or firefox browser.</remarks>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.DeleteSessionCookies">
      <summary>
            The DeleteSessionCookies method is used to clear out Session Cookies for a local browser instance.
            </summary>
      <remarks>The DeleteSessionCookies method is only available in WinInet-based applications or firefox browser.</remarks>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.DeleteUrlCache(System.String)">
      <summary>
            The DeleteURLCache method is used to delete the specific URL's local browser cached file.
            </summary>
      <param name="cachePath"> The local browser cached files matched with the URL should be deleted.</param>
      <remarks>The method is available if the application uses the Microsoft WININET API (ex. ie, outlook) or or firefox browser.</remarks>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.Dispose">
      <summary>
            Stops listening and closes connection to HttpAnalyzer
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.HttpAnalyze.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:MAT.HttpAnalysis.HttpAnalyze.Items">
      <summary>
            Gets the items.
            </summary>
      <value>The items.</value>
    </member>
    <member name="T:MAT.Data.CommonSqlTasks">
      <summary>
            Common tasks used for testing SQL server
            </summary>
    </member>
    <member name="M:MAT.Data.CommonSqlTasks.CreateConnectionString(System.String,System.String)">
      <summary>
            Creates the connection string.
            </summary>
      <param name="serverName">Name of the server.</param>
      <param name="databaseName">Name of the database.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.CommonSqlTasks.CreateSourceConnectionString(MAT.Data.DataContext)">
      <summary>
            Creates the source connection string.
            </summary>
      <param name="dataContext">The data context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.CommonSqlTasks.CreateDestConnectionString(MAT.Data.DataContext)">
      <summary>
            Creates the dest connection string.
            </summary>
      <param name="dataContext">The data context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.CommonSqlTasks.DataReaderHasRows(System.Data.SqlClient.SqlDataReader,System.Boolean)">
      <summary>
            Datas the reader has rows.
            </summary>
      <param name="sqlDataReader">The SQL data reader.</param>
      <param name="closeConnection">if set to <c>true</c> [close connection].</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.CommonSqlTasks.SetConnectionSettings(MAT.Data.DataContext)">
      <summary>
            Sets the connection settings.
            </summary>
      <param name="dataContext">The data context.</param>
    </member>
    <member name="T:MAT.BuildTasks.ReplaceText">
      <summary>
            Build task for replacing text in a string.
            </summary>
      <example>
        <para>Replacing Text String</para>
        <code>
              &lt;UsingTask TaskName="MAT.BuildTasks.ReplaceText" AssemblyFile="MAT.Core.dll" /&gt;
                &lt;ReplaceText Text="$(Text)"
                                SearchFor="$(SearchFor)"
                                ReplaceWith="$(ReplaceWith)"
                  &lt;Output TaskParameter="ReplacedText" PropertyName="ReplacedText"/&gt;
                &lt;ReplaceText/&gt;
            </code>
      </example>
      <example>
        <para>Replacing Text in a File</para>
        <code>
              &lt;UsingTask TaskName="MAT.BuildTasks.ReplaceText" AssemblyFile="MAT.Core.dll" /&gt;
                &lt;ReplaceText InFile="$(AssemblyInfoFile)"
                                SearchFor="$(BuildPrefix)"
                                ReplaceWith="$(BuildPrefix)"
                  &lt;Output TaskParameter="ReplacedText" PropertyName="ReplacedText"/&gt;
                &lt;ReplaceText/&gt;
            </code>
      </example>
    </member>
    <member name="M:MAT.BuildTasks.ReplaceText.#ctor">
      <summary>
            Build task for replacing text in a string.
            </summary>
    </member>
    <member name="M:MAT.BuildTasks.ReplaceText.Execute">
      <summary>
            Replaces text.
            </summary>
      <returns>true is succeeded; otherwise false.</returns>
    </member>
    <member name="P:MAT.BuildTasks.ReplaceText.InFile">
      <summary>
            File to read.  Text can be used instead of File.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.ReplaceText.OutFile">
      <summary>
            Save file.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.ReplaceText.Text">
      <summary>
            Text to be replaced
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.ReplaceText.SearchFor">
      <summary>
            Gets or sets the search text.
            </summary>
      <value>The search text.</value>
    </member>
    <member name="P:MAT.BuildTasks.ReplaceText.ReplaceWith">
      <summary>
            Gets or sets the replace text.
            </summary>
      <value>The replace text.</value>
    </member>
    <member name="P:MAT.BuildTasks.ReplaceText.ReplacedText">
      <summary>
            Replaced text.
            </summary>
    </member>
    <member name="T:MAT.Xml.Serializer">
      <summary>
            Serializer contains helper functions for quickly serializing and deserializing objects.
            </summary>
    </member>
    <member name="M:MAT.Xml.Serializer.FileToObject(System.String,System.Type)">
      <summary>
            Reads an object from an xml file. Use typeof(Foo) for the second parameter
            </summary>
      <param name="path">The full path to the file</param>
      <param name="objectType">The type of the object reading</param>
      <returns>The object, which has to be cast to the actual type</returns>
    </member>
    <member name="M:MAT.Xml.Serializer.ObjectToFile(System.String,System.Object)">
      <summary>
            Writes an object to an xml file.
            </summary>
      <param name="path">The full path to the file</param>
      <param name="serializeObject">The object you are writing</param>
    </member>
    <member name="M:MAT.Xml.Serializer.ObjectToXml(System.Object)">
      <summary>
            Writes an object to an xml in-memory string
            </summary>
      <param name="serializeObject">The object you are writing</param>
      <returns>Object's serialized Xml string</returns>
    </member>
    <member name="T:MAT.Windows.Forms.HourGlass">
      <summary>
            Ensures the hourglass is visible during long processes.
            </summary>
      <example>
        <para>Example 1: Static usage</para>
        <code>
            HourGlass.Enabled = true;
            //do something (used often in callback functions)...
            Hourglass.Enabled = false;
            </code>
        <para>Example 2: Using statment</para>
        <code>
            using(new HourGlass())
            {
                //do something...
            }
            </code>
      </example>
    </member>
    <member name="M:MAT.Windows.Forms.HourGlass.#ctor">
      <summary>
            Ensures the hourglass is visible during long processes.
            </summary>
    </member>
    <member name="M:MAT.Windows.Forms.HourGlass.Dispose">
      <summary>
            Dispose
            </summary>
    </member>
    <member name="M:MAT.Windows.Forms.HourGlass.Dispose(System.Boolean)">
      <summary>
            Dispose
            </summary>
      <param name="disposing">set on first dispose</param>
    </member>
    <member name="P:MAT.Windows.Forms.HourGlass.Enabled">
      <summary>
            Toggle hourglass cursor
            </summary>
    </member>
    <member name="T:MAT.Data.DataComparer">
      <summary>
            #1
            Run data comparisons using DataReader or DataSet comparisons.
            </summary>
    </member>
    <member name="M:MAT.Data.DataComparer.DataSetCompareEx(MAT.Data.DataContext,System.String,System.String,System.Int32,System.String,System.String,System.String)">
      <summary>
            Run comparison between two queries using the dataset contexts.
            </summary>
      <param name="dataSetContext">The data set context.</param>
      <param name="sourceQuery">The source query.</param>
      <param name="destQuery">The destination query.</param>
      <param name="maxErrorCount">The error count.</param>
      <param name="hostName">Server to remotely run queries and comparison, usually the source server.</param>
      <param name="userName">User account to run under.</param>
      <param name="password">Password;  If no password is given then code will look in Protected Data Store.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataComparer.DataSetCompare(MAT.Data.DataContext,System.String,System.String,System.Int32)">
      <summary>
            Run comparison between two queries using the dataset contexts.
            </summary>
      <param name="dataSetContext">The data set context.</param>
      <param name="sourceQuery">The source query.</param>
      <param name="destQuery">The destination query.</param>
      <param name="maxErrorCount">The error count.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.ForceStrictNamingAttribute">
      <summary>
            Turns off allowing property names to serve as Name attributes.
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.ForceStrictAliasingAttribute">
      <summary>
            Turns off auto-aliasing.
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.ForceUnknownTokenCheckAttribute">
      <summary>
            Forces unknown tokens to cause failures
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.ForceStrictEnumAliasingAttribute">
      <summary>
            Turns off allowing shortest distinct names for enum values.
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.DoNotSupportStandardOptionalAndUndefinedBehaviorAttribute">
      <summary>
            Instructs the validator system to run the validators even if the switch isn't defined and it is marked as optional.
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.DoNotSupportDefaultHelpAttribute">
      <summary>
            Instructs the validator system to not perform a PrintUsage() if the standard help switches (help and ?) are specified as the first param
            </summary>
    </member>
    <member name="T:MAT.SmtpMail">
      <summary>
            SMTP (Simple Mail Transfer Protocol) commands.
            </summary>
    </member>
    <member name="M:MAT.SmtpMail.Send(System.String,System.String,System.String,System.String)">
      <summary>
            Sends a mail message using SMTP.<br />
            Defaults to HTML Format, Normal Priority 
            </summary>
      <overloads>
        <example>
            Posting a simple mail notification
            <code>
            SMTPMail.Send("me@microsoft.com", "me@microsoft.com", "Sample Automated Mail", "Sample Automated Mail");
            </code></example>
        <example>
            Posting a mail with attachments
            <code>
            string[] attachmentPaths = new string[2];
            attachmentPaths[0] = "C:\\MyLog.txt";
            attachmentPaths[1] = "C:\\MyLog2.txt";
            string bodyText = "&lt;h1&gt;Attached are two log files&lt;/h1&gt;" +
            				  "&lt;table border=\"1\"&gt;" +
            				  "&lt;tr&gt;&lt;th&gt;File&lt;/th;&gt;&lt;th&gt;Comment&lt;/th&gt;&lt;/tr&gt;" +
            				  "&lt;tr&gt;&lt;td&gt;MyLog.txt&lt;/td;&gt;&lt;td&gt;A Log file&lt;/td&gt;&lt;/tr&gt;" +
            				  "&lt;tr&gt;&lt;td&gt;MyLog2.txt&lt;/td;&gt;&lt;td&gt;Another Log file&lt;/td&gt;&lt;/tr&gt;" +
            				  "&lt;/table&gt;";
            
            SMTPMail.Send("me@microsoft.com", "me@microsoft.com", null, null, "Test Mail", bodyText, attachmentPaths, true, false);
            </code></example>
      </overloads>
      <example>
            Posting a simple mail notification
            <code>
            SMTPMail.Send("me@microsoft.com", "me@microsoft.com", "Sample Automated Mail", "Sample Automated Mail");
            </code></example>
      <param name="to">To</param>
      <param name="from">From</param>
      <param name="subject">Subject line</param>
      <param name="body">Body text</param>
    </member>
    <member name="M:MAT.SmtpMail.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.Boolean,System.Boolean)">
      <summary>
            Sends a mail message using SMTP
            </summary>
      <example>
            Posting a mail with attachments
            <code>
            string[] attachmentPaths = new string[2];
            attachmentPaths[0] = "C:\\MyLog.txt";
            attachmentPaths[1] = "C:\\MyLog2.txt";
            string bodyText = "&lt;h1&gt;Attached are two log files&lt;/h1&gt;" +
            				  "&lt;table border=\"1\"&gt;" +
            				  "&lt;tr&gt;&lt;th&gt;File&lt;/th;&gt;&lt;th&gt;Comment&lt;/th&gt;&lt;/tr&gt;" +
            				  "&lt;tr&gt;&lt;td&gt;MyLog.txt&lt;/td;&gt;&lt;td&gt;A Log file&lt;/td&gt;&lt;/tr&gt;" +
            				  "&lt;tr&gt;&lt;td&gt;MyLog2.txt&lt;/td;&gt;&lt;td&gt;Another Log file&lt;/td&gt;&lt;/tr&gt;" +
            				  "&lt;/table&gt;";
            
            SMTPMail.Send("me@microsoft.com", "me@microsoft.com", null, null, "Test Mail", bodyText, attachmentPaths, true, false);
            </code></example>
      <param name="to">To</param>
      <param name="from">From</param>
      <param name="carbonCopy">Carbon copy recipients</param>
      <param name="blindCarbonCopy">Blind carbon copy recipients</param>
      <param name="subject">Subject line</param>
      <param name="body">Body text</param>
      <param name="attachments">String array of fully qualified file paths to files that will be attached to the e-mail</param>
      <param name="htmlFormat">Send mail using HTML Format</param>
      <param name="highPriority">Mark mail as high priority</param>
    </member>
    <member name="P:MAT.SmtpMail.SMTPServer">
      <summary>
            SMTP (Simple Mail Transfer Protocol) commands.
            </summary>
      <example>
            Posting a simple mail notification
            <code>
            SMTPMail.Send("me@microsoft.com", "me@microsoft.com", "Sample Automated Mail", "Sample Automated Mail");
            </code></example>
      <example>
            Posting a mail with attachments
            <code>
            string[] attachmentPaths = new attachmentPaths[2];
            attachmentPaths[0] = "C:\\MyLog.txt";
            attachmentPaths[1] = "C:\\MyLog2.txt";
            string bodyText = "&lt;h1&gt;Attached are two log files&lt;/h1&gt;" +
            				  "&lt;table border=\"1\"&gt;" +
            				  "&lt;tr&gt;&lt;th&gt;File&lt;/th;&gt;&lt;th&gt;Comment&lt;/th&gt;&lt;/tr&gt;" +
            				  "&lt;tr&gt;&lt;td&gt;MyLog.txt&lt;/td;&gt;&lt;td&gt;A Log file&lt;/td&gt;&lt;/tr&gt;" +
            				  "&lt;tr&gt;&lt;td&gt;MyLog2.txt&lt;/td;&gt;&lt;td&gt;Another Log file&lt;/td&gt;&lt;/tr&gt;" +
            				  "&lt;/table&gt;";
            
            SMTPMail.Send("me@microsoft.com", "me@microsoft.com", null, null, "Test Mail", bodyText, attachmentPaths, true, false);
            </code></example>
    </member>
    <member name="T:MAT.ShellCommands">
      <summary>
            A collection of helper functions that are normally available through batch programming.
            </summary>
    </member>
    <member name="T:MAT.ShellCommands.RunResults">
      <summary>
            Results of Execution
            </summary>
    </member>
    <member name="M:MAT.ShellCommands.RunResults.WaitUntilProcessEnds(System.TimeSpan)">
      <summary>
            Wait for process to exit
            </summary>
      <param name="timeOut">Max length before timing out.</param>
      <returns>Results of timeout information to determine if timed out.</returns>
    </member>
    <member name="P:MAT.ShellCommands.RunResults.IsProcessAlive">
      <summary>
            Is Process Alive
            </summary>
    </member>
    <member name="M:MAT.ShellCommands.FindFastestAccessibleServerPath(System.Collections.Specialized.StringCollection)">
      <summary>
            Finds the fastest accessible server from a list of machines or machine paths.
            </summary>
      <param name="folderPath">The folder paths.  new String[] { "\\server1\c$", ".", "C:\this" }.  "." represents current executing assembly path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.ShellCommands.GetGlobalTempFolder(System.Boolean)">
      <summary>
            Gets/Creates an empty folder either in the local temporary directory (UserLocal) or in
            %ALLUSERSPROFILE%\MAT_TEMP (usually ProgramData)
            </summary>
      <param name="useLocal">Use local temp path or global temp location</param>
      <returns>Full path of created folder</returns>
    </member>
    <member name="M:MAT.ShellCommands.GetGlobalTempFolder">
      <summary>
            Gets/Creates an empty folder either in the local temporary directory in
            %ALLUSERSPROFILE%\MAT_TEMP (usually ProgramData)
            </summary>
      <returns>Full path of created folder</returns>
    </member>
    <member name="M:MAT.ShellCommands.GetGlobalTempFolder(System.Boolean,System.String,System.String)">
      <summary>
            Gets/Creates an empty folder either in the local temporary directory (UserLocal) or in
            %ALLUSERSPROFILE%\MAT_TEMP (usually ProgramData)
            </summary>
      <param name="useLocal">Use local temp path or global temp location</param>
      <param name="prefix">file prefix</param>
      <param name="suffix">file suffix</param>
      <returns>Full path of created folder</returns>
    </member>
    <member name="M:MAT.ShellCommands.GetGlobalTempFileName(System.Boolean)">
      <summary>
            Gets/Creates an empty file either in the local temporary directory (UserLocal) or in
            ALLUSERSPROFILE\MAT_TEMP (usually ProgramData)
            </summary>
      <param name="useLocal">Use local temp path or global temp location</param>
      <returns>Full path of created file</returns>
    </member>
    <member name="M:MAT.ShellCommands.GetGlobalTempFileName">
      <summary>
            Creates an empty file in ALLUSERSPROFILE\MAT_TEMP (usually ProgramData\MAT_TEMP)
            </summary>
      <returns>Full path of created file</returns>
    </member>
    <member name="M:MAT.ShellCommands.GetGlobalTempFileName(System.String,System.String)">
      <summary>
            Creates an empty file in ALLUSERSPROFILE\MAT_TEMP (usually ProgramData\MAT_TEMP)
            </summary>
      <param name="prefix">file prefix</param>
      <param name="suffix">file suffix</param>
      <returns>Full path of created file</returns>
    </member>
    <member name="M:MAT.ShellCommands.GetGlobalTempFileName(System.Boolean,System.String,System.String)">
      <summary>
            Creates an empty file either in the local temporary directory (useLocal) or in
            ALLUSERSPROFILE\MAT_TEMP (usually ProgramData)
            </summary>
      <param name="useLocal">Use local temp path or global temp location</param>
      <param name="prefix">file prefix</param>
      <param name="suffix">file suffix</param>
      <returns>Full path of created file</returns>
    </member>
    <member name="M:MAT.ShellCommands.CopyFolderOrFile(System.String,System.String)">
      <summary>
            Copy a folder or file
            </summary>
      <param name="source">Source file or directory</param>
      <param name="destination">Destination file or directory</param>
      <returns>Returns status of copy</returns>
    </member>
    <member name="M:MAT.ShellCommands.CopyFolderOrFile(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Copy a folder or file
            </summary>
      <param name="source">Source file or directory</param>
      <param name="destination">Destination file or directory</param>
      <param name="includeSubfolders">Whether or not to include subfolders</param>
      <param name="showDialog">Whether or not to show the copying dialog</param>
      <returns>Returns status of copy</returns>
    </member>
    <member name="M:MAT.ShellCommands.MoveFolderOrFile(System.String,System.String)">
      <summary>
            Move a folder or file
            </summary>
      <param name="source">Source file or directory</param>
      <param name="destination">Destination file or directory</param>
      <returns>Returns status of the move</returns>
    </member>
    <member name="M:MAT.ShellCommands.MoveFolderOrFile(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Move a folder or file
            </summary>
      <param name="source">Source file or directory</param>
      <param name="destination">Destination file or directory</param>
      <param name="includeSubfolders">Whether or not to include sub folders</param>
      <param name="showDialog">Whether or not to show the windows dialog</param>
      <returns>Returns status of the move</returns>
    </member>
    <member name="M:MAT.ShellCommands.ToLongPathName(System.String)">
      <summary>
            The ToLongPathName function retrieves the long path form of a specified short input path
            </summary>
      <param name="shortName">The short name path</param>
      <returns>A long name path string</returns>
    </member>
    <member name="M:MAT.ShellCommands.ToShortPathName(System.String)">
      <summary>
            The ToLongPathName function retrieves the short path form of a specified long input path
            </summary>
      <param name="longName">The long name path</param>
      <returns>A short name path string</returns>
    </member>
    <member name="M:MAT.ShellCommands.GetPathCurrentCompatibleDateTime">
      <summary>
            Get the current and date and time in standard MSCOM folder names. MM-DD-YY-HH-MM
            </summary>
      <returns>File system compatable date</returns>
    </member>
    <member name="M:MAT.ShellCommands.GetPathCompatibleDateTime(System.String)">
      <summary>
            Converts a date and time to standard MSCOM folder names. MM-DD-YY-HH-MM
            </summary>
      <param name="date">Date to convert</param>
      <returns>File system compatable date</returns>
    </member>
    <member name="M:MAT.ShellCommands.GetPathCompatibleDateTime(System.DateTime)">
      <summary>
            Converts a date and time to standard MSCOM folder names. MM-DD-YY-HH-MM
            </summary>
      <param name="date">Date to convert</param>
      <returns>File system compatable date</returns>
    </member>
    <member name="M:MAT.ShellCommands.WaitToEndIfNecessary">
      <summary>
            If console application was launched through a shortcut or by double-clicking 
            from desktop or windows explorer the program will add a "Press ENTER to continue"
            If console was run from command line nothing happens.
            </summary>
    </member>
    <member name="M:MAT.ShellCommands.RunProgramAndWait(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Start and application and return control only after application has exited.
            </summary>
      <param name="path">Path and executable name</param>
      <param name="args">Optional Arguments</param>
      <param name="userName">User account to run under</param>
      <param name="password">Password for user account; if null and userName not null will attempt to lookup password from Protected Data Store</param>
      <param name="workingDirectory">Directory in which work will be done</param>
      <returns>Retruns the standard and Error output</returns>
    </member>
    <member name="M:MAT.ShellCommands.RunProgramWithoutWaiting(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Start and application
            </summary>
      <param name="path">Path and executable name</param>
      <param name="args">Optional Arguments</param>
      <param name="userName">User account to run under</param>
      <param name="password">Password for user account; if null and userName not null will attempt to lookup password from Protected Data Store</param>
      <param name="workingDirectory">Directory in which work will be done</param>
      <returns>Retruns the standard and Error output</returns>
    </member>
    <member name="M:MAT.ShellCommands.Ping(System.String)">
      <summary>
            Ping an address
            </summary>
      <overloads>
        <example>
          <code lang="C#" escaped="true">
            string returnTime = ShellCommands.Ping("msspades")
            if(returnTime == null)
            {
            	Console.WriteLine("MSSPADES can not be contacted.");
            }
            else
            {
            	Console.WriteLine("MSSPADES completed ping in " + returnTime + "ms");
            }
            </code>
        </example>
        <summary>
            Ping an address to retrieve ping return time.
            </summary>
      </overloads>
      <param name="address">Address to ping</param>
      <remarks>The address can be in any address form such as 127.0.0.1, www.microsoft.com or server name msspades.</remarks>
      <example>
        <code lang="C#" escaped="true">
            string returnTime = ShellCommands.Ping("msspades")
            if(returnTime == null)
            {
            	Console.WriteLine("MSSPADES can not be contacted.");
            }
            else
            {
            	Console.WriteLine("MSSPADES completed ping in " + returnTime + "ms");
            }
            </code>
      </example>
      <returns>Milliseconds for reply; null is timeout (5 sec default)</returns>
    </member>
    <member name="M:MAT.ShellCommands.Ping(System.String,System.TimeSpan)">
      <summary>
            Ping an address
            </summary>
      <remarks>The address can be in any address form such as 127.0.0.1, www.microsoft.com or server name msspades.</remarks>
      <example>
        <code lang="C#" escaped="true">
            TimeSpan timeOut = new TimeSpan(0, 0, 30); // Create 30 second timeout
            string returnTime = ShellCommands.Ping("msspades", timeOut)
            if(returnTime == null)
            {
            	Console.WriteLine("MSSPADES can not be contacted.");
            }
            else
            {
            	Console.WriteLine("MSSPADES completed ping in " + returnTime + "ms");
            }
            </code>
      </example>
      <param name="address">Address to ping</param>
      <param name="timeout">Time until timeout</param>
      <returns>Milliseconds for reply; null is timeout</returns>
      <permission cref="T:System.Security.PermissionSet">You must be Admin on box to run this.</permission>
    </member>
    <member name="M:MAT.ShellCommands.GetMachineAddress(System.String)">
      <summary>
            Finds the IP address for a machine name.
            </summary>
      <param name="remoteMachine">Machine to look up</param>
      <returns>IP Address</returns>
      <exception cref="T:System.Net.Sockets.SocketException">Standard socket exceptions.  Usually Host not found.</exception>
    </member>
    <member name="T:MAT.Server.ReaderDelegate">
      <summary>
            Delegate for ExecReader methods. The method passed as this delegate is used to process a single row of data and return an object.
            </summary>
      <param name="reader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.Server.SqlHelper">
      <summary>
            Provides helper methods for executing sql statements on Microsoft SQL Server
            </summary>
    </member>
    <member name="T:MAT.Server.SqlHelper.LinkedServer">
      <summary>
            Gives remote Sql server access to execute distributed queries.
            </summary>
    </member>
    <member name="M:MAT.Server.SqlHelper.LinkedServer.Add(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Creates linked server on source server.
            </summary>
      <param name="sourceServerName">Source Sql Server Name</param>
      <param name="dataSource">Linked Sql Server Name</param>
      <param name="catalog">Database Name on the Linked Server</param>
      <param name="remoteUser">Remote user name to connect to the Linked Server. Remote user shoud have Sql Server Authentication Login.</param>
      <param name="remotePwd">Remote users password to connect to the linked server</param>
      <param name="linkedServerName">If you want name of the Linked Server different than datasource name then specify here</param>
      <param name="productName">Name of the product.</param>
      <param name="providerName">Name of the provider.</param>
      <param name="location">The location.</param>
      <param name="providerString">The provider string.</param>
      <remarks>If Linked server is SQL Server then ProviderName, DataSource, Location, ProviderString and Catalog is NULL</remarks>
    </member>
    <member name="M:MAT.Server.SqlHelper.LinkedServer.Drop(System.String,System.String)">
      <summary>
            Removes Linked Server from the SourceServer
            </summary>
      <param name="sourceServerName">Name of SQLServer</param>
      <param name="linkedServerName">Name of LinkedServer</param>
    </member>
    <member name="M:MAT.Server.SqlHelper.LinkedServer.DoesLinkedServerExist(System.String,System.String)">
      <summary>
            Determine whether LinkedServer already exists in SourceServer or not
            </summary>
      <param name="sourceServerName">Name of Source Sql Server</param>
      <param name="linkedServerName">Name of Linked Sql Server</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.#ctor(System.Data.SqlClient.SqlConnectionStringBuilder)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.SqlHelper" /> class.
            </summary>
      <param name="connection">The connection.</param>
    </member>
    <member name="M:MAT.Server.SqlHelper.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.SqlHelper" /> class.
            </summary>
      <param name="connectionOrServer">The connection string or servername.</param>
    </member>
    <member name="M:MAT.Server.SqlHelper.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.SqlHelper" /> class.
            </summary>
      <param name="serverName">Name of the server.</param>
      <param name="databaseName">Name of the database.</param>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetInstance(System.String)">
      <summary>
            Gets an instance of the SqlHelper class
            </summary>
      <param name="connectionString">A valid connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetInstance(System.String,System.String)">
      <summary>
            Gets an instance of the SqlHelper class
            </summary>
      <param name="serverName">The name of the server where the database resides</param>
      <param name="databaseName">The name of the database</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.DoesObjectExistInDatabase(System.String)">
      <summary>
            Verify whether the given object - Table or Stored Proc or Function or any database object exist in the database or not
            </summary>
      <param name="objectName">Name of the Database object</param>
    </member>
    <member name="M:MAT.Server.SqlHelper.DoesObjectExistInDatabase(System.String,System.String)">
      <summary>
            Verify whether the given object - Table or Stored Proc or Function or any database object exist in the database or not
            </summary>
      <param name="objectName">Name of the Database object without schema name eg: Address</param>
      <param name="connectionString">ConnectionString to connec to database</param>
      <returns>True / False</returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.DoesObjectExistInDatabase(System.String,System.String,System.String)">
      <summary>
            Verify whether the given object - Table or Stored Proc or Function or any database object exist in the database or not
            </summary>
      <param name="objectName">Name of the Database object</param>
      <param name="serverName">Name of the Sql Server</param>
      <param name="databaseName">Name of the Database</param>
      <returns>True / False</returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetQueryRowCount(System.String,System.String,System.String)">
      <summary>
            Returns number of rows in the given query
            </summary>
      <param name="query">T-SQL select query</param>
      <param name="serverName">Name of the Sql Server</param>
      <param name="databaseName">Name of the Database</param>
      <returns>integer</returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetQueryRowCount(System.String,System.String)">
      <summary>
            Returns number of rows in the given query
            </summary>
      <param name="query">T-SQL select query</param>
      <param name="connectionString">ConnectionString to connec to database</param>
      <returns>integer</returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetQueryRowCount(System.String)">
      <summary>
            Returns number of rows in the given query
            </summary>
      <param name="query">T-SQL select query</param>
    </member>
    <member name="M:MAT.Server.SqlHelper.TruncateTable(System.String,System.String,System.String)">
      <summary>
            Truncate the rows in database table
            </summary>
      <param name="tableName">Name of the database table</param>
      <param name="serverName">Name of the Server</param>
      <param name="dbName">Name of the database</param>
    </member>
    <member name="M:MAT.Server.SqlHelper.TruncateTable(System.String)">
      <summary>
            Truncate the rows in database table
            </summary>
      <param name="tableName">Name of the database table</param>
    </member>
    <member name="M:MAT.Server.SqlHelper.CreateConnectionString(System.String,System.String)">
      <summary>
            Retruns connection sring for that server and database using integrated security
            </summary>
      <param name="serverName">Name of the SQLServer</param>
      <param name="databaseName">Name of the Database</param>
      <returns>ConnectionString</returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.NewCommandObject(System.String,System.Data.SqlClient.SqlConnection)">
      <summary>
            Creates a Command object with globally set property values. The caller is responsible for disposing
            </summary>
      <param name="cmdText">The command text to execute</param>
      <param name="connection">An open connection</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetXmlDocument(System.String)">
      <summary>
            Returns XML document for the specified query.
            </summary>
      <param name="select">The sql select statemement</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetXmlDocument(System.String,System.String,System.String)">
      <summary>
            Returns XML document for the specified query.
            </summary>
      <param name="select">The sql select statemement</param>
      <param name="serverName">The server name</param>
      <param name="databaseName">The database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetXmlDocument(System.String,System.String)">
      <summary>
            Returns XML document for the specified query.
            </summary>
      <param name="select">The sql select statemement</param>
      <param name="connectionString">The connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetObject(System.String)">
      <summary>
            Returns the first row in the first column for the specified query.
            </summary>
      <param name="select">The sql select statemement</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetObject(System.String,System.String,System.String)">
      <summary>
            Returns the first row in the first column for the specified query.
            </summary>
      <param name="select">The sql select statemement</param>
      <param name="serverName">The server name</param>
      <param name="databaseName">The database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.GetObject(System.String,System.String)">
      <summary>
            Returns the first row in the first column for the specified query.
            </summary>
      <param name="select">The sql select statemement</param>
      <param name="connectionString">The connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.ExecNonQuery(System.String)">
      <summary>
            Executes a non-select query (update, delete, etc.) and returns the result
            </summary>
      <param name="sql">The non-select query to execute</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.ExecNonQuery(System.String,System.String,System.String)">
      <summary>
            Executes a non-select query (update, delete, etc.) and returns the result
            </summary>
      <param name="sql">The non-select query to execute</param>
      <param name="serverName">The server name</param>
      <param name="databaseName">The database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.ExecNonQuery(System.String,System.String)">
      <summary>
            Executes a non-select query (update, delete, etc.) and returns the result
            </summary>
      <param name="sql">The non-select query to execute</param>
      <param name="connectionString">The connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.ExecReader(System.String,MAT.Server.ReaderDelegate,System.Type)">
      <summary>
            Executes a sql query and returns a DataReader object
            </summary>
      <param name="select">The select statement</param>
      <param name="rowProcessingMethod">The method name which proceses one row of data at a time</param>
      <param name="objectType">The type of object being serialized</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.ExecReader(System.String,MAT.Server.ReaderDelegate,System.Type,System.String,System.String)">
      <summary>
            Executes a sql query and returns a DataReader object
            </summary>
      <param name="select">The select statement</param>
      <param name="rowProcessingMethod">The method name which proceses one row of data at a time</param>
      <param name="objectType">The type of object being serialized</param>
      <param name="serverName">The server name</param>
      <param name="databaseName">The database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.ExecReader(System.String,MAT.Server.ReaderDelegate,System.Type,System.String)">
      <summary>
            Executes a sql query and returns an array of the specified type, by using a DataReader and calling the rowProcessingMethod supplied to translate each datarow to an item in the array.
            </summary>
      <param name="select">The select statement</param>
      <param name="rowProcessingMethod">The method name which proceses one row of data at a time</param>
      <param name="objectType">The type of object being serialized</param>
      <param name="connectionString">The connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelper.ExecDataSet(System.String,System.String)">
      <summary>
            Executes a sql query and returns a DataSet
            </summary>
      <param name="sql">The select statement</param>
      <param name="connectionString">The connection string</param>
      <returns>DataSet: Contains the output of the select query</returns>
    </member>
    <member name="P:MAT.Server.SqlHelper.Jobs">
      <summary>
            Gets the sql job list.
            </summary>
    </member>
    <member name="P:MAT.Server.SqlHelper.GlobalCommandTimeoutSeconds">
      <summary>
            Global setting for the timeout for command execution (in seconds). All uses of this class in the same assembly will share this value
            </summary>
    </member>
    <member name="T:MAT.Verify.Record">
      <summary>
            Allows the user to record actions for a test.
            </summary>
    </member>
    <member name="M:MAT.Verify.Record.Exception(MAT.Verify.AssertEx.ThrowsDelegate)">
      <summary>
            Records any exception which is thrown by the given code.
            </summary>
      <param name="code">The code which may thrown an exception.</param>
      <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
    </member>
    <member name="M:MAT.Verify.Record.Exception(MAT.Verify.AssertEx.ThrowsDelegateWithReturn)">
      <summary>
            Records any exception which is thrown by the given code that has
            a return value. Generally used for testing property assessors.
            </summary>
      <param name="code">The code which may thrown an exception.</param>
      <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
    </member>
    <member name="T:MAT.DataCompare.Core.SchemaObjectCollection">
      <summary>
            List of schema comparision object
            </summary>
    </member>
    <member name="T:MAT.Data.RandomData">
      <summary>
            Random Data Generator
            Simplifies the creation of random test data
            Contact: FBurian
            </summary>
    </member>
    <member name="M:MAT.Data.RandomData.#ctor(System.Int32)">
      <summary>
            Constructor is inaccessible from outside the class
            </summary>
    </member>
    <member name="M:MAT.Data.RandomData.GetInstance">
      <summary>
            Creates a new instance of the RandomData class with a random seed
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.GetInstance(System.Int32)">
      <summary>
            Creates a new instance of the RandomData class
            </summary>
      <param name="seed">The seed to be used to generate random data with</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.Int">
      <summary>
            Create a random Integer value.
            The range includes Int32.MinValue, but does not include Int32.MaxValue
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.PositiveInt">
      <summary>
            Create a random Positive Integer value
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.PositiveInt(System.Int32)">
      <summary>
            Create a random Positive Integer value less than the number passed in
            </summary>
      <param name="exclusiveMaximum">The max value (which will not itself be included)</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.Int(System.Int32,System.Int32)">
      <summary>
            Create a random Integer value greater or equal to the minimum and less than the maximum
            </summary>
      <param name="inclusiveMinimum">The inclusive lower bound</param>
      <param name="exclusiveMaximum">The max value (which will not itself be included)</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.Date">
      <summary>
            Returns a random date between DateTime.MinValue and DateTime.MaxValue
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.Date(System.TimeSpan)">
      <summary>
            Returns a random date within the specified range. For example, if range is 1 day, the date returned is Now +/- 1 day.
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.Date(System.DateTime,System.DateTime)">
      <summary>
            Returns a random date between the startDate and endDate
            </summary>
      <param name="startDate">The beginning of the period</param>
      <param name="endDate">The end of the period</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.Date(System.String,System.String)">
      <summary>
            Returns a random date between the startDate and endDate
            </summary>
      <param name="startDate">The beginning of the period</param>
      <param name="endDate">The end of the period</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.FullDateString(System.DateTime)">
      <summary>
            Returns the full date string, including 4ms precision
            </summary>
      <param name="dt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.Bool">
      <summary>
            Returns random value of true or false
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.RandomData.ArrayItem(System.Array)">
      <summary>
            Returns a random item from the array passed in. 
            The item must then be cast to the correct type.
            </summary>
    </member>
    <member name="M:MAT.Data.RandomData.Long">
      <summary>
            Returns a random long
            </summary>
    </member>
    <member name="M:MAT.Data.RandomData.EnumItem(System.Type)">
      <summary>
            Returns a random item from an enumeration. The item must then be cast to the correct type.
            </summary>
      <param name="enumType">The type of the enum. Use the typeof([EnumName]) operator</param>
      <returns>Returns a random item.</returns>
    </member>
    <member name="P:MAT.Data.RandomData.String">
      <summary>
            Random string
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.StoredProcedureSchemaCompare.#ctor(MAT.DataCompare.Core.StoredProcedure,MAT.DataCompare.Core.StoredProcedure)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.StoredProcedureSchemaCompare" /> class.
            </summary>
      <param name="sourceSp">The source sp.</param>
      <param name="destSp">The dest sp.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.StoredProcedureSchemaCompare.#ctor(MAT.DataCompare.Core.StoredProcedure,MAT.DataCompare.Core.StoredProcedure,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.StoredProcedureSchemaCompare" /> class.
            </summary>
      <param name="sourceSp">The source sp.</param>
      <param name="destSp">The dest sp.</param>
      <param name="excludeColumnList">The exclude column list.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.StoredProcedureSchemaCompare.Compare">
      <summary>
            Compares this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataCompare.Core.StoredProcedureSchemaCompare.ParameterComparisionResults">
      <summary>
            Gets the parameter comparision results.
            </summary>
      <value>The parameter comparision results.</value>
    </member>
    <member name="T:MAT.Verify.IsAssignableFromException">
      <summary>
            Exception thrown when the value is unexpectedly not of the given type or a derived type.
            </summary>
    </member>
    <member name="M:MAT.Verify.IsAssignableFromException.#ctor(System.Type,System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.IsTypeException" /> class.
            </summary>
      <param name="expected">The expected type</param>
      <param name="actual">The actual object value</param>
    </member>
    <member name="T:MAT.Verify.EmptyException">
      <summary>
            Exception thrown when a collection is unexpectedly not empty.
            </summary>
    </member>
    <member name="M:MAT.Verify.EmptyException.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.EmptyException" /> class.
            </summary>
    </member>
    <member name="T:MAT.ZipArchive">
      <summary>
            ZipArchive represents a Zip Archive.  It uses the System.IO.File structure as its guide 
            
            The largest structual difference between a ZipArchive and the textStream system is that the archive has no
            independent notion of a 'directory'.  Instead files know their complete path name.  For the most
            part this difference is hard to notice, but does have some ramifications.  For example there is no
            concept of the modification time for a directory.    
            
            TODO: Opening a textStream for Read/Write without truncation. 
            TODO: Allowing different text encodings (is it worth it since they could do it themselves. 
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.#ctor(System.String)">
      <summary>
            Openes an existing ZIP archive 'archivePath' for reading.  
            </summary>
      <param name="archivePath">
      </param>
    </member>
    <member name="M:MAT.ZipArchive.#ctor(System.String,System.IO.FileAccess)">
      <summary>
            Opens a ZIP archive, 'archivePath'  If 'access' is ReadWrite or Write then the target 
            does not need to exist, but will be created with the ZipArchive is closed.  
            
            If 'access' is ReadWrite the target can exist, and that data is used to initially
            populate the archive.  Any modifications that were made will be updated when the
            Close() method is called (and not before).  
            
            If 'access' is Write then the target is either created or truncated to 0 before 
            the archive is written (thus the original data in the archiveFile is ignored).  
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.#ctor(System.IO.Stream,System.IO.FileAccess)">
      <summary>
            Read an archive from an exiting stream or write a new archive into a stream
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.GetFilesInDirectory(System.String,System.IO.SearchOption)">
      <summary>
            Returns a subset of the files in the archive that are in the directory 'archivePath'.  If
            searchOptions is TopDirectoryOnly only files in the directory 'archivePath' are returns. 
            If searchOptions is AllDirectories then all files that are in subdiretories are also returned. 
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.OpenRead(System.String)">
      <summary>
            Open the archive textStream 'archivePath' for reading and returns the resulting Stream.
            KeyNotFoundException is thrown if 'archivePath' does not exist
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.Create(System.String)">
      <summary>
            Opens the archive textStream 'archivePath' for writing and returns the resulting Stream. If the textStream
            already exists, it is truncated to be an empty textStream.
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.Close">
      <summary>
            Closes the archive.  Until this call is made any pending modifications to the archive are NOT
            made (the archive is unchanged).  
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.Clear">
      <summary>
            Remove all files from the archive. 
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.Exists(System.String)">
      <summary>
            Returns true if 'archivePath' exists in the archive.  
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.ZipArchive.Move(System.String,System.String)">
      <summary>
             Renames sourceArchivePath to destinationArchivePath.  If destinationArchivePath exists it is
             discarded.  
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.Delete(System.String)">
      <summary>
            Delete 'archivePath'.  It returns true if successful.  If archivePath does not exist, it
            simply returns false (no exception is thrown).  The delete succeeds even if streams on the
            data exists (they continue to exist, but will not be persisted on Close()
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.CopyToFile(System.String,System.String)">
      <summary>
            Copies the archive textStream 'sourceArchivePath' to the textStream system textStream 'targetFilePath'. 
            It will overwrite existing files, however a locked targetFilePath will cause an exception.  
            </summary>
      <param name="sourceArchivePath">
      </param>
      <param name="targetFilePath">
      </param>
    </member>
    <member name="M:MAT.ZipArchive.CopyFromFile(System.String,System.String)">
      <summary>
            Copyies 'sourceFilePath from the textStream system to the archive as 'targetArchivePath'
            It will overwrite any existing textStream.
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.DeleteDirectory(System.String)">
      <summary>
            Deletes all files in the directory (and subdirectories) of 'archivePath'.  
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.CopyToDirectory(System.String,System.String)">
      <summary>
            Copies (recursively the files in archive directory to a textStream system directory.
            </summary>
      <param name="sourceArchiveDirectory">The name of the source directory in the archive</param>
      <param name="targetDirectory">The target directory in the textStream system to copy to. 
            If it is empty it represents all files in the archive. </param>
    </member>
    <member name="M:MAT.ZipArchive.CopyFromDirectory(System.String,System.String)">
      <summary>
            Copies a directory recursively from the textStream system to the archive.  
            </summary>
      <param name="sourceDirectory">The direcotry in the textStream system to copy to the archive</param>
      <param name="targetArchiveDirectory">
            The directory in the archive to copy to.  An empty string means the top level of the archive</param>
    </member>
    <member name="M:MAT.ZipArchive.OpenText(System.String)">
      <summary>
            Open an existing textStream in the archive for reading as text and returns the resulting StreamReader.  
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.CreateText(System.String)">
      <summary>
            Opens a textStream in the archive for writing as a text textStream.  Returns the resulting TextWriter.  
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.ReadAllText(System.String)">
      <summary>
            Reads all the data in 'archivePath' as a text string and returns it. 
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.WriteAllText(System.String,System.String)">
      <summary>
            Overwrites the archive textStream 'archivePath' with the text in 'data'
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.ToString">
      <summary>
            Returns a string reprentation of the archive (its name if known, and count of files)
            Mostly useful in the debugger.  
            </summary>
    </member>
    <member name="M:MAT.ZipArchive.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MAT.ZipArchive" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="P:MAT.ZipArchive.Files">
      <summary>
            Enumerate the files in the archive (directories don't have an independent existance).
            </summary>
    </member>
    <member name="P:MAT.ZipArchive.Item(System.String)">
      <summary>
            Fetch a archiveFile by name.  'archivePath' is the full path name of the archiveFile in the archive.  
            It returns null if the name does not exist (and e
            </summary>
    </member>
    <member name="P:MAT.ZipArchive.IsReadOnly">
      <summary>
            Returns true if the archive can not be written to (it was opend with FileAccess.Read). 
            </summary>
    </member>
    <member name="P:MAT.ZipArchive.Count">
      <summary>
            Count of total number of files (does not include directories) in the archive. 
            </summary>
    </member>
    <member name="T:MAT.ZipArchiveFile">
      <summary>
            ZipArchiveFile represents one archiveFile in the ZipArchive.   It is analogous to the System.IO.DiffFile
            object for normal files.  
            </summary>
    </member>
    <member name="M:MAT.ZipArchiveFile.Create">
      <summary>
            Truncates the archiveFile represented by the ZipArchiveFile to be empty and returns a Stream that can be used
            to write (binary) data into it.
            </summary>
      <returns>A Stream that can be written on. </returns>
    </member>
    <member name="M:MAT.ZipArchiveFile.OpenRead">
      <summary>
            Opens the archiveFile represented by the ZipArchiveFile and returns a stream that can use to read (binary) data.
            </summary>
      <returns>A Stream that can be read from.</returns>
    </member>
    <member name="M:MAT.ZipArchiveFile.MoveTo(System.String)">
      <summary>
            Truncates the archiveFile represented by the ZipArchiveFile to be empty and returns a TextWriter that text
            can be written to (using the default encoding). 
            </summary>
      <returns>The TextWriter that text can be written to. </returns>
    </member>
    <member name="M:MAT.ZipArchiveFile.Delete">
      <summary>
            Delete the archiveFile represented by the ZipArchiveFile.   The textStream can be in use without conflict.
            Deleting a textStream simply means it will not be persisted when ZipArchive.Close() is called.  
            </summary>
    </member>
    <member name="M:MAT.ZipArchiveFile.ToString">
      <summary>
             A text summary of the archive textStream (its name and length).  
            </summary>
    </member>
    <member name="M:MAT.ZipArchiveFile.CreateText">
      <summary>
            Truncate the archive textStream and return a StreamWrite sutable for writing text to the textStream. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.ZipArchiveFile.OpenText">
      <summary>
            Opens the archiveFile represented by the ZipArchiveFile and returns a stream that can use to read text.
            </summary>
      <returns>A TextReader text can be read from.</returns>
    </member>
    <member name="M:MAT.ZipArchiveFile.ReadAllText">
      <summary>
            Read all the text from the archiveFile represented by the ZipArchiveFile and return it as a string. 
            </summary>
      <returns>The string contained in the archiveFile</returns>
    </member>
    <member name="M:MAT.ZipArchiveFile.WriteAllText(System.String)">
      <summary>
            Replaces the data in the archiveFile represented by the ZipArchiveFile with the text in 'data'
            </summary>
      <param name="data">The data to replace the archiveFile data with.</param>
    </member>
    <member name="M:MAT.ZipArchiveFile.CopyToFile(System.String)">
      <summary>
            Copy the data in from the 'this' ZipArchiveFile to the archive textStream named 'outputFilePath' in
            to the file system at 'outputFilePath' 
            </summary>
    </member>
    <member name="M:MAT.ZipArchiveFile.CopyTo(System.String)">
      <summary>
            Copy the data in archive textStream named 'inputFilePath' into the 'this' archive textStream.  (discarding
            what was there before). 
            </summary>
    </member>
    <member name="M:MAT.ZipArchiveFile.WriteToStream(System.IO.Stream)">
      <summary>
            Used by ZipArchive to write the entry to the archive. 
            </summary>
      <param name="writer">The stream representing the archive to write the entry to.</param>
    </member>
    <member name="M:MAT.ZipArchiveFile.#ctor(MAT.ZipArchive,System.String)">
      <summary>
            Create a new archive archiveFile with no data (empty).  It is expected that only ZipArchive methods will
            use this routine.  
            </summary>
    </member>
    <member name="M:MAT.ZipArchiveFile.Read(MAT.ZipArchive)">
      <summary>
            Reads a single archiveFile from a Zip Archive.  Should only be used by ZipArchive.  
            </summary>
      <returns>A ZipArchiveFile representing the archiveFile read from the archive.</returns>
    </member>
    <member name="P:MAT.ZipArchiveFile.LastWriteTime">
      <summary>
            The last time the archive was updated (Create() was called).   The copy operations transfer the
            LastWriteTime from the source to the target.  
            </summary>
    </member>
    <member name="P:MAT.ZipArchiveFile.Length">
      <summary>
            The length of the archive textStream in bytes. 
            </summary>
    </member>
    <member name="P:MAT.ZipArchiveFile.Name">
      <summary>
            The name in the archive. 
            </summary>
    </member>
    <member name="P:MAT.ZipArchiveFile.Checksum">
      <summary>
            The CRC32 checksum associated with the data.  Useful for quickly determining if the data has
            changed.  
            </summary>
    </member>
    <member name="P:MAT.ZipArchiveFile.Archive">
      <summary>
            The archive assoated with the ZipArchiveFile. 
            </summary>
    </member>
    <member name="P:MAT.ZipArchiveFile.IsReadOnly">
      <summary>
            Returns true if the textStream can's be written (the archive is read-only.  
            </summary>
    </member>
    <member name="P:MAT.ZipArchiveFile.DataAsText">
      <summary>
            Gets the data as text. Helpful for debugging since VS displays properties by default. 
            </summary>
      <value>The data as text.</value>
    </member>
    <member name="T:MAT.RepairedMemoryStream">
      <summary>
            Arrg.  Memorystream does not let you look at the length after it has been closed (why not!)
            This is very frustrating as you need this to get the bytes that were written.  Luckily I
            can fix this with overriding.  
            </summary>
    </member>
    <member name="T:MAT.Server.MdxReaderDelegate">
      <summary>
            Delegate for ExecReader methods. The method passed as this delegate is used to process a single row of data and return an object.
            </summary>
      <param name="reader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.Server.MdxHelper">
      <summary>
            Provides helper methods for executing mdx statements on Microsoft Analysis Server
            </summary>
    </member>
    <member name="M:MAT.Server.MdxHelper.GetInstance(System.String)">
      <summary>
            Gets an instance of the SqlHelper class
            </summary>
      <param name="connectionString">A valid connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.GetInstance(System.String,System.String)">
      <summary>
            Gets an instance of the SqlHelper class
            </summary>
      <param name="serverName">The name of the server where the database resides</param>
      <param name="catalog">The name of the database</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.CreateConnectionString(System.String,System.String)">
      <summary>
            Creates the connection string.
            </summary>
      <param name="serverName">Name of the server.</param>
      <param name="catalog">The catalog.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.NewCommandObject(System.String,Microsoft.AnalysisServices.AdomdClient.AdomdConnection)">
      <summary>
            Creates a Command object with globally set property values. The caller is responsible for disposing
            </summary>
      <param name="cmdText">The command text to execute</param>
      <param name="connection">An open connection</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.GetXmlDocument(System.String)">
      <summary>
            Returns XML document for the specified query.
            </summary>
      <param name="selectStatement">The MDX selectStatement statemement</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.GetXmlDocument(System.String,System.String,System.String)">
      <summary>
            Returns XML document for the specified query.
            </summary>
      <param name="selectStatement">The MDX selectStatement statemement</param>
      <param name="serverName">The server name</param>
      <param name="databaseName">The database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.GetXmlDocument(System.String,System.String)">
      <summary>
            Returns XML document for the specified query.
            </summary>
      <param name="selectStatement">The MDX selectStatement statemement</param>
      <param name="connectionString">The connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.GetObject(System.String)">
      <summary>
            Returns the first row in the first column for the specified query.
            </summary>
      <param name="selectStatement">The MDX statemement</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.GetObject(System.String,System.String,System.String)">
      <summary>
            Returns the first row in the first column for the specified query.
            </summary>
      <param name="selectStatement">The mdx selectStatement statemement</param>
      <param name="serverName">The server name</param>
      <param name="databaseName">The database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.GetObject(System.String,System.String)">
      <summary>
            Returns the first row in the first column for the specified query.
            </summary>
      <param name="selectStatement">The mdx selectStatement statemement</param>
      <param name="connectionString">The connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.ExecNonQuery(System.String)">
      <summary>
            Executes a query and returns the result
            </summary>
      <param name="mdxString">The non-selectStatement query to execute</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.ExecNonQuery(System.String,System.String,System.String)">
      <summary>
            Executes a non-selectStatement query (update, delete, etc.) and returns the result
            </summary>
      <param name="mdxString">The non-selectStatement query to execute</param>
      <param name="serverName">The server name</param>
      <param name="databaseName">The database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.ExecNonQuery(System.String,System.String)">
      <summary>
            Executes a non-selectStatement query (update, delete, etc.) and returns the result
            </summary>
      <param name="mdxString">The non-selectStatement query to execute</param>
      <param name="connectionString">The connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.ExecReader(System.String,MAT.Server.MdxReaderDelegate,System.Type)">
      <summary>
            Executes a MDX query and returns a DataReader object
            </summary>
      <param name="select">The select statement</param>
      <param name="rowProcessingMethod">The method name which proceses one row of data at a time</param>
      <param name="objectType">The type of object being serialized</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.ExecReader(System.String,MAT.Server.MdxReaderDelegate,System.Type,System.String,System.String)">
      <summary>
            Executes a MDX query and returns a DataReader object
            </summary>
      <param name="select">The select statement</param>
      <param name="rowProcessingMethod">The method name which proceses one row of data at a time</param>
      <param name="objectType">The type of object being serialized</param>
      <param name="serverName">The server name</param>
      <param name="databaseName">The database name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.ExecReader(System.String,MAT.Server.MdxReaderDelegate,System.Type,System.String)">
      <summary>
            Executes a MDX query and returns an array of the specified type, by using a DataReader and calling the rowProcessingMethod supplied to translate each datarow to an item in the array.
            </summary>
      <param name="select">The select statement</param>
      <param name="rowProcessingMethod">The method name which proceses one row of data at a time</param>
      <param name="objectType">The type of object being serialized</param>
      <param name="connectionString">The connection string</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.ExecuteDisconnectCellSet(System.String,System.String)">
      <summary>
            Executes the disconnect cell set.
            </summary>
      <param name="select">The select.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.MdxHelper.ExecDataSet(System.String,System.String)">
      <summary>
            Executes a MDX query and returns a DataSet
            </summary>
      <param name="mdxString">The selectStatement statement</param>
      <param name="connectionString">The connection string</param>
      <returns>DataSet: Contains the output of the selectStatement query</returns>
    </member>
    <member name="P:MAT.Server.MdxHelper.GlobalCommandTimeoutSeconds">
      <summary>
            Global setting for the timeout for command execution (in seconds). All uses of this class in the same assembly will share this value
            </summary>
    </member>
    <member name="T:MAT.Server.FileSharingService">
      <summary>
            Has methods to create, delete and find file shares
            </summary>
    </member>
    <member name="M:MAT.Server.FileSharingService.#ctor(System.String)">
      <summary>
            Initializes a FileSharingService based on a machineName
            </summary>
      <param name="machineName">Name of the machine on which sharing files</param>
    </member>
    <member name="M:MAT.Server.FileSharingService.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes FileSharingService based on a machineName and 
            connects to the machine with specified user name and password
            </summary>
      <param name="machineName">Name of the machine on which sharing Files</param>
      <param name="userName">The user name to use when authenticating the client</param>
      <param name="password">The password to use when authenticating the client</param>
    </member>
    <member name="M:MAT.Server.FileSharingService.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)">
      <summary>
            Initializes FileSharingService based on a machineName and 
            connects to the machine with specified user name and password.
            You can specify an authentication type as well.
            </summary>
      <param name="machineName">Name of the machine on which sharing Files</param>
      <param name="userName">The user name to use when authenticating the client</param>
      <param name="password">The password to use when authenticating the client</param>
      <param name="authenticationType">One of the AuthenticationTypes values</param>
    </member>
    <member name="M:MAT.Server.FileSharingService.ShareExists(System.String)">
      <summary>
            Returns a value that indicates if the specified share exists
            or not
            </summary>
      <param name="shareName">Name of the share</param>
      <returns>true if share exists; otherwise false</returns>
    </member>
    <member name="M:MAT.Server.FileSharingService.FindShare(System.String)">
      <summary>
            Finds the specified share and returns a corresponding 
            DirectoryEntry object. Returns null if it doesn't exist.
            </summary>
      <param name="shareName">Name of the share</param>
      <returns>A DirectoryEntry object corresponding to the share</returns>
    </member>
    <member name="M:MAT.Server.FileSharingService.CreateShare(System.String,System.String,System.Boolean)">
      <summary>
            Creates a file share with the specified name
            and path. deleteIfExists indicates whether to 
            delete the share if it exists or not
            </summary>
      <param name="shareName">Name of the share</param>
      <param name="path">Path to the share</param>
      <param name="deleteIfExists">Indicates whether to delete
            existing share or not</param>
    </member>
    <member name="M:MAT.Server.FileSharingService.DeleteShare(System.String)">
      <summary>
            Deletes the specified share
            </summary>
      <param name="shareName">Name of the share</param>
    </member>
    <member name="M:MAT.Server.FileSharingService.Dispose">
      <summary>
            Implements Dispose method
            </summary>
    </member>
    <member name="M:MAT.Server.FileSharingService.Finalize">
      <summary>
            Finalize method
            </summary>
    </member>
    <member name="M:MAT.Server.FileSharingService.Dispose(System.Boolean)">
      <summary>
            The bulk of the clean-up code is implemented in Dispose(bool)
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="T:MAT.Server.FileSharingServiceException">
      <summary>
            Used by FileSharingService to throw an exception
            </summary>
    </member>
    <member name="M:MAT.Server.FileSharingServiceException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.FileSharingServiceException" /> class.
            </summary>
    </member>
    <member name="M:MAT.Server.FileSharingServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.FileSharingServiceException" /> class.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:MAT.Server.FileSharingServiceException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.FileSharingServiceException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:MAT.Server.FileSharingServiceException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.FileSharingServiceException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="T:MAT.NativeMethods">
      <summary>
            Native method calls and wrappers
            </summary>
    </member>
    <member name="T:MAT.NativeMethods.WindowInfo">
      <summary>
            Struct for WindowInfo returned by <c>GetDesktopWindowsCaptions</c>.
            </summary>
    </member>
    <member name="P:MAT.NativeMethods.WindowInfo.Caption">
      <summary>
            Window Caption
            </summary>
    </member>
    <member name="P:MAT.NativeMethods.WindowInfo.ClassName">
      <summary>
            Window Class Name
            </summary>
    </member>
    <member name="P:MAT.NativeMethods.WindowInfo.Handle">
      <summary>
            Window Handle
            </summary>
    </member>
    <member name="F:MAT.NativeMethods.WindowClassTypes">
      <summary>
            List of window classes that 
            </summary>
    </member>
    <member name="M:MAT.NativeMethods.ScrollToBottom(System.IntPtr)">
      <summary>
            Scrolls to bottom.
            </summary>
      <param name="hWnd">Window Handle to scroll on</param>
    </member>
    <member name="M:MAT.NativeMethods.Wait">
      <summary>
            Sleeps for x amount of time in ms.  If app is a WinForm app also calls Application.DoEvents().  Default wait time 100ms.
            </summary>
    </member>
    <member name="M:MAT.NativeMethods.Wait(System.Int32)">
      <summary>
            Sleeps for x amount of time in ms.  If app is a WinForm app also calls Application.DoEvents().  Default wait time 100ms.
            </summary>
      <param name="waitTime">Time to wait in ms.</param>
    </member>
    <member name="M:MAT.NativeMethods.Wait(System.TimeSpan)">
      <summary>
            Sleeps for x amount of time in ms.  If app is a WinForm app also calls Application.DoEvents().  Default wait time 100ms.
            </summary>
      <param name="waitTime">The time span to wait.</param>
    </member>
    <member name="M:MAT.NativeMethods.GetCaptionText(System.IntPtr)">
      <summary>
            Get caption of window
            </summary>
      <param name="hWnd">Window Handle</param>
    </member>
    <member name="M:MAT.NativeMethods.GetMessages(System.IntPtr)">
      <summary>
            Combined text from all static items on the dialog
            </summary>
      <param name="p">Window Handle</param>
      <returns>All text in handle</returns>
    </member>
    <member name="M:MAT.NativeMethods.ClickWindowDialogButton(System.IntPtr,System.String)">
      <summary>
            Click on a button contained for the Window Handle
            </summary>
      <param name="dialoghWnd">Window Handle</param>
      <param name="buttonCaption">Text of button</param>
      <returns>true if button found</returns>
    </member>
    <member name="M:MAT.NativeMethods.IsWindowEnabled(System.IntPtr)">
      <summary>
            Determines if the style on a particular window is WS_ENABLED.
            </summary>
    </member>
    <member name="M:MAT.NativeMethods.IsWindowVisible(System.IntPtr)">
      <summary>
            Determines if the style on a particular window is WS_VISIBLE.
            </summary>
    </member>
    <member name="M:MAT.NativeMethods.GetText(System.IntPtr)">
      <summary>
            Get text for a given window handle
            </summary>
      <param name="dialoghWnd">Window handle</param>
      <returns>Text</returns>
    </member>
    <member name="M:MAT.NativeMethods.SetText(System.IntPtr,System.String)">
      <summary>
            Set text for a given window handle
            </summary>
      <param name="dialoghWnd">Window Handle</param>
      <param name="text">Text</param>
    </member>
    <member name="M:MAT.NativeMethods.GetWindowText(System.IntPtr)">
      <summary>
            Returns the caption of a windows by given hWnd identifier.
            </summary>
      <param name="hWnd">Window Handle</param>
    </member>
    <member name="M:MAT.NativeMethods.SetFocus(System.IntPtr)">
      <summary>
            Set focus on Window Handle
            </summary>
      <param name="hWnd">Window Handle</param>
    </member>
    <member name="M:MAT.NativeMethods.SetForegroundWindow(System.IntPtr)">
      <summary>
            Set window to the foreground
            </summary>
      <param name="hWnd">Window handle</param>
      <returns>true if successful</returns>
    </member>
    <member name="M:MAT.NativeMethods.SetActiveWindow(System.IntPtr)">
      <summary>
            Sets the active window.
            </summary>
      <param name="hWnd">The hWND.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.NativeMethods.GetWindowClass(System.IntPtr)">
      <summary>
            Return Window Class given a handle
            </summary>
      <param name="hWnd">Window Handle</param>
      <returns>Window Class</returns>
    </member>
    <member name="M:MAT.NativeMethods.GetDesktopWindowsCaptions">
      <summary>
            Returns the caption of all desktop windows.
            </summary>
    </member>
    <member name="M:MAT.NativeMethods.FindWindowExA(System.IntPtr,System.IntPtr,System.String,System.String)">
      <summary>
            Find handle of a window
            </summary>
      <param name="hWnd1">handle to the parent window to search the child windows of.</param>
      <param name="hWnd2">handle to the child window specifying a place to begin searching. Usually 0.</param>
      <param name="lpsz1">class name </param>
      <param name="lpsz2">window name</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.NativeMethods.PostMessageA(System.IntPtr,System.Int32,System.Int32,System.Int32)">
      <summary>
            Post Message
            </summary>
      <param name="hWnd">handle to destination window </param>
      <param name="wMsg">message</param>
      <param name="wParam">first message parameter </param>
      <param name="lParam">second message parameter </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
            Send Message
            </summary>
      <param name="hWnd">handle to destination window</param>
      <param name="Msg">message</param>
      <param name="wParam">first message parameter </param>
      <param name="lParam">second message parameter </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.UIntPtr,System.UIntPtr)">
      <summary>
            Sends the message.
            </summary>
      <param name="hWnd">handle to destination window </param>
      <param name="Msg">message</param>
      <param name="wParam">first message parameter </param>
      <param name="lParam">second message parameter</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.NativeMethods.SendMessageTimeout(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
            Sends the message timeout.
            </summary>
      <param name="hWnd">handle to destination window</param>
      <param name="wMsg">The w MSG.</param>
      <param name="wParam">first message parameter</param>
      <param name="lParam">second message parameter</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.NativeMethods.SendMessageTimeout(System.IntPtr,System.UInt32,System.UIntPtr,System.UIntPtr)">
      <summary>
            Sends the message timeout.
            </summary>
      <param name="hWnd">handle to destination window</param>
      <param name="wMsg">The w MSG.</param>
      <param name="wParam">first message parameter</param>
      <param name="lParam">second message parameter</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.NativeMethods.SendMessageTimeout(System.IntPtr,System.UInt32,System.IntPtr,System.Text.StringBuilder)">
      <summary>
            Sends the message timeout.
            </summary>
      <param name="hWnd">handle to destination window</param>
      <param name="wMsg">The w MSG.</param>
      <param name="wParam">first message parameter</param>
      <param name="lParam">second message parameter</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.NativeMethods.GetWindowChild(System.IntPtr)">
      <summary>
            Find the first child of the window
            </summary>
      <param name="hWnd">Window to search for</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.NativeMethods.MouseClickRight(System.IntPtr,System.Int32,System.Int32)">
      <summary>
            Click right mouse button on Window Handle.
            </summary>
      <param name="hWnd">Window Handle</param>
      <param name="left">Left</param>
      <param name="top">Top</param>
    </member>
    <member name="M:MAT.NativeMethods.MouseClickLeft(System.IntPtr,System.Int32,System.Int32)">
      <summary>
            Click left mouse button on Window Handle.
            </summary>
      <param name="hWnd">Window Handle</param>
      <param name="left">Left</param>
      <param name="top">Top</param>
    </member>
    <member name="M:MAT.NativeMethods.SetDllDirectory(System.String)">
      <summary>
                The <b>SetDllDirectory</b> function modifies the search path used to locate DLLs
                for the application.
            </summary>
      <param name="pathName">
                Pointer to a null-terminated string that specifies the directory to be added.
                If this parameter is NULL, the default search path is used.
            </param>
      <returns>
        <para>
                    If the function succeeds, the return value is true.
                </para>
        <para>
                    If the function fails, the return value is false.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
      </returns>
      <remarks>
        <para>
                    The <b>SetDllDirectory</b> function affects all subsequent calls to the
                    <see cref="M:MAT.NativeMethods.LoadLibrary(System.String)" /> and <b>LoadLibraryEx</b> functions.  After calling
                    <b>SetDllDirectory</b>, the DLL search path is:
                </para>
        <para>
          <list type="number">
            <item>
              <description>
                                The directory from which the application loaded.
                            </description>
            </item>
            <item>
              <description>
                                The directory specified by the <i>pathName</i> parameter.
                            </description>
            </item>
            <item>
              <description>
                                The system directory.  Use the GetSystemDirectory
                                function to get the path of this directory.  The name of this
                                directory is System32.
                            </description>
            </item>
            <item>
              <description>
                                The 16-bit system directory.  There is no function that obtains
                                the path of this directory, but it is searched.  The name of this
                                directory is System.
                            </description>
            </item>
            <item>
              <description>
                                The Windows directory.  Use the GetWindowsDirectory
                                function to get the path of this directory.
                            </description>
            </item>
            <item>
              <description>
                                The directories that are listed in the PATH environment variable.
                            </description>
            </item>
          </list>
        </para>
        <para>
                    To revert to the default search path used by <see cref="M:MAT.NativeMethods.LoadLibrary(System.String)" /> and
                    <b>LoadLibraryEx</b>, call <b>SetDllDirectory</b> with NULL.
                </para>
      </remarks>
      <seealso cref="M:MAT.NativeMethods.GetDllDirectory(System.Int32,System.Text.StringBuilder)" />
      <seealso cref="M:MAT.NativeMethods.LoadLibrary(System.String)" />
    </member>
    <member name="M:MAT.NativeMethods.GetDllDirectory(System.Int32,System.Text.StringBuilder)">
      <summary>
                The <b>GetDllDirectory</b> function retrieves the application-specific portion of
                the search path used to locate DLLs for the application.
            </summary>
      <param name="bufferLength">
                Size of the output buffer, in characters.
            </param>
      <param name="buffer">
                Pointer to a buffer that receives the application-specific portion of the search path.
            </param>
      <returns>
        <para>
                    If the function succeeds, the return value is the length of the string copied
                    to <i>buffer</i>, in characters, not including the terminating null character.
                    If the return value is greater than <i>bufferLength</i>, it specifies the size
                    of the buffer required for the path.
                </para>
        <para>
                    If the function fails, the return value is zero.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
      </returns>
      <seealso cref="M:MAT.NativeMethods.SetDllDirectory(System.String)" />
    </member>
    <member name="T:MAT.BuildTasks.Remote">
      <summary>
            Build task for remote execution.
            </summary>
      <example>
        <code>
              &lt;UsingTask TaskName="MAT.BuildTasks.Remote" AssemblyFile="MAT.Core.dll" /&gt;
                &lt;Remote Executable="$(exe)" &lt;!-- Required --&gt; 
                                RemoteMachine="$(machine)" &lt;!-- Required --&gt;
                                Arguments="$(args)" 
                                UserName="$(user)" &lt;!-- If set and Password not set OWB lookup will occur. --&gt;
                                Password="$(pass)" 
                                UseSystemAccount="false" 
                                UseRE="false"
                                AdditionFiles="file1;file2"&gt; 
                &lt;Output TaskParameter="Results" PropertyName="ExecutionResults"/&gt;
                &lt;/Remote&gt;
            </code>
      </example>
    </member>
    <member name="M:MAT.BuildTasks.Remote.#ctor">
      <summary>
            Build task for remote execution.
            </summary>
    </member>
    <member name="M:MAT.BuildTasks.Remote.Execute">
      <summary>
            Starts the remote execution
            </summary>
      <returns>true is passed; otherwise false.</returns>
    </member>
    <member name="P:MAT.BuildTasks.Remote.RemoteMachine">
      <summary>
            Machine name or IP address to run the command on.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.Remote.Executable">
      <summary>
            Command to run.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.Remote.Arguments">
      <summary>
            Arguments
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.Remote.CopyExecutable">
      <summary>
            Copy Executable locally before running it.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.Remote.AdditionFiles">
      <summary>
            Additional files (semicolon separated) to be copied with the executable (pdb, config, reference assemblies, etc...)
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.Remote.Password">
      <summary>
            Password.  
            </summary>
      <remarks>
            If UserName is set and Password is not then the password will be attempted
            to be retrieved from OWB.
            </remarks>
    </member>
    <member name="P:MAT.BuildTasks.Remote.UserName">
      <summary>
            User Name
            </summary>
      <remarks>
            If UserName is set and Password is not then the password will be attempted
            to be retrieved from OWB.
            </remarks>
    </member>
    <member name="P:MAT.BuildTasks.Remote.UseSystemAccount">
      <summary>
            Sets whether to use the system account.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.Remote.UseRE">
      <summary>
            If selected RE will be forced to run first, otherwise PsExec will run first.
            If either one does not work the other will be tried.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.Remote.Results">
      <summary>
            Results of the execution.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.Remote.OperationsWorkbenchIntermediaryServer">
      <summary>
            Should only be used if you have a compeling reason to change which service requests the password.
            Default is http://mscomtest.dns.microsoft.com/OperationsWorkbenchPasswordService/OperationsWorkbenchPasswordService.OperationsWorkbenchPasswordService.svc
            </summary>
    </member>
    <member name="T:MAT.Timeout">
      <summary>
            Functions to allow handling code until done or timed out.
            </summary>
      <example>
        <code>
                     TimeOut.Run(
                        () =&gt; { /* Code to run */ }, 
                        () =&gt; /* Code to determine if done */,
                        timeOutLength : new TimeSpan(0, 10, 0),
                        waitBetweenChecks: new TimeSpan(0,0,15)
                     );
            </code>
      </example>
    </member>
    <member name="M:MAT.Timeout.Run(System.Action,System.Func{System.Boolean})">
      <summary>
            Waits the until.
            </summary>
      <param name="codeToRun">The code to continually run with 15 sec. pauses between runs.</param>
      <param name="codeDoneCheck">Code to check if the function is complete.</param>
      <exception cref="T:MAT.TimeoutRunException">Thrown if an exception occurs in the Timeout.Run</exception>
      <returns>Returns a <c>MAT.TimeoutResult</c> which contains details about the execution.</returns>
      <example>
        <code>
                     TimeOut.Run(
                        () =&gt; { /* Code to run */ }, 
                        () =&gt; /* Code to determine if done */,
                     );
            </code>
      </example>
    </member>
    <member name="M:MAT.Timeout.Run(System.Func{System.Boolean})">
      <summary>
            Waits the until.
            </summary>
      <param name="codeDoneCheck">Code to check if the function is complete.</param>
      <exception cref="T:MAT.TimeoutRunException">Thrown if an exception occurs in the Timeout.Run</exception>
      <returns>Returns a <c>MAT.TimeoutResult</c> which contains details about the execution.</returns>
      <example>
        <code>
                     TimeOut.Run(
                        () =&gt; /* Code to determine if done */,
                     );
            </code>
      </example>
    </member>
    <member name="M:MAT.Timeout.Run(System.Func{System.Boolean},System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits the until.
            </summary>
      <param name="codeDoneCheck">Code to check if the function is complete.</param>
      <param name="timeOutLength">Length of time to wait until timing out. (Defaults to 10 minutes).</param>
      <param name="waitBetweenChecks">The wait between checks. (Defaults to 1 second).</param>
      <returns>Returns True if completed, False if timed out.</returns>
      <example>
        <code>
                     TimeOut.Run(
                        () =&gt; /* Code to determine if done */,
                        timeOutLength : new TimeSpan(0, 10, 0),
                        waitBetweenChecks: new TimeSpan(0,0,15)
                     );
            </code>
      </example>
    </member>
    <member name="M:MAT.Timeout.Run(System.Func{System.Boolean},System.TimeSpan)">
      <summary>
            Waits the until.
            </summary>
      <param name="codeDoneCheck">Code to check if the function is complete.</param>
      <param name="timeOutLength">Length of time to wait until timing out. (Defaults to 10 minutes).</param>
      <exception cref="T:MAT.TimeoutRunException">Thrown if an exception occurs in the Timeout.Run</exception>
      <returns>Returns a <c>MAT.TimeoutResult</c> which contains details about the execution.</returns>
      <example>
        <code>
                     TimeOut.Run(
                        () =&gt; /* Code to determine if done */,
                        timeOutLength : new TimeSpan(0, 10, 0)
                     );
            </code>
      </example>
    </member>
    <member name="M:MAT.Timeout.Run(System.Action,System.Func{System.Boolean},System.TimeSpan)">
      <summary>
            Waits the until.
            </summary>
      <param name="codeToRun">The code to continually run with <paramref name="timeOutLength" /> pauses between runs.</param>
      <param name="codeDoneCheck">Code to check if the function is complete.</param>
      <param name="timeOutLength">Length of time to wait until timing out. (Defaults to 10 minutes).</param>
      <exception cref="T:MAT.TimeoutRunException">Thrown if an exception occurs in the Timeout.Run</exception>
      <returns>Returns a <c>MAT.TimeoutResult</c> which contains details about the execution.</returns>
      <example>
        <code>
                     TimeOut.Run(
                        () =&gt; { /* Code to run */ }, 
                        () =&gt; /* Code to determine if done */,
                        timeOutLength : new TimeSpan(0, 10, 0)
                     );
            </code>
      </example>
    </member>
    <member name="M:MAT.Timeout.Run(System.Action,System.Func{System.Boolean},System.TimeSpan,System.TimeSpan)">
      <summary>
            Waits the until.
            </summary>
      <param name="codeToRun">The code to continually run with <paramref name="waitBetweenChecks" /> pauses between runs.</param>
      <param name="codeDoneCheck">Code to check if the function is complete.</param>
      <param name="timeOutLength">Length of time to wait until timing out. (Defaults to 10 minutes).</param>
      <param name="waitBetweenChecks">The wait between checks. (Defaults to 1 second).</param>
      <exception cref="T:MAT.TimeoutRunException">Thrown if an exception occurs in the Timeout.Run</exception>
      <returns>Returns a <c>MAT.TimeoutResult</c> which contains details about the execution.</returns>
      <example>
        <code>
                     TimeOut.Run(
                        () =&gt; { /* Code to run */ }, 
                        () =&gt; /* Code to determine if done */,
                        timeOutLength : new TimeSpan(0, 10, 0),
                        waitBetweenChecks: new TimeSpan(0,0,15)
                     );
            </code>
      </example>
    </member>
    <member name="T:MAT.TimeoutRunException">
      <summary>
            Exception thrown if an exception appears in the Timeout.Run method.
            </summary>
    </member>
    <member name="M:MAT.TimeoutRunException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.TimeoutRunException" /> class.
            </summary>
    </member>
    <member name="M:MAT.TimeoutRunException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.TimeoutRunException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:MAT.TimeoutRunException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.TimeoutRunException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:MAT.TimeoutResult">
      <summary>
            Results of a timeout run
            </summary>
    </member>
    <member name="P:MAT.TimeoutResult.Duration">
      <summary>
            Gets or sets the duration.
            </summary>
      <value>The duration of the run.</value>
    </member>
    <member name="P:MAT.TimeoutResult.Status">
      <summary>
            Gets or sets the status.
            </summary>
      <value>The status of the run.</value>
    </member>
    <member name="P:MAT.TimeoutResult.Exception">
      <summary>
            Gets or sets the exception thrown is Status = ExceptionThrown.
            </summary>
      <value>The exception if thrown otherwise null.</value>
    </member>
    <member name="T:MAT.TimeoutStatus">
      <summary>
            Status of a Timeout run
            </summary>
    </member>
    <member name="F:MAT.TimeoutStatus.Completed">
      <summary>
            The run completed successfully with no errors or time outs
            </summary>
    </member>
    <member name="F:MAT.TimeoutStatus.TimedOut">
      <summary>
            Whether the run timed out
            </summary>
    </member>
    <member name="F:MAT.TimeoutStatus.ExceptionThrown">
      <summary>
            Whether an exception occurred during the run
            </summary>
    </member>
    <member name="T:MAT.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:MAT.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:MAT.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:MAT.FiddlerSessionItem">
      <summary>
            Fiddler Session Item (used with FiddlerSession)
            </summary>
      <see cref="T:MAT.FiddlerSession" />
      <seealso cref="T:MAT.Fiddler" />
    </member>
    <member name="P:MAT.FiddlerSessionItem.RequestData">
      <summary>
            Header data
            </summary>
    </member>
    <member name="P:MAT.FiddlerSessionItem.ResponseData">
      <summary>
            Session data
            </summary>
    </member>
    <member name="P:MAT.FiddlerSessionItem.MoreData">
      <summary>
            More data
            </summary>
    </member>
    <member name="P:MAT.FiddlerSessionItem.Result">
      <summary>
            Response Code (200, 304, 404, 500, etc...)
            </summary>
    </member>
    <member name="P:MAT.FiddlerSessionItem.Protocol">
      <summary>
            Protocol (HTTP, HTTPS, FTP, etc...)
            </summary>
    </member>
    <member name="P:MAT.FiddlerSessionItem.Host">
      <summary>
            Host (www.microsoft.com, www.windows.com, etc...)
            </summary>
    </member>
    <member name="P:MAT.FiddlerSessionItem.Url">
      <summary>
            AbsolutePath of the from the host ( /default.aspx, /vroot/default.htm) 
            </summary>
    </member>
    <member name="P:MAT.FiddlerSessionItem.BodySize">
      <summary>
            Size of the data sent or recieved
            </summary>
    </member>
    <member name="P:MAT.FiddlerSessionItem.Caching">
      <summary>
            Cache information
            </summary>
    </member>
    <member name="P:MAT.FiddlerSessionItem.ContentType">
      <summary>
            Content Type
            </summary>
    </member>
    <member name="T:MAT.FiddlerSession">
      <summary>
            List of Fiddler Session Items found in a dump.zip
            </summary>
      <see cref="T:MAT.FiddlerSessionItem" />
      <seealso cref="T:MAT.Fiddler" />
    </member>
    <member name="M:MAT.FiddlerSession.#ctor">
      <summary>
            List of Fiddler Session Items found in a dump.zip
            </summary>
    </member>
    <member name="M:MAT.FiddlerSession.#ctor(System.String)">
      <summary>
            List of Fiddler Session Items found in a dump.zip
            </summary>
      <param name="dumpFile">Dump File from Fiddler</param>
    </member>
    <member name="M:MAT.FiddlerSession.LoadData">
      <summary>
            Load/Reload a dumped Fiddler zip file
            </summary>
    </member>
    <member name="M:MAT.FiddlerSession.LoadData(System.String)">
      <summary>
            Load/Reload a dumped Fiddler zip file
            </summary>
      <param name="indexFile">file.zip</param>
    </member>
    <member name="P:MAT.FiddlerSession.DumpFile">
      <summary>
            Dump File from Fiddler
            </summary>
    </member>
    <member name="T:MAT.Fiddler">
      <summary>
            Wrapper for automating fiddler through the ExecAction.exe
            More information on ExecAction.exe can be found at http://www.fiddlertool.com/fiddler/help/quickexec.asp
            </summary>
    </member>
    <member name="M:MAT.Fiddler.#ctor">
      <summary>
            Wrapper for automating fiddler through the ExecAction.exe
            </summary>
    </member>
    <member name="M:MAT.Fiddler.#ctor(System.String)">
      <summary>
            Wrapper for automating fiddler through the ExecAction.exe
            </summary>
      <param name="fiddlerPath">Location fiddler.exe and ExecAction.exe will be found.</param>
      <exception cref="T:System.ComponentModel.Win32Exception">Fiddler not installed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Fiddler not installed.</exception>
    </member>
    <member name="M:MAT.Fiddler.Start">
      <summary>
            Run's fiddler if not already running.
            Hide's fiddler by default.
            </summary>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.Start(System.Boolean)">
      <summary>
            Run's fiddler if not already running.
            </summary>
      <param name="hideAfterStarting">Hide Fiddler in System Tray after starting</param>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.Hide">
      <summary>
            Hide Fiddler in the System Tray.  (Expects Fiddler to be running)
            </summary>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.Show">
      <summary>
            Restore Fiddler from the System Tray (Expects Fiddler to be running)
            </summary>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.KeepOnly(System.String)">
      <summary>
            Hide all sessions except those where Content-Type header contains the specified string. (Expects Fiddler to be running)
            </summary>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.Custom(System.String[])">
      <summary>
            Runs custom functions added to the CustomRules.js
            </summary>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.Quit">
      <summary>
            Close Fiddler.exe. (Expects Fiddler to be running)
            </summary>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.StartCapturing">
      <summary>
            Start capturing session data. (Expects Fiddler to be running)
            </summary>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.StopCapturing">
      <summary>
            Stop capturing session data. (Expects Fiddler to be running)
            </summary>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.Dump">
      <summary>
            Dumps the current recorded session data to the directory of the
            executing assembly in a file name timeDate.zip
            (Expects Fiddler to be running)
            </summary>
      <returns>Path to zip file</returns>
    </member>
    <member name="M:MAT.Fiddler.Dump(System.String)">
      <summary>
            Dumps the current recorded session data to the supplied path.
            (Expects Fiddler to be running)
            </summary>
      <param name="filePath">Path or Path and file name (ending with .zip) for dumped info to be located</param>
      <returns>Path to zip file</returns>
    </member>
    <member name="M:MAT.Fiddler.CurrentSession">
      <summary>
            Converts current Fiddler session into a object model. (Expects Fiddler to be running)
            </summary>
      <returns>FiddlerSession object</returns>
    </member>
    <member name="M:MAT.Fiddler.Clear">
      <summary>
            Clear all fiddler session data. (Expects Fiddler to be running)
            </summary>
      <returns>ExitCode (0 = success, 1 = incorrect arguments, 2 = Fiddler not running)</returns>
    </member>
    <member name="M:MAT.Fiddler.Dispose">
      <summary>
            Disposes the MAT.Fiddler object and closes Fiddler.exe
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.FunctionMapResult.schemaCompareFilters">
      <summary>
            Set default value = true
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.FunctionMapResult.AssertSchemaMatched">
      <summary>
            Asserts the schema matched.
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.FunctionMapResult.AssertSchemaMatchedWithOnlyFailedResults">
      <summary>
            Asserts the schema matched.
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.FunctionMapResult.SchemaCompareFilters">
      <summary>
            Gets or sets the schema compare filters.
            </summary>
      <value>The schema compare filters.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.FunctionMapResult.SchemaCompareResults">
      <summary>
            Gets or sets the schema compare results.
            </summary>
      <value>The schema compare results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.FunctionMapResult.PassedResults">
      <summary>
            Gets the passed results.
            </summary>
      <value>The passed results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.FunctionMapResult.FailedResults">
      <summary>
            Gets the failed results.
            </summary>
      <value>The failed results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.FunctionMapResult.SummaryMessage">
      <summary>
            Gets the summary message.
            </summary>
      <value>The summary message.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.FunctionMapResult.SummaryMessageOnlyMissmatchedResults">
      <summary>
            Gets the summary message.
            </summary>
      <value>The summary message.</value>
    </member>
    <member name="M:MAT.DataCompare.Core.Function.LoadParameterInfo">
      <summary>
            TODO : Sometimes function contains not only params but select tables 
            Add columns for this situation and store column properties
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.Function.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.Function.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:MAT.Verify.SingleException">
      <summary>
            Exception thrown when the collection did not contain exactly one element.
            </summary>
    </member>
    <member name="M:MAT.Verify.SingleException.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Verify.SingleException" /> class.
            </summary>
      <param name="count">The numbers of items in the collection.</param>
    </member>
    <member name="T:MAT.Verify.NotInRangeException">
      <summary>
            Exception thrown when a value is unexpectedly in the given range.
            </summary>
    </member>
    <member name="M:MAT.Verify.NotInRangeException.#ctor(System.Object,System.Object,System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.NotInRangeException" /> class.
            </summary>
      <param name="actual">The actual object value</param>
      <param name="low">The low value of the range</param>
      <param name="high">The high value of the range</param>
    </member>
    <member name="M:MAT.Verify.NotInRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:MAT.Verify.NotInRangeException.Actual">
      <summary>
            Gets the actual object value
            </summary>
    </member>
    <member name="P:MAT.Verify.NotInRangeException.High">
      <summary>
            Gets the high value of the range
            </summary>
    </member>
    <member name="P:MAT.Verify.NotInRangeException.Low">
      <summary>
            Gets the low value of the range
            </summary>
    </member>
    <member name="P:MAT.Verify.NotInRangeException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
    </member>
    <member name="T:MAT.Verify.IsNotTypeException">
      <summary>
            Exception thrown when the value is unexpectedly of the exact given type.
            </summary>
    </member>
    <member name="M:MAT.Verify.IsNotTypeException.#ctor(System.Type,System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.IsNotTypeException" /> class.
            </summary>
      <param name="expected">The expected type</param>
      <param name="actual">The actual object value</param>
    </member>
    <member name="T:MAT.Security.Credentials.ProtectedDataStore">
      <summary>
            Requests credential information from generic protected data store.
            </summary>
    </member>
    <member name="M:MAT.Security.Credentials.ProtectedDataStore.ParsePassword(System.String)">
      <summary>
            Applies a general purpose password extracion regular expression to the supplied asset text
            </summary>
      <param name="assetText">The text that contains the password that requires extraction</param>
      <returns>Plain-text password for the specified account, or null if it cannot be found</returns>
    </member>
    <member name="M:MAT.Security.Credentials.ProtectedDataStore.ParsePassword(System.String,System.String,System.String)">
      <summary>
            Applies a specified password extracion regular expression to the supplied asset text, uses passwordGroupName to locate the password in the Groups list
            </summary>
      <param name="assetText">The text that contains the password that requires extraction</param>
      <param name="regularExpression">The regular expression to perform the extraction</param>
      <param name="passwordCaptureName">The capture name that the password will be found in if the expression succeeds</param>
      <returns>Plain-text password for the specified account, or null if it cannot be found</returns>
    </member>
    <member name="M:MAT.Security.Credentials.ProtectedDataStore.GetAssetPasswordAsPlainText(System.String)">
      <summary>
            Requests the password for a domain\account combination, or other protected data, from the default protected data store
            </summary>
      <param name="protectedAssetKey">The domain\account combination, or other key specific to the data store, to look up</param>
      <returns>The password for the specific data store key combination in plain text.  Throws exceptions for any failure.</returns>
    </member>
    <member name="M:MAT.Security.Credentials.ProtectedDataStore.GetAssetPassword(System.String)">
      <summary>
            Requests the password for a domain\account combination, or other protected data, from the default protected data store
            </summary>
      <param name="protectedAssetKey">The domain\account combination, or other key specific to the data store, to look up</param>
      <returns>The password for the specific data store key combination in a secure string.  Throws exceptions for any failure.</returns>
    </member>
    <member name="M:MAT.Security.Credentials.ProtectedDataStore.GetAssetContentAsPlainText(System.String)">
      <summary>
            Requests the content of the protected asset from the default protected data store
            </summary>
      <param name="protectedAssetKey">The domain\account combination, or other key specific to the data store, to look up</param>
      <returns>All the content from the requested asset in plain text.  Throws exceptions for any failure.</returns>
    </member>
    <member name="M:MAT.Security.Credentials.ProtectedDataStore.GetAssetContent(System.String)">
      <summary>
            Requests the content of the protected asset from the default protected data store
            </summary>
      <param name="protectedAssetKey">The domain\account combination, or other key specific to the data store, to look up</param>
      <returns>All the content from the requested asset in a secure string.  Throws exceptions for any failure.</returns>
    </member>
    <member name="M:MAT.Security.Credentials.ProtectedDataStore.SetAssetContent(System.String,System.String)">
      <summary>
            Sets the content of the asset.
            </summary>
      <param name="protectedAssetKey">The protected asset key. Must be in form or string or DOMAIN\alias</param>
      <param name="content">The content.</param>
      <exception cref="T:System.NotImplementedException">Thrown is UsePdsLocation is set to OWB</exception>
      <exception cref="T:System.ArgumentNullException">protectedAssetKey must be in form or string or DOMAIN\alias</exception>
      <exception cref="T:System.ArgumentException">Asset cannot be found.</exception>
    </member>
    <member name="M:MAT.Security.Credentials.ProtectedDataStore.UpdateAssetPassword(System.String,System.String,System.String)">
      <summary>
            Sets the content of the asset.
            </summary>
      <param name="protectedAssetKey">The protected asset key. Must be in form or string or DOMAIN\alias</param>
      <param name="password">The password.</param>
      <param name="comments">The comments. If null current comments will be left in place.</param>
      <exception cref="T:System.NotImplementedException">Thrown is UsePdsLocation is set to OWB</exception>
      <exception cref="T:System.ArgumentNullException">protectedAssetKey must be in form or string or DOMAIN\alias</exception>
      <exception cref="T:System.ArgumentException">Asset cannot be found.</exception>
    </member>
    <member name="M:MAT.Security.Credentials.ProtectedDataStore.UpdateAssetPassword(System.String,System.Security.SecureString,System.String)">
      <summary>
            Sets the content of the asset.
            </summary>
      <param name="protectedAssetKey">The protected asset key. Must be in form or string or DOMAIN\alias</param>
      <param name="password">The password.</param>
      <param name="comments">The comments. If null current comments will be left in place.</param>
      <exception cref="T:System.NotImplementedException">Thrown is UsePdsLocation is set to OWB</exception>
      <exception cref="T:System.ArgumentNullException">protectedAssetKey must be in form or string or DOMAIN\alias</exception>
      <exception cref="T:System.ArgumentException">Asset cannot be found.</exception>
    </member>
    <member name="P:MAT.Security.Credentials.ProtectedDataStore.PdsLocation">
      <summary>
            Gets or sets the PDS location.
            </summary>
      <value>The PDS location.</value>
    </member>
    <member name="T:MAT.Http">
      <summary>
            Quick Http calls.
            </summary>
    </member>
    <member name="M:MAT.Http.GetPageContent(System.String,System.String,System.String,System.String)">
      <summary>
            Gets the content of the page.
            </summary>
      <param name="page">The request URI string.</param>
      <param name="userAlias">The user alias.</param>
      <param name="password">The password.</param>
      <param name="domain">The domain.</param>
      <returns>Page content.</returns>
    </member>
    <member name="M:MAT.Http.GetPageContent(System.Uri,System.String,System.String,System.String)">
      <summary>
            Gets the content of the page.
            </summary>
      <param name="page">The request URI string.</param>
      <param name="userAlias">The user alias.</param>
      <param name="password">The password.</param>
      <param name="domain">The domain.</param>
      <returns>Page content.</returns>
    </member>
    <member name="M:MAT.Http.UploadFileContent(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Uploads the content of the file.
            </summary>
      <param name="page">The page.</param>
      <param name="sourceFilePath">The source file path.</param>
      <param name="userAlias">The user alias.</param>
      <param name="password">The password.</param>
      <param name="domain">The domain.</param>
    </member>
    <member name="M:MAT.Http.UploadFileContent(System.Uri,System.String,System.String,System.String,System.String)">
      <summary>
            Uploads the content of the file.
            </summary>
      <param name="page">The page.</param>
      <param name="sourceFilePath">The source file path.</param>
      <param name="userAlias">The user alias.</param>
      <param name="password">The password.</param>
      <param name="domain">The domain.</param>
    </member>
    <member name="M:MAT.Http.GetPageStatusCode(System.String,System.String,System.String,System.String)">
      <summary>
            Gets the page status code.
            </summary>
      <param name="page">The request URI string.</param>
      <param name="userAlias">The user alias.</param>
      <param name="password">The password.</param>
      <param name="domain">The domain.</param>
      <returns>Status code.</returns>
    </member>
    <member name="M:MAT.Http.GetPageStatusCode(System.Uri,System.String,System.String,System.String)">
      <summary>
            Gets the page status code.
            </summary>
      <param name="page">The request URI string.</param>
      <param name="userAlias">The user alias.</param>
      <param name="password">The password.</param>
      <param name="domain">The domain.</param>
      <returns>Status code.</returns>
    </member>
    <member name="T:MAT.CommandLineParser.CustomValidationAttribute">
      <summary>
            Custom Validation Attribute
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CustomValidationAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.CustomValidationAttribute" /> class.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CustomValidationAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.FileMustHaveContentAttribute">
      <summary>
            The file name read must have contents to be considered valid.  Only valid for string properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.FileMustHaveContentAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.FileMustExistAttribute">
      <summary>
            The file name read must exist to be considered valid.  Only valid for string properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.FileMustExistAttribute.#ctor">
      <summary>
            The file name read must exist to be considered valid.  Only valid for string properties.  Defaults to expand environmental variables.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.FileMustExistAttribute.#ctor(System.Boolean)">
      <summary>
            The file name read must exist to be considered valid.  Only valid for string properties.
            </summary>
      <param name="expandEnvironmentalVariables">True if environmental variables should be expanded, otherwise false</param>
    </member>
    <member name="M:MAT.CommandLineParser.FileMustExistAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.FileMustExistAttribute.ExpandEnvironmentalVariables">
      <summary>
            True if environmental variables should be expanded, otherwise false
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.FileMustNotExistAttribute">
      <summary>
            The file name read must NOT exist to be considered valid.  Only valid for string properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.FileMustNotExistAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.UriMustBeAbsoluteAttribute">
      <summary>
            The Uri must be absolute to be considered valid.  Only valid for Uri properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.UriMustBeAbsoluteAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.UriMustBeRelativeAttribute">
      <summary>
            The Uri must be relative to be considered valid.  Only valid for Uri properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.UriMustBeRelativeAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.FileMustBeWritableAttribute">
      <summary>
            The file name read must be writable to be considered valid.  Only valid for string properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.FileMustBeWritableAttribute.#ctor">
      <summary>
            The file name read must be writable to be considered valid.  Only valid for string properties.  Defaults to expanding environmental variables.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.FileMustBeWritableAttribute.#ctor(System.Boolean)">
      <summary>
            The file name read must be writable to be considered valid.  Only valid for string properties.
            </summary>
      <param name="expandEnvironmentalVariables">
      </param>
    </member>
    <member name="M:MAT.CommandLineParser.FileMustBeWritableAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.FileMustBeWritableAttribute.ExpandEnvironmentalVariables">
      <summary>
            True if environmental variables in the string should be expanded
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.DirectoryMustExistAttribute">
      <summary>
            The directory name read must exist to be considered valid.  Only valid for string properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DirectoryMustExistAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.DirectoryMustNotExistAttribute">
      <summary>
            The directory name read must NOT exist to be considered valid.  Only valid for string properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DirectoryMustNotExistAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.StringMustNotBeEmptyAttribute">
      <summary>
            The string read must NOT be null or empty to be considered valid.  Only valid for string properties.  For arrays, lists, etc. use EnumeratorMustHaveElements.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.StringMustNotBeEmptyAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.EnumeratorMustRangeOfElementsAttribute">
      <summary>
            The enumerable property must have element count in the specified range to be considered valid.  Only valid for enumerable properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.EnumeratorMustRangeOfElementsAttribute.#ctor(System.Int64,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.EnumeratorMustRangeOfElementsAttribute" /> class.
            </summary>
      <param name="minElements">The min elements.</param>
      <param name="maxElements">The max elements.</param>
    </member>
    <member name="M:MAT.CommandLineParser.EnumeratorMustRangeOfElementsAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.EnumeratorMustRangeOfElementsAttribute.MinElements">
      <summary>
            Gets or sets the min elements.
            </summary>
      <value>The min elements.</value>
    </member>
    <member name="P:MAT.CommandLineParser.EnumeratorMustRangeOfElementsAttribute.MaxElements">
      <summary>
            Gets or sets the max elements.
            </summary>
      <value>The max elements.</value>
    </member>
    <member name="T:MAT.CommandLineParser.EnumeratorMustHaveElementsAttribute">
      <summary>
            The enumerable property must have at least one element to be considered valid.  Only valid for enumerable properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.EnumeratorMustHaveElementsAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.EnumeratorMustHaveElementsAttribute" /> class.
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.RegexMustMatchAttribute">
      <summary>
            The string read must match the provided RegEx to be considered valid.  Only valid for string properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.RegexMustMatchAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.RegexMustMatchAttribute" /> class.
            </summary>
      <param name="pattern">The RegEx pattern to compare the switch value to.  Defaults to case-insensitive, invariant culture.</param>
    </member>
    <member name="M:MAT.CommandLineParser.RegexMustMatchAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.RegexMustMatchAttribute" /> class.
            </summary>
      <param name="pattern">The RegEx pattern to compare the switch value to.</param>
      <param name="options">The RegEx options that should be applied during the comparision.</param>
    </member>
    <member name="M:MAT.CommandLineParser.RegexMustMatchAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.RegexMustMatchAttribute.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:MAT.CommandLineParser.RegexMustMatchAttribute.Options">
      <summary>
            Gets or sets the options.
            </summary>
      <value>The options.</value>
    </member>
    <member name="T:MAT.CommandLineParser.RegexMustNotMatchesAttribute">
      <summary>
            The string read must NOT match the provided RegEx to be considered valid.  Only valid for string properties.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.RegexMustNotMatchesAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.RegexMustNotMatchesAttribute" /> class.
            </summary>
      <param name="pattern">The RegEx pattern to compare the switch value to.  Defaults to case-insensitive, invariant culture.</param>
    </member>
    <member name="M:MAT.CommandLineParser.RegexMustNotMatchesAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.OnlyValidWithAttribute">
      <summary>
            Makes the switch it is applied to require the named switch to be defined to be valid.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.OnlyValidWithAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.OnlyValidWithAttribute" /> class.
            </summary>
      <param name="onlyValidWith">The name of the switch that must be defined in order for this switch to be valid.</param>
    </member>
    <member name="M:MAT.CommandLineParser.OnlyValidWithAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.OnlyValidWithAttribute.OnlyValidWith">
      <summary>
            Gets or sets the only valid with switch name.
            </summary>
      <value>The only valid with switch name.</value>
    </member>
    <member name="T:MAT.CommandLineParser.MutuallyExclusiveWithAttribute">
      <summary>
            Makes the switch it is applied to require the named switch to not be defined to be valid.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.MutuallyExclusiveWithAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.MutuallyExclusiveWithAttribute" /> class.
            </summary>
      <param name="mutuallyExclusiveWith">The name of the switch to be invalid with.</param>
    </member>
    <member name="M:MAT.CommandLineParser.MutuallyExclusiveWithAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.MutuallyExclusiveWithAttribute.MutuallyExclusiveWith">
      <summary>
            Gets or sets the mutually exclusive with switch name.
            </summary>
      <value>The mutually exclusive with switch name.</value>
    </member>
    <member name="T:MAT.CommandLineParser.ValueMustBeInInclusiveRangeAttribute">
      <summary>
            Make the switch only valid for numbers in a certain defined range.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ValueMustBeInInclusiveRangeAttribute.#ctor(System.Int64,System.Int64)">
      <param name="minValue">The low bound of the allowed range.</param>
      <param name="maxValue">The high bound of the allowed range.</param>
    </member>
    <member name="M:MAT.CommandLineParser.ValueMustBeInInclusiveRangeAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.ValueMustBeInInclusiveRangeAttribute.MinValue">
      <summary>
            Gets or sets the min value.
            </summary>
      <value>The min value.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ValueMustBeInInclusiveRangeAttribute.MaxValue">
      <summary>
            Gets or sets the max value.
            </summary>
      <value>The max value.</value>
    </member>
    <member name="T:MAT.CommandLineParser.UriMustBeValidAttribute">
      <summary>
            Makes sure the switch value is a valid Uri
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.UriMustBeValidAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.RequiredIfSwitchIsValueAttribute">
      <summary>
            Makes a switch required if another switch is set to a particular value
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.RequiredIfSwitchIsValueAttribute.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.RequiredIfSwitchIsValueAttribute" /> class.
            </summary>
      <param name="switchName">The name of the switch whose value will be checked.</param>
      <param name="valueToBeRequiredFor">The value of the switch named switch that makes this switch required.</param>
    </member>
    <member name="M:MAT.CommandLineParser.RequiredIfSwitchIsValueAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.RequiredIfSwitchIsValueAttribute" /> class.
            </summary>
      <param name="switchName">The name of the switch whose value will be checked.</param>
      <param name="valueToBeRequiredFor">The value of the switch named switch that makes this switch required.</param>
      <param name="caseInsensitive">The value of valueToBeRequiredFor is a string, and compare without case-sensitivity</param>
    </member>
    <member name="M:MAT.CommandLineParser.RequiredIfSwitchIsValueAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.RequiredIfSwitchIsValueAttribute.SwitchName">
      <summary>
            Gets or sets the name of the switch.
            </summary>
      <value>The name of the switch.</value>
    </member>
    <member name="P:MAT.CommandLineParser.RequiredIfSwitchIsValueAttribute.ValueToBeRequiredFor">
      <summary>
            Gets or sets the value to be required for.
            </summary>
      <value>The value to be required for.</value>
    </member>
    <member name="P:MAT.CommandLineParser.RequiredIfSwitchIsValueAttribute.CaseInsensitive">
      <summary>
            Gets or sets a value indicating whether [case insensitive].
            </summary>
      <value>
        <c>true</c> if [case insensitive]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.CommandLineParser.RequiredIfSwitchIsDefinedAttribute">
      <summary>
            Makes a switch required if another switch is defined
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.RequiredIfSwitchIsDefinedAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.RequiredIfSwitchIsDefinedAttribute" /> class.
            </summary>
      <param name="switchName">The name of the switch that makes this switch required.</param>
    </member>
    <member name="M:MAT.CommandLineParser.RequiredIfSwitchIsDefinedAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.RequiredIfSwitchIsDefinedAttribute.SwitchName">
      <summary>
            Gets or sets the name of the switch.
            </summary>
      <value>The name of the switch.</value>
    </member>
    <member name="T:MAT.CommandLineParser.XmlMustBeValidAttribute">
      <summary>
            Verifies that the XML is valid for a particular property.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.XmlMustBeValidAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.GetSchemasDelegate">
      <summary>
            Used by the XmlMustMatchSchema attribute
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.XmlMustMatchSchemaAttribute">
      <summary>
            Checks to see if the provided schemas match the property they're applied to
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.XmlMustMatchSchemaAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.XmlMustMatchSchemaAttribute" /> class.
            </summary>
      <param name="schemaRetrieversName">The user-defined method to call to get the schemas</param>
    </member>
    <member name="M:MAT.CommandLineParser.XmlMustMatchSchemaAttribute.Validator(MAT.CommandLineParser.CustomValidatorParameters)">
      <summary>
            Validators the specified parameters.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.XmlMustMatchSchemaAttribute.SchemasToCheck">
      <summary>
            Gets or sets the schemas to check.
            </summary>
      <value>The schemas to check.</value>
    </member>
    <member name="T:MAT.BuildTasks.SetBuildNumber">
      <summary>
            Updates the assembly info AssemblyVersion and FileVersion.
            </summary>
      <example>
        <code>
              &lt;UsingTask TaskName="MAT.BuildTasks.SetBuildNumber" AssemblyFile="MAT.Core.dll" /&gt;
              &lt;Target Name="BuildNumberOverrideTarget" Condition="$(IsDesktopBuild)!='true' and $(MachineName)!='CITFSBLD01'" DependsOnTargets ="InitializeWorkspace;"&gt;
                &lt;Exec Command="$(TFCommand) get /force $(AssemblyQuoted)"
                      WorkingDirectory="$(BuildDirectory)" IgnoreExitCode="true"/&gt;
                
                &lt;Exec WorkingDirectory="$(SolutionRoot)"
                  Command="$(TFCommand) checkout $(AssemblyQuoted)"
                  IgnoreExitCode="true"/&gt;    
                
                &lt;SetBuildNumber AssemblyInfoPath="$(AssemblyInfoFile)"
                                BuildName="$(BuildPrefix)"&gt;
                  &lt;Output TaskParameter="BuildNumber" PropertyName="BuildNumber"/&gt;
                  &lt;Output TaskParameter="BuildNumberRoot" PropertyName="BuildNumberRoot"/&gt;
                &lt;/SetBuildNumber&gt;
                
                &lt;Exec WorkingDirectory="$(SolutionRoot)"
                      Command="$(TFCommand) checkin /comment:$(NoCICheckinComment) /noprompt /override:$(AutoBuildComment) $(AssemblyQuoted)"
                      IgnoreExitCode="true"/&gt;    
              &lt;/Target&gt;
            </code>
      </example>
    </member>
    <member name="M:MAT.BuildTasks.SetBuildNumber.#ctor">
      <summary>
            Updates the assembly info AssemblyVersion and FileVersion.
            </summary>
    </member>
    <member name="M:MAT.BuildTasks.SetBuildNumber.Execute">
      <summary>
            1. Finds FileVersionInfo from the AssemblyInfo.cs
            2. Update the build revision
            3. Saves the AssemblyInfo.cs if not readonly
            </summary>
      <returns>true = succeeded</returns>
    </member>
    <member name="P:MAT.BuildTasks.SetBuildNumber.BuildNumber">
      <summary>
            Gets the build number.
            </summary>
      <value>The build number.</value>
    </member>
    <member name="P:MAT.BuildTasks.SetBuildNumber.BuildNumberRoot">
      <summary>
            Gets the build number root.
            </summary>
      <value>The build number root.</value>
    </member>
    <member name="P:MAT.BuildTasks.SetBuildNumber.AssemblyInfoPath">
      <summary>
            Gets or sets the assembly info path.
            </summary>
      <value>The assembly info path.</value>
    </member>
    <member name="P:MAT.BuildTasks.SetBuildNumber.LastBuildNumber">
      <summary>
            Gets or sets the last build number.
            </summary>
      <value>The last build number.</value>
    </member>
    <member name="P:MAT.BuildTasks.SetBuildNumber.BuildName">
      <summary>
            Gets or sets the name of the build.
            </summary>
      <value>The name of the build.</value>
    </member>
    <member name="T:MAT.Server.WindowsService">
      <summary>
            Provides methods to interact with windows services on remote machines
            </summary>
    </member>
    <member name="M:MAT.Server.WindowsService.Start(System.String,System.String)">
      <summary>
            Starts a service. If the service is already started, it will be stopped first.
            </summary>
      <param name="machineName">The name of the machine</param>
      <param name="serviceName">The name of the service to start</param>
    </member>
    <member name="M:MAT.Server.WindowsService.Stop(System.String,System.String)">
      <summary>
            Stops a service. Throws a SystemException if the process is unable to exit.
            </summary>
      <param name="machineName">The name of the machine</param>
      <param name="serviceName">The name of the service to Stop</param>
    </member>
    <member name="M:MAT.Server.WindowsService.Restart(System.String,System.String)">
      <summary>
            Stops and starts a service.
            </summary>
      <param name="machineName">The name of the machine</param>
      <param name="serviceName">The name of the service to restart</param>
    </member>
    <member name="M:MAT.Server.WindowsService.GetStatus(System.String,System.String)">
      <summary>
            Returns the status of a service (running, stopped, etc.)
            </summary>
      <param name="machineName">The name of the machine</param>
      <param name="serviceName">The name of the service to restart</param>
    </member>
    <member name="M:MAT.Server.WindowsService.IsProcessIdle(System.String,System.String,System.Int32)">
      <summary>
            Returns true if the service is not using the CPU for secondsIdle seconds. Also, returns true if the service is stopped
            </summary>
      <param name="machineName">The name of the machine on which the service exists</param>
      <param name="processName">The name of the actual exe the windows service drives (Can be obtained by going to taskmgr (ctrl-shift-escape) and getting the Image Name under the Processes tab – for example, Outlook.exe)</param>
      <param name="secondsIdle">Time in seconds to check for inactivity</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.WindowsService.IsAnyProcessAlive(System.Diagnostics.Process[])">
      <summary>
            Returns true if any one of an array of processes is still alive. Returns false if all have exited.
            </summary>
      <param name="processes">Process array</param>
      <returns>true or false</returns>
    </member>
    <member name="T:MAT.DataCompare.Core.SchemaCmpResult">
      <summary>
            Schema comparision contains method that actually compare two objects
            This static class returns Schema comparision results
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.SchemaCmpResultTreatingSourceAsExpected(MAT.DataCompare.Core.Table,MAT.DataCompare.Core.Table)">
      <summary>
            Schemas the CMP result treating source as expected.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.SchemaCmpResultTreatingSourceAsExpected(MAT.DataCompare.Core.Table,MAT.DataCompare.Core.Table,System.String)">
      <summary>
            Schemas the CMP result treating source as expected.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <param name="excludeColumnList">The exclude column list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.SchemaCmpResultTreatingDestinationAsExpected(MAT.DataCompare.Core.Table,MAT.DataCompare.Core.Table)">
      <summary>
            Schemas the CMP result treating destination as expected.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.SchemaCmpResultTreatingDestinationAsExpected(MAT.DataCompare.Core.Table,MAT.DataCompare.Core.Table,System.String)">
      <summary>
            Schemas the CMP result treating destination as expected.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <param name="excludeColumnList">The exclude column list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.SchemaCmpResults(MAT.DataCompare.Core.Table,MAT.DataCompare.Core.Table)">
      <summary>
            Schemas the CMP results.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.SchemaCmpResults(MAT.DataCompare.Core.Table,MAT.DataCompare.Core.Table,MAT.DataCompare.Core.ColumnMapCollection,System.String)">
      <summary>
            Schemas comparison with column mapping
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <param name="excludeColumnList">The exclude column list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.SchemaCmpResults(MAT.DataCompare.Core.Table,MAT.DataCompare.Core.Table,System.String)">
      <summary>
            Schemas the CMP results.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <param name="excludeColumnList">The exclude column list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.ViewSchemaCmpResults(MAT.DataCompare.Core.View,MAT.DataCompare.Core.View)">
      <summary>
            Views the schema CMP results.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.FunctionSchemaCmpResults(MAT.DataCompare.Core.Function,MAT.DataCompare.Core.Function)">
      <summary>
            Functions the schema CMP results.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.StoredProcedureSchemaCmpResults(MAT.DataCompare.Core.StoredProcedure,MAT.DataCompare.Core.StoredProcedure)">
      <summary>
            Storeds the procedure schema CMP results.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.SchemaCmpResults(MAT.DataCompare.Core.View,MAT.DataCompare.Core.Table)">
      <summary>
            Schemas the CMP results.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaCmpResult.SchemaCmpResults(MAT.DataCompare.Core.View,MAT.DataCompare.Core.Table,System.String)">
      <summary>
            Schemas the CMP results.
            </summary>
      <param name="rightSide">The right side.</param>
      <param name="leftSide">The left side.</param>
      <param name="excludeColumnList">The exclude column list.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataCompare.DataAccess.SqlDatabase">
      <summary>
            Sql Database
            </summary>
    </member>
    <member name="F:MAT.DataCompare.DataAccess.SqlDatabase._connectionString">
      <summary>
            Sql connection string
            </summary>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.#ctor(System.String)">
      <summary>
            Initializes a new instance of the SqlDatabase class.
            </summary>
      <param name="connectionString">Sql connection string</param>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunStoredProc(System.String)">
      <summary>
            Runs a stored proceedure
            </summary>
      <param name="storedProc">Name of stored proceedure</param>
      <returns>Resulting DataSet</returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunStoredProc(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
      <summary>
            Runs a stored proceedure
            </summary>
      <param name="storedProc">Name of stored proceedure</param>
      <param name="parameters">List of parameters to pass</param>
      <returns>Resulting DataSet</returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunStoredProc(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Int32)">
      <summary>
            Runs a stored proceedure on
            </summary>
      <param name="storedProc">Name of stored proceedure</param>
      <param name="parameters">List of parameters to pass</param>
      <param name="timeout">Timeout for SQL command (seconds)</param>
      <returns>Resulting DataSet</returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunStoredProc(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.String[])">
      <summary>
            Runs a stored proceedure 
            </summary>
      <param name="storedProc">Name of stored proceedure</param>
      <param name="parameters">List of parameters to pass</param>
      <param name="tableNames">Table names</param>
      <returns>Resulting DataSet</returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunSqlText(System.String)">
      <summary>
            Runs a SQL statement
            </summary>
      <param name="sqlText">SQL text to run</param>
      <returns>Resulting DataSet</returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunSqlText(System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter})">
      <summary>
            Runs a SQL statement
            </summary>
      <param name="sqlText">SQL text to run</param>
      <param name="parameters">List of parameters to pass</param>
      <returns>Resulting DataSet</returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunSqlText(System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.String[])">
      <summary>
            Runs a SQL statement
            </summary>
      <param name="sqlText">SQL text to run</param>
      <param name="parameters">List of parameters to pass</param>
      <param name="tableNames">Table names</param>
      <returns>Resulting DataSet</returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunSqlText(System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Int32)">
      <summary>
            Runs SQL text command
            </summary>
      <param name="sqlText">Sql text to run</param>
      <param name="parameters">List of parameters</param>
      <param name="timeout">Time out (seconds)</param>
      <returns>Resulting data set</returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunSqlCommand(System.Data.SqlClient.SqlCommand)">
      <summary>
            Runs a query
            </summary>
      <param name="sqlCommand">Query to run</param>
      <returns>Resulting data set</returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.RunSqlCommandWithGoString(System.String)">
      <summary>
            Run SQL Script with Go Statement
            </summary>
      <param name="scriptText">The script text.</param>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.SqlDatabase.GetResultSchemaInfo(System.Data.SqlClient.SqlCommand)">
      <summary>
            Runs a query
            </summary>
      <param name="sqlCommand">Query to run</param>
      <returns>Resulting data set</returns>
    </member>
    <member name="F:MAT.DataCompare.Constants.SqlDefaultTimeout">
      <summary>
            SQL stored procedure call timeout unlimited
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.SqlExtendedTimeout">
      <summary>
            SQL stored procedure call long timeout
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.MisingDestinationTable">
      <summary>
            Missing table object ob destination side
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.MisingDestinationView">
      <summary>
            Missing view object  source side
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.MisingDestinationFunction">
      <summary>
            Missing function object  source side
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.MisingDestinationStoredProc">
      <summary>
            Missing stored proc object  source side
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.MisingSourceTable">
      <summary>
            Missing table object source side
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.MisingSourceView">
      <summary>
            Missing view object  source side
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.MisingSourceFunction">
      <summary>
            Missing function object  source side
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.MisingSourceStoredProc">
      <summary>
            Missing stored proc object  source side
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.NoMisMatchedFound">
      <summary>
            No mis matched 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.NoMisMatchedFoundForSpecifiedFilters">
      <summary>
            No mis matched for specified filter
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.Separator">
      <summary>
            Separator
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.RowSeparator">
      <summary>
            Row Separator
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.Inconclusive">
      <summary>
            inconclusive
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.SchemaMatched">
      <summary>
            Schema matched
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.SchemaMatchedFor">
      <summary>
            Schema matched for following 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.SchemaMisMatchedFor">
      <summary>
            Schema mismatched for following 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.Source">
      <summary>
            Source
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Constants.Destination">
      <summary>
            Destination
            </summary>
    </member>
    <member name="T:MAT.Verify.SortDirection">
      <summary>
            Enum defining the sort possibilities
            </summary>
    </member>
    <member name="F:MAT.Verify.SortDirection.Descending">
      <summary>
            Descending (Z-A, etc...)
            </summary>
    </member>
    <member name="F:MAT.Verify.SortDirection.Ascending">
      <summary>
            Ascending (A-Z, 1-9)
            </summary>
    </member>
    <member name="T:MAT.Verify.SortObjects`1">
      <summary>
            Sorts objects depending on type
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:MAT.Verify.SortObjects`1.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Verify.SortObjects`1" /> class.
            </summary>
      <param name="field">The field.</param>
    </member>
    <member name="M:MAT.Verify.SortObjects`1.#ctor(System.String,MAT.Verify.SortDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Verify.SortObjects`1" /> class.
            </summary>
      <param name="field">The field.</param>
      <param name="sort">The sort.</param>
    </member>
    <member name="T:MAT.HttpAnalysis.Cookie">
      <summary>
            Encapsulates response cookie information
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.Cookie.#ctor(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Stores parameters in internal attributes
            </summary>
      <param name="domain">domain in which the cookie is defined</param>
      <param name="expires">time at which the cookie expires</param>
      <param name="name">cookie name</param>
      <param name="path">URL path in which cookie is defined</param>
      <param name="value">value stored in the cookie</param>
    </member>
    <member name="P:MAT.HttpAnalysis.Cookie.Domain">
      <summary>
            Returns domain in which the cookie is defined
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Cookie.Expires">
      <summary>
            Returns time at which the cookie expires
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Cookie.Name">
      <summary>
            Returns cookie name
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Cookie.Path">
      <summary>
            Returns URL path in which cookie is defined
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Cookie.Value">
      <summary>
            Returns value stored in the cookie
            </summary>
    </member>
    <member name="T:MAT.CacheHelper">
      <summary>
            Cache data in an app domain.
            </summary>
      <remarks>Written by http://johnnycoder.com/blog/2008/12/10/c-cache-helper-class/ changed to make work outside of ASP.NET</remarks>
    </member>
    <member name="M:MAT.CacheHelper.Add``1(System.String,``0)">
      <summary>
            Insert value into the cache using
            appropriate name/value pairs
            </summary>
      <typeparam name="T">Type of cached item</typeparam>
      <param name="key">Name of item</param>
      <param name="cacheItem">Item to be cached</param>
    </member>
    <member name="M:MAT.CacheHelper.Clear(System.String)">
      <summary>
            Remove item from cache
            </summary>
      <param name="key">Name of cached item</param>
    </member>
    <member name="M:MAT.CacheHelper.Exists(System.String)">
      <summary>
            Check for item in cache
            </summary>
      <param name="key">Name of cached item</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.CacheHelper.TryGet``1(System.String,``0@)">
      <summary>
            Retrieve cached item
            </summary>
      <typeparam name="T">Type of cached item</typeparam>
      <param name="key">Name of cached item</param>
      <param name="value">Cached value. Default(T) if
            item doesn't exist.</param>
      <returns>Cached item as type</returns>
    </member>
    <member name="M:MAT.CacheHelper.Get``1(System.String)">
      <summary>
            Retrieve cached item
            </summary>
      <typeparam name="T">Type of cached item</typeparam>
      <param name="key">Name of cached item</param>
      <returns>Cached item as type</returns>
    </member>
    <member name="T:MAT.BITrack">
      <summary>
            Send calls to tracking service.
            </summary>
    </member>
    <member name="T:MAT.BITrack.PrivateConfigurationLib">
      <summary>
            Configuration file functions
            </summary>
    </member>
    <member name="M:MAT.BITrack.PrivateConfigurationLib.UpdateApplicationSettingsBaseClasses(System.String,System.Reflection.Assembly)">
      <summary>
            Loads any settings from the specified config file.
            </summary>
      <param name="configPath">Config file that settings should be loaded from</param>
      <param name="calling">The calling assembly (assumes executing assembly if null)</param>
      <exception cref="T:System.IO.FileNotFoundException">Thrown if the file doesn't exist</exception>
    </member>
    <member name="T:MAT.BITrack.Permissions">
      <summary>
            This class contains a list of functions useful in determining and modifying certain security group permissions
            </summary>
    </member>
    <member name="M:MAT.BITrack.Permissions.IsMemberOfSecurityGroup(System.String,System.String)">
      <summary>
            Determines whether user is a member of the specified security group.
            </summary>
      <param name="securityGroup">The security group. Can be in format Name, DOMAIN\Name, DOMAIN\ACCNT</param>
      <param name="userAccount">The user (assumes current user if null or missing).  If added expected DOMAIN\USER format.  Will assume REDMOND is domain is not given.</param>
      <returns>
        <c>true</c> if is member of the specified security group; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentException">This error is thrown if the security group specified is not a security group (possibly a DL only group), or a known name (not existing)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">This error is thrown if user == null and the user is not an authenticated NTACCOUNT.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if securityGroup is null or empty</exception>
    </member>
    <member name="M:MAT.BITrack.Permissions.IsServiceAccount(System.String)">
      <summary>
            Determines whether the user account belongs to [DOMAIN]\All Service Accounts in [DOMAIN]
            </summary>
      <param name="userAccount">The service account in DOMAIN\\alias format.</param>
      <returns>
        <c>true</c> if not a member of service accounts group; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:MAT.BITrack.Permissions.IsSecurityGroup(System.String)">
      <summary>
            Determines whether string is a security group.
            </summary>
      <param name="securityGroup">The security group (DOMAIN\\alias, DOMAIN\name, name@domain, and Distinguished name formats accepted).</param>
      <returns>
        <c>true</c> if the specified string is a security group; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if securityGroup is null or empty</exception>
    </member>
    <member name="M:MAT.BITrack.Permissions.IsValidUserAccountPattern(System.String)">
      <summary>
            Determines whether account string is valid user account pattern.
            </summary>
      <param name="userAccount">The user account.</param>
    </member>
    <member name="M:MAT.BITrack.Permissions.GetDirectoryProperty(System.String,System.String,System.String[])">
      <summary>
            Gets the directory property results from 
            </summary>
      <param name="domain">User domain</param>
      <param name="filterOrSamAccountOrName">User alias</param>
      <param name="properties">The properties to retrieve. (memberof, mail, displayname, manager, telephonenumber, thumbnailphoto, title, department, physicaldeliveryofficename)</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.BITrack.Permissions.Like(System.String,System.String[])">
      <summary>
            Runs a regular expression determining any of the values match this string.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>True if one of the values match.</returns>
    </member>
    <member name="F:MAT.BITrack.TrackingEnabled">
      <summary>
            Turn On/Off tracking calls.
            </summary>
    </member>
    <member name="M:MAT.BITrack.ClearStoredData">
      <summary>
            Clears any data stored previously in this session such as user information and history of tracked functions.
            This will force the user information to be collected again and session ID to be reset.
            </summary>
    </member>
    <member name="M:MAT.BITrack.TrackMe">
      <summary>
            Tracks BI data of a called function.  This will only track on the first call to the function.
            </summary>
      <returns>Null if not tracked otherwise call.</returns>
    </member>
    <member name="P:MAT.BITrack.SkipUnitTestExitCheck">
      <summary>
            Used to turn off tracking if the assembly is a unit test assembly.
            </summary>
    </member>
    <member name="P:MAT.BITrack.ConfigFullFilePath">
      <summary>
            Gets or sets the config full file path for BITrack.dll which contains information on tracking enabled and service call.
            </summary>
      <value>The config full file path.</value>
    </member>
    <member name="T:MAT.Verify.FalseException">
      <summary>
            Exception thrown when a value is unexpectedly true.
            </summary>
    </member>
    <member name="M:MAT.Verify.FalseException.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.FalseException" /> class.
            </summary>
      <param name="userMessage">The user message to be display, or null for the default message</param>
    </member>
    <member name="T:MAT.Verify.EqualException">
      <summary>
            Exception thrown when two values are unexpectedly not equal.
            </summary>
    </member>
    <member name="M:MAT.Verify.EqualException.#ctor(System.Object,System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.EqualException" /> class.
            </summary>
      <param name="expected">The expected object value</param>
      <param name="actual">The actual object value</param>
    </member>
    <member name="T:MAT.Extensions">
      <summary>
            Class extensions for Strings
            </summary>
      <summary>
            Class extensions for XElement
            </summary>
    </member>
    <member name="M:MAT.Extensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Concatenates a specified separator String between each element of a specified String array, yielding a single concatenated string.
            </summary>
      <param name="list">List of strings to combine</param>
      <param name="separator">Separation characters</param>
      <returns>A single concatenated string</returns>
    </member>
    <member name="M:MAT.Extensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>
            Concatenates a specified separator String between each element of a specified String array, yielding a single concatenated string.
            </summary>
      <typeparam name="T">The type of the members of values</typeparam>
      <param name="list">List of items to convert to strings and combine</param>
      <param name="separator">Separation characters</param>
      <returns>A single concatenated string</returns>
    </member>
    <member name="M:MAT.Extensions.FormatInvariant(System.String,System.Object[])">
      <summary>
            returns String.Format(CultureInfo.InvariantCulture, [String], values);
            </summary>
      <param name="item">String to format</param>
      <param name="values">List of arguments to replace with</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.EqualsIgnoreCase(System.String,System.String[])">
      <summary>
            Checks if any of the items in the string list are equal to the this string.  
            Ignores case during check.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.Equals(System.Char,System.Char[])">
      <summary>
            Checks if any of the items in the char list are equal to the this char.  
            Ignores case during check.
            </summary>
      <param name="item">Char to verify</param>
      <param name="values">List of chars to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.Equals``1(``0,``0[])">
      <summary>
            Checks if any of the items in the list are equal to the this item.  
            Ignores case during check.
            </summary>
      <param name="item">item to verify</param>
      <param name="values">List of items to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.Equals(System.Int32,System.Int32[])">
      <summary>
            Checks if any of the items in the list are equal to the this item.  
            Ignores case during check.
            </summary>
      <param name="item">item to verify</param>
      <param name="values">List of items to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.EqualsIgnoreCase(System.Char,System.Char[])">
      <summary>
            Checks if any of the items in the char list are equal to the this char.  
            </summary>
      <param name="item">Char to verify</param>
      <param name="values">List of chars to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.Like(System.String,System.String[])">
      <summary>
            Runs a regular expression determining any of the values match this string.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>True if one of the values match.</returns>
    </member>
    <member name="M:MAT.Extensions.NotLike(System.String,System.String[])">
      <summary>
            Runs a regular expression determining if all the value do not match this string.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>True if no values match.</returns>
    </member>
    <member name="M:MAT.Extensions.StartsWithIgnoreCase(System.String,System.String[])">
      <summary>
            Checks if this string starts with any of the items in the string list.
            Ignores case during check.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.EndsWithIgnoreCase(System.String,System.String[])">
      <summary>
            Checks if this string starts with any of the items in the string list.
            Ignores case during check.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.Contains(System.String,System.String[])">
      <summary>
            Checks if this string contains any of the items in the string list.
            Ignores case during check.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.ContainsIgnoreCase(System.Windows.Forms.ListBox.ObjectCollection,System.String[])">
      <summary>
            Checks if this listbox contains any of the items in the string list.
            Ignores case during check.
            </summary>
      <param name="col">Collection to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.ContainsIgnoreCase(System.Windows.Forms.ComboBox.ObjectCollection,System.String[])">
      <summary>
            Checks if this combobox contains any of the items in the string list.
            Ignores case during check.
            </summary>
      <param name="col">Collection to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.ContainsAll(System.String,System.String[])">
      <summary>
            Checks if this string contains all of the items in the string list.
            Ignores case during check.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to compare</param>
      <returns>true if match</returns>
    </member>
    <member name="M:MAT.Extensions.Remove(System.String,System.String[])">
      <summary>
            Removes any of the items in the string list.
            Ignores case during check.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to remove</param>
      <returns>Cleaned string</returns>
    </member>
    <member name="M:MAT.Extensions.TrimStartIgnoreCase(System.String,System.String[])">
      <summary>
            If this string starts with any of these strings trim that string.  This only trims the first string that is found at the beginning.  Use TrimStartAll for all.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to remove</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Extensions.TrimEndIgnoreCase(System.String,System.String[])">
      <summary>
            If this string ends with any of these strings trim that string.  This only trims the first string that is found at the beginning.  Use TrimStartAll for all.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to remove</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Extensions.TrimStartAllIgnoreCase(System.String,System.String[])">
      <summary>
            If this string starts with any of these strings trim that string.  This only trims the first string that is found at the beginning.  Use TrimStartAll for all.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to remove</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Extensions.TrimEndAllIgnoreCase(System.String,System.String[])">
      <summary>
            If this string ends with any of these strings trim that string.  This only trims the first string that is found at the beginning.  Use TrimStartAll for all.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to remove</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Extensions.TrimIgnoreCase(System.String,System.String[])">
      <summary>
            Trims the start and end of the string.  trims only the first match of the start or end.  use TrimAllIgnoreCase to trim all.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to remove</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Extensions.TrimAllIgnoreCase(System.String,System.String[])">
      <summary>
            Trims all the values starting and ending of the string.
            </summary>
      <param name="item">String to verify</param>
      <param name="values">List of strings to remove</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Extensions.HasContent(System.String)">
      <summary>
            Indicates whether the specified string is not null and contains at
            least one non-whitespace character.
            </summary>
      <param name="item">String to verify</param>
      <remarks>This is the positive test of the String.IsNullOrWhiteSpace method</remarks>
    </member>
    <member name="M:MAT.Extensions.HasContent``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Indicates whether the specified IEnumerable is not null and contains at
            least one item.
            </summary>
      <param name="item">List, array or other object that implements IEnumerable</param>
    </member>
    <member name="M:MAT.Extensions.HasContent(System.Security.SecureString)">
      <summary>
            Indicates whether the secure string is not null and has at least one character.
            </summary>
      <param name="item">The SecureString to be examined.</param>
      <returns>
        <c>true</c> if the specified item has content; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:MAT.Extensions.IndexOf(System.String,System.String[])">
      <summary>
            Finds the lowest index of the provides strings.
            </summary>
      <param name="item">The item.</param>
      <param name="searchFor">The search for.</param>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <returns>The lowest index of one of the provided strings</returns>
    </member>
    <member name="M:MAT.Extensions.IndexOf(System.String,System.Int32,System.String[])">
      <summary>
            Finds the lowest index of the provides strings.
            </summary>
      <param name="item">The item.</param>
      <param name="startIndex">The start index.</param>
      <param name="searchFor">The search for.</param>
      <returns>The lowest index of one of the provided strings</returns>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:MAT.Extensions.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison,System.String[])">
      <summary>
            Finds the lowest index of the provides strings.
            </summary>
      <param name="item">The item.</param>
      <param name="startIndex">The start index.</param>
      <param name="count">The number of character positions to examine.</param>
      <param name="stringCompType">Type of the string comp.</param>
      <param name="searchFor">The search for.</param>
      <returns>The lowest index of one of the provided strings</returns>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:MAT.Extensions.GetTextBetween(System.String,System.String,System.String)">
      <summary>Returns the text between two parts of a string.</summary>
      <remarks>This code
            <code>"This sentence is short.".GetTextBetween("sentence","short")</code> would return " is ".  
            Use nulls for beginning or end.  This <code>"This sentence is short.".GetTextBetween(null, "sentence")</code>
            would return "This ".
            If the start and end Delimiters are not in the source then String.Empty is returned.
            </remarks>
      <param name="source">Content to search</param>
      <param name="startDelimiter">left side of search; null for beginning of source</param>
      <param name="endDelimiter">right side of search; null for end of source</param>
      <returns>Content between start and end or String.Empty if not found.</returns>
    </member>
    <member name="M:MAT.Extensions.IsValid(System.Xml.Linq.XElement,System.String[])">
      <summary>
            Validates Xml element against schemas
            </summary>
      <param name="element">Element to verify</param>
      <param name="schemaPath">List locations of schemas to compare</param>
      <returns>True/False (if false details in Debug)</returns>
    </member>
    <member name="M:MAT.Extensions.IsValid(System.Xml.Linq.XElement,System.Xml.XmlReader[])">
      <summary>
            Validates xml element against schemas
            </summary>
      <param name="element">Element to verify</param>
      <param name="schemaReader">List of schemas to compare</param>
      <returns>True/False (if false details in Debug)</returns>
    </member>
    <member name="M:MAT.Extensions.GetAttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
      <summary>
            Gets the value of an attribute
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="attName">An XName that contains the name of the attribute to retrieve.</param>
      <param name="defaultReturn">Default return if the attribute doesn't exist</param>
      <returns>Attribute value or default if attribute doesn't exist</returns>
    </member>
    <member name="M:MAT.Extensions.GetAttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
      <summary>
            Gets the value of an attribute
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="attName">An XName that contains the name of the attribute to retrieve.</param>
      <returns>Attribute value or String.Empty if element doesn't exist</returns>
    </member>
    <member name="M:MAT.Extensions.GetAttributeValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
      <summary>
            Gets the value of an attribute
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="attName">An XName that contains the name of the attribute to retrieve.</param>
      <param name="defaultReturn">Default return if the attribute doesn't exist</param>
      <returns>Attribute value or default if attribute doesn't exist</returns>
    </member>
    <member name="M:MAT.Extensions.GetAttributeValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
      <summary>
            Gets the value of an attribute
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="attName">An XName that contains the name of the attribute to retrieve.</param>
      <returns>Attribute value or default of T if element doesn't exist</returns>
    </member>
    <member name="M:MAT.Extensions.GetElementValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
      <summary>
            Gets the value of a child element.
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="elName">An XName that contains the name of the child element to retrieve.</param>
      <param name="defaultReturn">Default return if the element doesn't exist</param>
      <returns>Element value or default if element doesn't exist</returns>
    </member>
    <member name="M:MAT.Extensions.GetElementValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
      <summary>
            Gets the value of a child element.
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="elName">An XName that contains the name of the child element to retrieve.</param>
      <returns>Element value or String.Empty if element doesn't exist</returns>
    </member>
    <member name="M:MAT.Extensions.GetElementValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
      <summary>
            Gets the value of a child element.
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="elName">An XName that contains the name of the child element to retrieve.</param>
      <param name="defaultReturn">Default return if the element doesn't exist</param>
      <returns>Element value or default if element doesn't exist</returns>
    </member>
    <member name="M:MAT.Extensions.GetElementValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
      <summary>
            Gets the value of a child element.
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="elName">An XName that contains the name of the child element to retrieve.</param>
      <returns>Element value or default of T if element doesn't exist</returns>
    </member>
    <member name="M:MAT.Extensions.RemoveElements(System.Xml.Linq.XElement)">
      <summary>
            Removes all child elements
            </summary>
      <param name="element">Extends this XElement Type</param>
    </member>
    <member name="M:MAT.Extensions.RemoveElements(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
      <summary>
            Removes all child elements matching the XName
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="name">The System.Xml.Linq.XName to match.</param>
    </member>
    <member name="M:MAT.Extensions.HasAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
      <summary>
            Determines if attribute doesn't exist or exists but is empty
            </summary>
      <param name="element">Extends this XElement Type</param>
      <param name="attName">An XName that contains the name of the attribute to retrieve.</param>
      <returns>True if attribute exists and is not empty</returns>
    </member>
    <member name="M:MAT.Extensions.EncodeForXmlAttribute(System.String)">
      <summary>
            Replaces invalid XML characters in a string with their valid XML equivalent.
            </summary>
      <remarks>
            Replaced characters are &lt; to &amp;lt;, &gt; to &amp;gt;, ' to &amp;apos;, " to &amp;quot; and &amp; to &amp;amp;
            </remarks>
      <param name="text">The string within which to escape invalid characters.</param>
      <returns>The input string with invalid characters replaced.</returns>
    </member>
    <member name="M:MAT.Extensions.Clone(System.Xml.Linq.XElement)">
      <summary>
            Creates a copy of the this element.
            </summary>
      <param name="element">Extends this XElement Type</param>
      <returns>Copy of element</returns>
    </member>
    <member name="T:MAT.Server.InfopathAgent.InfopathDriver">
      <summary>
            InfoPath Application driver for simple automation of info path forms.
            </summary>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.#ctor(System.String)">
      <summary>
            Initializes a new instance of the InfopathDriver class.
            </summary>
      <param name="formUri">The form URI.</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the InfopathDriver class.
            </summary>
      <param name="formUri">The form URI.</param>
      <param name="readOnlyMode">if set to <c>true</c> the form is opened in [read only mode].</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.Close">
      <summary>
            Closes this instance and current active working infopathwidnows.
            </summary>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.Close(System.Boolean)">
      <summary>
            Closes the specified force close - in this case, the active infopathwindow.
            </summary>
      <param name="forceClose">if set to true for force close.</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.CloseAndQuit">
      <summary>
            Close all infopath windwows and quit the infopath application.
            </summary>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.Quit">
      <summary>
            Quits this instance.
            </summary>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.Quit(System.Boolean)">
      <summary>
            Quits the specified force quit.
            </summary>
      <param name="forceQuit">if set to <c>true</c> [force quit].</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.LoadInfopathForm(System.String,System.Boolean)">
      <summary>
            load the infopath form.
            </summary>
      <param name="formUri">The form URI.</param>
      <param name="readOnly">if set to <c>true</c> [read only].</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.KillAllInfopathProcesses">
      <summary>
            This method kills all the Infopath application if there is any.
            </summary>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SaveDocument">
      <summary>
            Saves the document.
            </summary>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SaveDocumentAs(System.String)">
      <summary>
            Saves the document as.
            </summary>
      <param name="fileUrl">The file URL.</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SetFormValue(System.String,System.String,System.Boolean)">
      <summary>
            Sets the form value.
            </summary>
      <param name="control">The control.</param>
      <param name="value">The value.</param>
      <param name="removeNilAttribute">if set to <c>true</c> [remove nil attribute].</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SetFormValue(System.String,System.String,System.Int32,System.Boolean)">
      <summary>
            Sets the form value.
            </summary>
      <param name="xPath">The XPath expression.</param>
      <param name="value">The value.</param>
      <param name="index">The index.</param>
      <param name="removeNilAttribute">if set to <c>true</c> [remove nil attribute].</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SetNodeValue(Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode,System.String,System.Boolean)">
      <summary>
            Sets the node value.
            </summary>
      <param name="node">The node.</param>
      <param name="value">The value.</param>
      <param name="removeNilAttribute">if set to <c>true</c> remove nil attribute.</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.GetFormValue(System.String)">
      <summary>
            Gets the form value in the first occurance
            </summary>
      <param name="control">The control, Xpath</param>
      <returns>The text value of the control</returns>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.GetFormValues(System.String)">
      <summary>
            Gets the form values for the given control.
            </summary>
      <param name="xPath">The XPath.</param>
      <returns>An array of values</returns>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.NodeExists(System.String)">
      <summary>
            Gets whether a node exists
            </summary>
      <param name="nodePath">The path to the node</param>
      <returns>Whether or not the node exists</returns>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.GetNodeAttributeValue(System.String,System.String)">
      <summary>
            Return an attribute value of a node with default removeNilAttribute = true
            Have you ever tried to programmatically set a value on a field only to get a “schema validation” error? Many times, this error is caused by the “nillable” attribute being present on the node. The nillable attribute is a special attribute that can appear on an xsd:element within an XML schema. If an element has the xsi:nil attribute specified, it indicates that the element is present but has no value, and therefore no content is associated with it. 
            However, if you attempt to programmatically set a value on this node and the nillable attribute is present, you will get an error similar to: “Schema validation found non-data type errors.” You will find the nillable attribute is typically present on the following data types: 
            To resolve this error, your code will simply need to test if the nil attribute is present and if so, remove that attribute before setting the value on the node. The following sample procedure takes an XpathNavigator object, checks that node for the nil attribute and if it exists deletes the attribute: 
            </summary>
      <param name="nodeName">xpath to the node</param>
      <param name="attributeName">attribute name</param>
      <returns>attribute value for the first occurance</returns>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.GetNodeAttributeValue(System.String,System.String,System.Boolean)">
      <summary>
            Return an attribute value of a node
            </summary>
      <param name="nodeName">xml node (Xpath)</param>
      <param name="attributeName">attribute name</param>
      <param name="removeNilAttribute">if set to <c>true</c> remove nil attribute.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SetNodeAttributeValues(System.String,System.String,System.String)">
      <summary>
            Set attribute value of the xml node instances (could be multiple instances)
            </summary>
      <param name="nodeName">xml node (xpath)</param>
      <param name="attributeName">attribute name</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SetFormValue(System.String,System.String)">
      <summary>
            Sets the form value.
            </summary>
      <param name="control">The control.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SetFormValue(System.String,System.String,System.Int32)">
      <summary>
            Sets the form value.
            </summary>
      <param name="xPath">The xPath.</param>
      <param name="value">The value.</param>
      <param name="index">The index.</param>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SetInfopathNamespace(System.String)">
      <summary>
            Sets the infopath namespace.
            </summary>
      <param name="infopathNamespace">The namespace.</param>
      <remarks>namespace provides a core set of functionality for creating custom business logic in Microsoft Office InfoPath 2007 form templates. When deployed to Microsoft Office Forms Server 2007 or to an appropriately configured document library in Office SharePoint Server 2007, business logic created using this object model will run in both a Web browser and in Office InfoPath 2007. Optionally, you can write business logic that uses an additional level of functionality available from this object model that will run only in form templates opened for editing in Office InfoPath 2007. </remarks>
    </member>
    <member name="M:MAT.Server.InfopathAgent.InfopathDriver.SetProcessIdAndWindowHandle">
      <summary>
            Sets the process id and window handle.
            </summary>
    </member>
    <member name="P:MAT.Server.InfopathAgent.InfopathDriver.CurrentInfopathDocument">
      <summary>
            Get and set the infopath document.  For all other changes to the xmlDomDoc that are not supplied 
            in this class
            </summary>
      <value>The infopath document.</value>
    </member>
    <member name="P:MAT.Server.InfopathAgent.InfopathDriver.CurrentInfopathProcessId">
      <summary>
            Gets the process id.
            </summary>
      <value>The process id.</value>
    </member>
    <member name="P:MAT.Server.InfopathAgent.InfopathDriver.CurrentInfopathApplication">
      <summary>
            Gets the InfopathApplication object.
            </summary>
      <value>the InfopathApplication</value>
    </member>
    <member name="T:MAT.Security.Credentials.PromptChoice">
      <summary>
            Windows form designed for answer a question or a choice selection and returning the results in plain text or as a secure string.
            </summary>
      <summary>
            Windows form designed for answer a question or a choice selection and returning the results in plain text or as a secure string.
            </summary>
    </member>
    <member name="F:MAT.Security.Credentials.PromptChoice.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:MAT.Security.Credentials.PromptChoice.#ctor">
      <summary>
            Windows form designed for answer a question or a choice selection and returning the results in plain text or as a secure string.
            </summary>
      <example>
        <para>Get a secure string</para>
        <code>
            Console.Writeline(PromptChoice.GetAnswer&lt;SecureString&gt;("Get Password", "Password?", "pass"));
            </code>
      </example>
      <example>
        <para>Select from a list</para>
        <code>
            Console.WriteLine(PromptChoice.GetAnswer("Colors", "Select your favorite color", 1, "Blue", "Green", "Yellow", "Red"));
            </code>
      </example>
    </member>
    <member name="M:MAT.Security.Credentials.PromptChoice.#ctor(System.String,System.String,System.Int32,System.String[])">
      <summary>
            Windows form designed for answer a question or a choice selection and returning the results in plain text or as a secure string.
            </summary>
      <param name="caption">Window caption.  If null default is "Request Input"</param>
      <param name="label">Question to appear on form. If null default is "Input:"</param>
      <param name="defaultChoice">Index of default choice (zero based).</param>
      <param name="choices">List of choices</param>
    </member>
    <member name="M:MAT.Security.Credentials.PromptChoice.#ctor(System.String,System.String,System.Boolean,System.String)">
      <summary>
            Windows form designed for answer a question or a choice selection and returning the results in plain text or as a secure string.
            </summary>
      <param name="caption">Window caption.  If null default is "Request Input"</param>
      <param name="label">Question to appear on form. If null default is "Input:"</param>
      <param name="asSecureString">Whether to return answer as secure string with entry box hiding input.</param>
      <param name="defaultText">Default answer. If null default is empty.</param>
    </member>
    <member name="M:MAT.Security.Credentials.PromptChoice.GetAnswer(System.String,System.String,System.Int32,System.String[])">
      <summary>
            Windows form designed for answer a question or a choice selection and returning the results in plain text or as a secure string.
            </summary>
      <param name="caption">Window caption.  If null default is "Request Input"</param>
      <param name="label">Question to appear on form. If null default is "Input:"</param>
      <param name="defaultChoice">Index of default choice (zero based).</param>
      <param name="choices">List of choices</param>
      <returns>Null if canceled; otherwise text of the selected choice.</returns>
    </member>
    <member name="M:MAT.Security.Credentials.PromptChoice.GetAnswer(System.String,System.String,System.String)">
      <summary>
            Windows form designed for answer a question or a choice selection and returning the results in plain text or as a secure string.
            </summary>
      <param name="caption">Window caption.  If null default is "Request Input"</param>
      <param name="label">Question to appear on form. If null default is "Input:"</param>
      <param name="defaultText">Default answer. If null default is empty.</param>
      <returns>Null if canceled; otherwise answer.</returns>
    </member>
    <member name="M:MAT.Security.Credentials.PromptChoice.GetSecureAnswer(System.String,System.String,System.String)">
      <summary>
            Windows form designed for answer a question or a choice selection and returning the results in plain text or as a secure string.
            </summary>
      <param name="caption">Window caption.  If null default is "Request Input"</param>
      <param name="label">Question to appear on form. If null default is "Input:"</param>
      <param name="defaultText">Default answer. If null default is empty.</param>
      <returns>Null if canceled; otherwise a answer.</returns>
    </member>
    <member name="M:MAT.Security.Credentials.PromptChoice.Initialize(System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.String,System.Int32)">
      <summary>
            Initializes form data.
            </summary>
      <param name="caption">Window caption.  If null default is "Request Input"</param>
      <param name="label">Question to appear on form. If null default is "Input:"</param>
      <param name="choices">List of choices</param>
      <param name="AsSecureString">Whether to return answer as secure string with entry box hiding input.</param>
      <param name="defaultText">Default answer. Ignored is choices supplied. If null default is empty.</param>
      <param name="defaultChoice">Index of default choice (zero based). Ignored if choices is null.</param>
    </member>
    <member name="M:MAT.Security.Credentials.PromptChoice.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:MAT.Security.Credentials.PromptChoice.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="P:MAT.Security.Credentials.PromptChoice.Message">
      <summary>
            Message to present
            </summary>
    </member>
    <member name="P:MAT.Security.Credentials.PromptChoice.ChoiceSelected">
      <summary>
            Choices available
            </summary>
    </member>
    <member name="P:MAT.Security.Credentials.PromptChoice.SecureAnswer">
      <summary>
            Secure Answer
            </summary>
    </member>
    <member name="P:MAT.Security.Credentials.PromptChoice.Answer">
      <summary>
            Plaintext Answer
            </summary>
    </member>
    <member name="T:MAT.HttpAnalysis.Request">
      <summary>
            Encapsulates request information object from log entry
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.Request.#ctor(HTTPAnalyzer.IRequest)">
      <summary>
            Saves wrapped object received as parameter
            </summary>
      <param name="baseRequest">Request object</param>
    </member>
    <member name="P:MAT.HttpAnalysis.Request.PostParams">
      <summary>
            Holds a collection of request Post parameters
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Request.QueryParams">
      <summary>
            Holds a collection of request Query Parameters
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Request.Headers">
      <summary>
            Holds a collection of request headers
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Request.Cookies">
      <summary>
            Holds a collection of request cookies as strings
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.CommandLineTypeConverterAttribute">
      <summary>
            The base class for all CommandLineTypeConverter's
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineTypeConverterAttribute.BuildItemList(System.String[],System.String)">
      <summary>
            Builds the item list for parsing.
            </summary>
      <param name="potentialArgs">The potential args.</param>
      <param name="separator">The separator.</param>
      <returns>A list of items to be assigned to collection</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineTypeConverterAttribute.RunConvertersOnPotentialArgs(System.Type,System.String[])">
      <summary>
            Runs the converters on potential args.
            </summary>
      <param name="arrayTypeToRead">The array type to read.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>Conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineTypeConverterAttribute.RunConvertersOnPotentialArgs(System.Type,System.String[],System.String)">
      <summary>
            Runs the converters on potential args.
            </summary>
      <param name="arrayTypeToRead">The array type to read.</param>
      <param name="potentialArgs">The potential args.</param>
      <param name="separator">The separator between items.</param>
      <returns>Conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts to the type of the primitive when overriden.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            Converts to the type of the property when overriden.
            </summary>
      <param name="prop">The property to parse to.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineTypeConverterAttribute.ConvertCollectionToObject(System.Type,System.Collections.ObjectModel.Collection{System.Object})">
      <summary>
            Converts a object list input into a single object of the type contained in prop.
            </summary>
      <param name="typeToRead">The type to convert to.</param>
      <param name="input">The list of object to convert from.</param>
      <returns>An object representing the converted list if successful; otherwise, null.</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineTypeConverterAttribute.IsTypeOfCollection(System.Type)">
      <summary>
            Whether or not the type should be treated as a collection
            </summary>
      <param name="typeToRead">The type to check</param>
      <returns>True if there is a converter that will treat this as a collection; otherwise, false.</returns>
    </member>
    <member name="P:MAT.CommandLineParser.CommandLineTypeConverterAttribute.ExcludeGeneralConversion">
      <summary>
            Gets or sets a value indicating whether [exclude general conversion].
            </summary>
      <value>
        <c>true</c> if [exclude general conversion]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:MAT.CommandLineParser.SecureStringTypeConverterAttribute">
      <summary>
            Converts to SecureString
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.SecureStringTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.SecureStringTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.UriTypeConverterAttribute">
      <summary>
            Converts Uris
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.UriTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.UriTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.BoolTypeConverterAttribute">
      <summary>
            Converts booleans
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.BoolTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="propertyInfo">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.BoolTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.StringTypeConverterAttribute">
      <summary>
            Converts string type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.StringTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.StringTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.EnumTypeConverterAttribute">
      <summary>
            Converts enum type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.EnumTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.EnumTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts to the type of the primitive when overriden.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.IntTypeConverterAttribute">
      <summary>
            Converts int type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.IntTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.IntTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.LongTypeConverterAttribute">
      <summary>
            Converts long type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.LongTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.LongTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.ArrayTypeConverterAttribute">
      <summary>
            Converts array type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ArrayTypeConverterAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.ArrayTypeConverterAttribute" /> class.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ArrayTypeConverterAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.ArrayTypeConverterAttribute" /> class.
            </summary>
      <param name="separator">The separator to use for different items.</param>
    </member>
    <member name="M:MAT.CommandLineParser.ArrayTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="propertyInfo">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.ArrayTypeConverterAttribute.ConvertCollectionToObject(System.Type,System.Collections.ObjectModel.Collection{System.Object})">
      <summary>
            Converts a object list input into a single object of the type contained in prop.
            </summary>
      <param name="typeToRead">The type to convert to.</param>
      <param name="input">The list of object to convert from.</param>
      <returns>
            An object representing the converted list if successful; otherwise, null.
            </returns>
    </member>
    <member name="M:MAT.CommandLineParser.ArrayTypeConverterAttribute.IsTypeOfCollection(System.Type)">
      <summary>
            Whether or not the type should be treated as a collection
            </summary>
      <param name="typeToRead">
      </param>
      <returns>
            True if there is a converter that will treat this as a collection; otherwise, false.
            </returns>
    </member>
    <member name="P:MAT.CommandLineParser.ArrayTypeConverterAttribute.Separator">
      <summary>
            Gets the separator to use for different items.
            </summary>
      <value>The separator to use for different items.</value>
    </member>
    <member name="T:MAT.CommandLineParser.ListTypeConverterAttribute">
      <summary>
            Converts list type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ListTypeConverterAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.ListTypeConverterAttribute" /> class.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ListTypeConverterAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.ListTypeConverterAttribute" /> class.
            </summary>
      <param name="separator">The separator to use for different items.</param>
    </member>
    <member name="M:MAT.CommandLineParser.ListTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.ListTypeConverterAttribute.ConvertCollectionToObject(System.Type,System.Collections.ObjectModel.Collection{System.Object})">
      <summary>
            Converts a object list input into a single object of the type contained in prop.
            </summary>
      <param name="typeToRead">The type to convert to.</param>
      <param name="input">The list of object to convert from.</param>
      <returns>
            An object representing the converted list if successful; otherwise, null.
            </returns>
    </member>
    <member name="M:MAT.CommandLineParser.ListTypeConverterAttribute.IsTypeOfCollection(System.Type)">
      <summary>
            Whether or not the type should be treated as a collection
            </summary>
      <param name="typeToRead">
      </param>
      <returns>
            True if there is a converter that will treat this as a collection; otherwise, false.
            </returns>
    </member>
    <member name="P:MAT.CommandLineParser.ListTypeConverterAttribute.Separator">
      <summary>
            Gets the separator to use for different items.
            </summary>
      <value>The separator.</value>
    </member>
    <member name="T:MAT.CommandLineParser.DictionaryTypeConverterAttribute">
      <summary>
            Converts dictionary type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DictionaryTypeConverterAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.DictionaryTypeConverterAttribute" /> class.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DictionaryTypeConverterAttribute.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.DictionaryTypeConverterAttribute" /> class.
            </summary>
      <param name="separator">The separator to use for different items.</param>
      <param name="keyValuePairSeparator">The key value pair separator.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DictionaryTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.DictionaryTypeConverterAttribute.IsTypeOfCollection(System.Type)">
      <summary>
            Whether or not the type should be treated as a collection
            </summary>
      <param name="typeToRead">
      </param>
      <returns>
            True if there is a converter that will treat this as a collection; otherwise, false.
            </returns>
    </member>
    <member name="M:MAT.CommandLineParser.DictionaryTypeConverterAttribute.ConvertCollectionToObject(System.Type,System.Collections.ObjectModel.Collection{System.Object})">
      <summary>
            Converts a object list input into a single object of the type contained in prop.
            </summary>
      <param name="typeToRead">The type to convert to.</param>
      <param name="input">The list of object to convert from.</param>
      <returns>
            An object representing the converted list if successful; otherwise, null.
            </returns>
    </member>
    <member name="P:MAT.CommandLineParser.DictionaryTypeConverterAttribute.Separator">
      <summary>
            Gets the separator to use for different items.
            </summary>
      <value>The separator.</value>
    </member>
    <member name="P:MAT.CommandLineParser.DictionaryTypeConverterAttribute.KeyValuePairSeparator">
      <summary>
            Gets the key value pair separator.
            </summary>
      <value>The key value pair separator.</value>
    </member>
    <member name="T:MAT.CommandLineParser.NullableTypeConverterAttribute">
      <summary>
            Converts nullable type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.NullableTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="T:MAT.CommandLineParser.XmlDocumentTypeConverterAttribute">
      <summary>
            Converts XmlDocument type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.XmlDocumentTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="T:MAT.CommandLineParser.XDocumentTypeConverterAttribute">
      <summary>
            Converts XDocument type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.XDocumentTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="T:MAT.CommandLineParser.GuidTypeConverterAttribute">
      <summary>
            Converts Guid type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.GuidTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.GuidTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.FileStreamTypeConverterAttribute">
      <summary>
            Converts FileStream type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.FileStreamTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.FileStreamTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.DateTimeTypeConverterAttribute">
      <summary>
            Converts DateTime type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DateTimeTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.DateTimeTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.DoubleTypeConverterAttribute">
      <summary>
            Converts double type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DoubleTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.DoubleTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.FloatTypeConverterAttribute">
      <summary>
            Converts float type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.FloatTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.FloatTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.DecimalTypeConverterAttribute">
      <summary>
            Converts decimal type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DecimalTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.DecimalTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.CommandLineParser.ShortTypeConverterAttribute">
      <summary>
            Converts short type properties
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ShortTypeConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.ShortTypeConverterAttribute.ConvertPrimitiveType(System.Type,System.String)">
      <summary>
            Converts the type of the primitive.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="potentialArg">The potential arg.</param>
      <returns>Results of the conversion</returns>
    </member>
    <member name="T:MAT.BuildTasks.SmtpMail">
      <summary>
            Build task for sending e-mails.
            </summary>
      <remarks>The process that runs this account is the From account and it must have the right to send e-mails.</remarks>
      <example>
        <code>
              &lt;UsingTask TaskName="MAT.BuildTasks.SmtpMail" AssemblyFile="MAT.Core.dll" /&gt;
                &lt;SmtpMail To="$(to)" &lt;!-- Required --&gt; 
                         Body="$(body)" 
                         CC="$(body)" 
                         Bcc="$(body)" 
                         Subject="$(subject)" 
                         HtmlFormat="true" 
                         Attachments="$(file1);$(file2)"
                         Server="$(server)" &lt;
            </code>
      </example>
    </member>
    <member name="M:MAT.BuildTasks.SmtpMail.#ctor">
      <summary>
            Build task for sending e-mails.
            </summary>
      <remarks>The process that runs this account is the From account and it must have the right to send e-mails.</remarks>
    </member>
    <member name="M:MAT.BuildTasks.SmtpMail.Execute">
      <summary>
            Starts the remote execution
            </summary>
      <returns>true is passed; otherwise false.</returns>
    </member>
    <member name="P:MAT.BuildTasks.SmtpMail.Attachments">
      <summary>
            Semicolon separated list of files to attach.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.SmtpMail.HtmlFormat">
      <summary>
            Plain text or HTML format.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.SmtpMail.Server">
      <summary>
            SMTP Server to use.  Defaults to Microsoft standard.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.SmtpMail.To">
      <summary>
            To
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.SmtpMail.From">
      <summary>
            From
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.SmtpMail.Bcc">
      <summary>
            Blind carbon copy
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.SmtpMail.CC">
      <summary>
            Carbon copy
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.SmtpMail.Subject">
      <summary>
            Subject
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.SmtpMail.Body">
      <summary>
            Body
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.ViewTableSchemaCompare.#ctor(MAT.DataCompare.Core.View,MAT.DataCompare.Core.Table)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.ViewSchemaCompare" /> class.
            </summary>
      <param name="sourceView">The source view.</param>
      <param name="destView">The dest view.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.ViewTableSchemaCompare.#ctor(MAT.DataCompare.Core.View,MAT.DataCompare.Core.Table,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.TableSchemaCompare" /> class.
            </summary>
      <param name="sourceView">The source table.</param>
      <param name="destView">The dest table.</param>
      <param name="excludeColumnList">The exclude column list.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.ViewTableSchemaCompare.Compare">
      <summary>
            Compares this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewTableSchemaCompare.ColumnCmpResults">
      <summary>
            Gets the column CMP results.
            </summary>
      <value>The column CMP results.</value>
    </member>
    <member name="M:MAT.DataCompare.Core.FunctionSchemaCompare.#ctor(MAT.DataCompare.Core.Function,MAT.DataCompare.Core.Function)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.ViewSchemaCompare" /> class.
            </summary>
      <param name="sourceFn">The source view.</param>
      <param name="destFn">The dest view.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.FunctionSchemaCompare.#ctor(MAT.DataCompare.Core.Function,MAT.DataCompare.Core.Function,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.TableSchemaCompare" /> class.
            </summary>
      <param name="sourceFn">The source table.</param>
      <param name="destFn">The dest table.</param>
      <param name="excludeColumnList">The exclude column list.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.FunctionSchemaCompare.Compare">
      <summary>
            Compares this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataCompare.Core.FunctionSchemaCompare.ParameterComparisionResults">
      <summary>
            Gets the parameter comparision results.
            </summary>
      <value>The parameter comparision results.</value>
    </member>
    <member name="T:MAT.Verify.InRangeException">
      <summary>
            Exception thrown when a value is unexpectedly not in the given range.
            </summary>
    </member>
    <member name="M:MAT.Verify.InRangeException.#ctor(System.Object,System.Object,System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.InRangeException" /> class.
            </summary>
      <param name="actual">The actual object value</param>
      <param name="low">The low value of the range</param>
      <param name="high">The high value of the range</param>
    </member>
    <member name="M:MAT.Verify.InRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:MAT.Verify.InRangeException.Actual">
      <summary>
            Gets the actual object value
            </summary>
    </member>
    <member name="P:MAT.Verify.InRangeException.High">
      <summary>
            Gets the high value of the range
            </summary>
    </member>
    <member name="P:MAT.Verify.InRangeException.Low">
      <summary>
            Gets the low value of the range
            </summary>
    </member>
    <member name="P:MAT.Verify.InRangeException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
    </member>
    <member name="T:MAT.HttpAnalysis.LogEntry">
      <summary>
            Encapsulates a log entry used by HttpAnalyzer
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.LogEntry.#ctor(HTTPAnalyzer.ILogEntry)">
      <summary>
            Saves wrapped object received as parameter
            </summary>
      <param name="baseObject">Log entry object</param>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.BytesReceived">
      <summary>
            Returns bytes count received from server to client
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.BytesSent">
      <summary>
            Returns bytes count sent from client to server
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.ErrorCode">
      <summary>
            Returns Last error reported by API during HTTP request processing
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.HttpStatusCode">
      <summary>
            Returns code received from webserver
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.IsComplete">
      <summary>
            Returns if request has been completely processed
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.Method">
      <summary>
            Returns "GET" or "POST"
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.ProcessName">
      <summary>
            Returns the process name where the request was captured
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.Request">
      <summary>
            Returns request information
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.Response">
      <summary>
            Returns response information
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.TimeEnd">
      <summary>
            Returns time when request finished
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.TimeStart">
      <summary>
            Returns time when request started
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.LogEntry.Url">
      <summary>
            Returns request URL
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.PipedInfoConverterAttribute">
      <summary>
            Sets the switch value from piped info
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.PipedInfoConverterAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.PipedInfoConverterAttribute" /> class.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.PipedInfoConverterAttribute.#ctor(System.StringSplitOptions,System.String[])">
      <param name="separator">The separator used to split the input into a string array.</param>
      <param name="splitOptions">The string options to use for the split operation.</param>
    </member>
    <member name="M:MAT.CommandLineParser.PipedInfoConverterAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.PipedInfoConverterAttribute.ReadPipedInfo">
      <summary>
            Reads the piped info.
            </summary>
      <returns>StreamReader for text that came off the pipe.</returns>
    </member>
    <member name="M:MAT.CommandLineParser.PipedInfoConverterAttribute.ReadPipedInfo(System.Int32)">
      <summary>
            Reads the piped info.
            </summary>
      <param name="waitTimeInMilliseconds">The wait time in milliseconds.</param>
      <returns>StreamReader for text that came off the pipe.</returns>
    </member>
    <member name="M:MAT.CommandLineParser.PipedInfoConverterAttribute.RunBeforeConversion(System.Reflection.PropertyInfo,System.Boolean)">
      <summary>
            Runs the before conversion.
            </summary>
      <param name="prop">The prop.</param>
      <param name="wasSet">if set to <c>true</c> [was set].</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.CommandLineParser.PipedInfoConverterAttribute.Separator">
      <summary>
            Gets the separator to use between items.
            </summary>
      <value>The separator.</value>
    </member>
    <member name="P:MAT.CommandLineParser.PipedInfoConverterAttribute.SplitOptions">
      <summary>
            Gets the split options that are applied.
            </summary>
      <value>The split options.</value>
    </member>
    <member name="T:MAT.CommandLineParser.FileSystemExpansionResult">
      <summary>
            Specifies which file system types should be returned
            </summary>
    </member>
    <member name="F:MAT.CommandLineParser.FileSystemExpansionResult.None">
      <summary>
            Default value.  Meaningless.
            </summary>
    </member>
    <member name="F:MAT.CommandLineParser.FileSystemExpansionResult.FilesOnly">
      <summary>
            Only retreive matching files
            </summary>
    </member>
    <member name="F:MAT.CommandLineParser.FileSystemExpansionResult.DirectoriesOnly">
      <summary>
            Only retreive matching directories
            </summary>
    </member>
    <member name="F:MAT.CommandLineParser.FileSystemExpansionResult.FilesAndDirectories">
      <summary>
            Retreive all matching object, both directories and files
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.ExpandFilePatternAttribute">
      <summary>
            Expands any file patterns (e.g. *.txt) to all the items that match that pattern
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ExpandFilePatternAttribute.#ctor">
      <summary>
            Defaults to non-recursive, file-only, one pattern, expand environmental variables
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ExpandFilePatternAttribute.#ctor(System.Boolean,MAT.CommandLineParser.FileSystemExpansionResult,System.Boolean,System.String,System.Boolean,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.ExpandFilePatternAttribute" /> class.
            </summary>
      <param name="searchRecursively">Search recursively</param>
      <param name="directoryHandling">Search for files, directories, or both</param>
      <param name="allowMultiplePatterns">Should users be able to send in multiple patterns (e.g. *.txt,*.dll)</param>
      <param name="separator">The file pattern separator, if multiple patterns are okay</param>
      <param name="expandEnvironmentalVariables">if set to <c>true</c> expand environmental variables before applying patterns.</param>
      <param name="defaultPatterns">The default patterns.</param>
    </member>
    <member name="M:MAT.CommandLineParser.ExpandFilePatternAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="P:MAT.CommandLineParser.ExpandFilePatternAttribute.SearchRecursively">
      <summary>
            Gets a value indicating whether or not to search recursively.
            </summary>
      <value>
        <c>true</c> if [search recursively]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ExpandFilePatternAttribute.DirectoryHandling">
      <summary>
            Gets directory handling whether or not to return matching directories or not.
            </summary>
      <value>The directory handling.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ExpandFilePatternAttribute.AllowMultiplePatterns">
      <summary>
            Gets or sets a value indicating whether [allow multiple patterns].
            </summary>
      <value>
        <c>true</c> if [allow multiple patterns]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:MAT.CommandLineParser.ExpandFilePatternAttribute.Separator">
      <summary>
            Gets the separator for patterns and file paths.
            </summary>
      <value>The separator.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ExpandFilePatternAttribute.ExpandEnvironmentalVariables">
      <summary>
            Gets a value indicating whether or not to expand environmental variables before applying patterns.
            </summary>
      <value>
        <c>true</c> if [expand environmental variables]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:MAT.CommandLineParser.ExpandFilePatternAttribute.DefaultPatterns">
      <summary>
            Gets the default patterns.
            </summary>
      <value>The default patterns.</value>
    </member>
    <member name="T:MAT.CommandLineParser.IgnoreIfEmptyAttribute">
      <summary>
            Doesn't write to the property if the input is an empty string.  This is useful for setting default arguments a class constructor that you don't want overriden with an empty string.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.IgnoreIfEmptyAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="T:MAT.CommandLineParser.DefaultFileNameFromPathAttribute">
      <summary>
            Allows the default path for a file or directory to be set.  Attempt to make accurate guess about what the user would want, for example:
            1. If the developer provides a default directory and file name and the user leaves this field empty, then it will use the default directory and file name
            2. If the developer provides a default file name and the user provides only a directory, then it will combine the default file name with the user supplied directory
            3. If the developer provides a file name and the user only provides a word, then it will extract the extension and apply it to the word to create a file name (unless the word is a file found on disk, in which case it is preserved)
            4. If the developer provides a directory and the user provides a file name, then it will combine into a path
            5. If the user provides a directory and a file name those will override the developer's settings
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.DefaultFileNameFromPathAttribute" /> class.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.DefaultFileNameFromPathAttribute" /> class.
            </summary>
      <param name="defaultFilePath">The default file path (directory\path).</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.DefaultFileNameFromPathAttribute" /> class.
            </summary>
      <param name="defaultDirectory">The default directory.</param>
      <param name="defaultFileName">The default name of the file.</param>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.ApplyDefault(System.Reflection.PropertyInfo)">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.ConvertType(System.Reflection.PropertyInfo,System.String[])">
      <summary>
            For internal use.
            </summary>
      <param name="prop">The property to parse into.</param>
      <param name="potentialArgs">The potential args.</param>
      <returns>The conversion results</returns>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.GetDefaultForDisplay">
      <summary>
            For internal use.
            </summary>
      <returns>Gets the displayable default</returns>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.CombinePaths(System.String,System.String)">
      <summary>
            Combines two paths, but preserves a trailing space for normal directory form
            </summary>
      <param name="path1">first part of the path</param>
      <param name="path2">secibd part of the path</param>
      <returns>combined path as a string</returns>
    </member>
    <member name="M:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.IsPathInvalid(System.String)">
      <summary>
            Tests the path for invalid characters expands the path, tests for invalid characters again
            </summary>
      <param name="path">Un-expanded path to check</param>
      <returns>Whether the path contains invalid characters</returns>
    </member>
    <member name="P:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.DefaultDirectory">
      <summary>
            Gets the default directory.
            </summary>
      <value>The default directory.</value>
    </member>
    <member name="P:MAT.CommandLineParser.DefaultFileNameFromPathAttribute.DefaultFileName">
      <summary>
            Gets the default name of the file.
            </summary>
      <value>The default name of the file.</value>
    </member>
    <member name="T:MAT.CommandLineParser.CommandLineParserBase">
      <summary>
            The class from which your configuration class must directly/indirectly inherit.  ShowError, PrintHelp and PrintUsage can be overriden to alter the standard functionality.  AfterValidateProperty and AfterSuccessfulRead can be overriden to alter normal logic flow.
            Additional documentation at http://vstfmscom/sites/MSCOMi/MAT/Home.aspx
            </summary>
    </member>
    <member name="F:MAT.CommandLineParser.CommandLineParserBase.unmappedSwitches">
      <summary>
            All unmapped switches, unless ForceUnknownTokenCheckAttribute is specified.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.Parse">
      <summary>
            Reads an instance of the descendant of CommandLineParserBase.
            Uses args from program execution.
            On failure, returns with error code 1.
            </summary>
      <returns>An instance of T that has been read</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.Parse(System.Int32)">
      <summary>
            Reads an instance of the descendant of CommandLineParserBase.
            Uses args from program execution.
            On failure, returns with the specified error code.
            </summary>
      <param name="exitCode">The error code to return on failure</param>
      <returns>An instance of T that has been read</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.Parse(System.String[])">
      <summary>
            Reads an instance of the descendant of CommandLineParserBase.
            Uses args (from "void Main(string[] args)") as input.
            On failure, returns with error code 1.
            </summary>
      <param name="args">Args list passed in from Main(string[] args)</param>
      <returns>An instance of T that has been read</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.Parse(System.String[],System.Int32)">
      <summary>
            Reads an instance of the descendant of CommandLineParserBase.
            Uses args (from "void Main(string[] args)") as input.
            On failure, returns with the specified error code.
            </summary>
      <param name="args">Args list passed in from Main(string[] args)</param>
      <param name="exitCode">The error code to return on failure</param>
      <returns>An instance of T that has been read</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.Parse``1">
      <summary>
            Reads an instance of the descendant of CommandLineParserBase.
            Uses args from program execution.
            On failure, returns with error code 1.
            </summary>
      <returns>An instance of T that has been read</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.Parse``1(System.Int32)">
      <summary>
            Reads an instance of the descendant of CommandLineParserBase.
            Uses args from program execution.
            On failure, returns with the specified error code.
            </summary>
      <param name="exitCode">The error code to return on failure</param>
      <returns>An instance of T that has been read</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.Parse``1(System.String[])">
      <summary>
            Reads an instance of the descendant of CommandLineParserBase.
            Uses args (from "void Main(string[] args)") as input.
            On failure, returns with error code 1.
            </summary>
      <param name="args">Args list passed in from Main(string[] args)</param>
      <returns>An instance of T that has been read</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.Parse``1(System.String[],System.Int32)">
      <summary>
            Reads an instance of the descendant of CommandLineParserBase.
            Uses args (from "void Main(string[] args)") as input.
            On failure, returns with the specified error code.
            </summary>
      <param name="args">Args list passed in from Main(string[] args)</param>
      <param name="exitCode">The error code to return on failure</param>
      <returns>An instance of T that has been read</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.TryRead``1(``0@)">
      <summary>
            Reads command line parameters into the properties of this class (excluding any that have the Ignore attribute applied).  On failure, print the usage of the application.  Returns whether or not the read action succeeded.  The arguments are read directly from the application command line.
            </summary>
      <param name="result">The CommandLineParserBase descendant that was parsed into.</param>
      <returns>Returns whether or not the read action succeeded.</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.TryParse``1(System.Boolean,``0@)">
      <summary>
            Reads command line parameters into the properties of this class (excluding any that have the Ignore attribute applied).  On failure, print the usage of the application.  Returns whether or not the read action succeeded.  The arguments are read directly from the application command line.
            </summary>
      <param name="result">The CommandLineParserBase descendant that was parsed into.</param>
      <param name="allowCmdLineOutput">Controls whether the parser can write to the console.</param>
      <returns>Returns whether or not the read action succeeded.</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.TryParse``1(System.String[],``0@)">
      <summary>
            Reads command line parameters into the properties of this class (excluding any that have the Ignore attribute applied).  On failure, print the usage of the application.  Returns whether or not the read action succeeded.
            </summary>
      <param name="args">The command line arguments, the string array passed into the Main() of a program.</param>
      <param name="result">The CommandLineParserBase descendant that was parsed into.</param>
      <returns>Returns whether or not the read action succeeded.</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.TryParse``1">
      <summary>
            Reads command line parameters into the properties of this class (excluding any that have the Ignore attribute applied).  On failure, print the usage of the application.  Returns whether or not the read action succeeded.
            </summary>
      <returns>Returns whether or not the read action succeeded.</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.TryParse``1(System.String[],System.Boolean,``0@)">
      <summary>
            Attempts to read the command line parameters into the properties of this class (excluding any that have the Ignore attribute applied).  
            On failure, print the usage of the application if printUsageOnFail is true, otherwise fail silently.  
            Returns whether or not the read action succeeded.
            </summary>
      <param name="args">The command line arguments, the string array passed into the Main() of a program.</param>
      <param name="allowCmdLineOutput">Controls whether the parser can write to the console.</param>
      <param name="result">The CommandLineParserBase descendant that was parsed into.</param>
      <returns>Returns whether or not the read action succeeded.</returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.BeforePropertyValidate(MAT.CommandLineParser.ValidateArgs)">
      <summary>
            Called before each property validates.
            </summary>
      <param name="validateArgs">The validate args.</param>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.AfterPropertyValidate(MAT.CommandLineParser.ValidateArgs)">
      <summary>
            Called after each property validates.
            </summary>
      <param name="validateArgs">The validate args.</param>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.AfterSuccessfulRead">
      <summary>
            Called after a successful read finishes.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.PrintHelp">
      <summary>
            Prints the help.  Called when /help or /? is passed as the only argument.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.IsTypeOfCollection(System.Type)">
      <summary>
            Determines whether is type of collection the specified type to read.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <returns>
        <c>true</c> if is type of collection the specified type to read; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.ConvertCollectionToObject(System.Type,System.Collections.ObjectModel.Collection{System.Object})">
      <summary>
            Converts the collection to object.
            </summary>
      <param name="typeToRead">The type to read.</param>
      <param name="input">The input.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.PrintUsage">
      <summary>
            Prints the usage.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.ShowError(System.Exception)">
      <summary>
            Shows the error.
            </summary>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.WriteMessage">
      <summary>
            Writes a message to the appropriate notification streams.  If AllowCommandLineOutput is false this will write to the console.  This always writes to the Messages property.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.WriteMessage(System.String)">
      <summary>
            Writes a message to the appropriate notification streams.  If AllowCommandLineOutput is false this will write to the console.  This always writes to the Messages property.
            </summary>
      <param name="message">The message to write.</param>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserBase.ParseAsArgs(System.String,System.Boolean)">
      <summary>
            Parses a string as args.  Unlike standard .NET command line
            parsing there will be no escaped quotes but instead 2 quotes
            will be the escape.  This matches cmd.exe and makes it much easier
            to pass in a quoted path that ends with a backslash.
            </summary>
      <param name="cmdLine">The CMD line.</param>
      <returns>Argument list</returns>
      <remarks>First item will be removed if it matches the executing assembly.</remarks>
    </member>
    <member name="P:MAT.CommandLineParser.CommandLineParserBase.AllowCommandLineOutput">
      <summary>
            Whether or not the CommandLineParser should write to the console or not.
            </summary>
    </member>
    <member name="P:MAT.CommandLineParser.CommandLineParserBase.Messages">
      <summary>
            Gets the messages from parsing.
            </summary>
      <value>The messages from parsing.</value>
    </member>
    <member name="P:MAT.CommandLineParser.CommandLineParserBase.DefinedSwitches">
      <summary>
            All switches that were defined during the read process.
            </summary>
    </member>
    <member name="P:MAT.CommandLineParser.CommandLineParserBase.UnmappedSwitches">
      <summary>
            All unmapped switches, unless ForceUnknownTokenCheckAttribute is specified.
            </summary>
    </member>
    <member name="P:MAT.CommandLineParser.CommandLineParserBase.TypeConverters">
      <summary>
            Controls which type converters are considered global.
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.CommandLineParserDesignException">
      <summary>
            Exception that is thrown when an invalid configuration of validators or converters are encountered.  If this exception is thrown, the class will never be parsable.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserDesignException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.CommandLineParserDesignException" /> class.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserDesignException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.CommandLineParserDesignException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserDesignException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.CommandLineParserDesignException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserDesignException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.CommandLineParserDesignException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:MAT.CommandLineParser.CommandLineParserParseFailed">
      <summary>
            Thrown when the program would normally exit.  This is done so that testing can be performed inside of Visual Studio without having the test case runner Abort unexpectedly.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserParseFailed.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.CommandLineParserParseFailed" /> class.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserParseFailed.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.CommandLineParserParseFailed" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserParseFailed.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.CommandLineParserParseFailed" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:MAT.CommandLineParser.CommandLineParserParseFailed.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.CommandLineParserParseFailed" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:MAT.CommandLineParser.CommandLineParserRuntimeException">
      <summary>
            Thrown/handled internally when the CommandLineParser is unable to obtain a value for a field, conversion fails, etc.
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.ValidateArgs">
      <summary>
            Passed to the AfterPropertyValidate virtual when validating a property completes.
            </summary>
    </member>
    <member name="P:MAT.CommandLineParser.ValidateArgs.Property">
      <summary>
            Gets the property that was validated.
            </summary>
      <value>The property that was validated.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ValidateArgs.SwitchName">
      <summary>
            Gets the name of the switch that was validated.
            </summary>
      <value>The name of the switch that was validated.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ValidateArgs.Value">
      <summary>
            Gets or sets the value of the validated property.
            </summary>
      <value>The value of the validated property.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ValidateArgs.ValidatedSwitches">
      <summary>
            Gets a list of switches that have been validated.
            </summary>
      <value>A list of switches that have been validated.</value>
    </member>
    <member name="T:MAT.DataCompare.Core.ParameterCollection">
      <summary>
            Collection of stored procedure parameter
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.DatabaseCompareResults.AssertSchemaMatched(System.String,System.String)">
      <summary>
            Asserts the schema matched.
            </summary>
      <param name="excludeTables">The exclude tables. eg: "table1" or "table1, table2"</param>
      <param name="includeTables">The exclude tables. eg: "table1" or "table1, table2"</param>
    </member>
    <member name="M:MAT.DataCompare.Core.DatabaseCompareResults.AssertSchemaMatchedWithOnlyFailedResults(System.String,System.String)">
      <summary>
            Asserts the schema matched with only failed results.
            </summary>
      <param name="excludeTables">The exclude tables. eg: "table1" or "table1, table2"</param>
      <param name="includeTables">The exclude tables. eg: "table1" or "table1, table2"</param>
    </member>
    <member name="T:MAT.Server.Remote">
      <summary>
            Remotely executes code on another machine
            </summary>
    </member>
    <member name="M:MAT.Server.Remote.#ctor">
      <summary>
            Remotely executes code on another machine
            </summary>
    </member>
    <member name="M:MAT.Server.Remote.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:MAT.Server.Remote.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:MAT.Server.Remote.ExecCmdLine(System.String)">
      <summary>
            Executes code on local machine
            </summary>
      <param name="cmdLineCode">Standard line that would be run from command line</param>
      <returns>Console output</returns>
    </member>
    <member name="M:MAT.Server.Remote.ExecCmdLine(System.String,System.String)">
      <summary>
            Remotely executes code on another machine
            </summary>
      <param name="remoteMachine">Machine name or IP address</param>
      <param name="cmdLineCode">Standard line that would be run from command line</param>
      <returns>Console output</returns>
    </member>
    <member name="M:MAT.Server.Remote.Exec(System.String,System.String,System.String,System.Boolean,System.String[])">
      <summary>
            Remotely executes code on another machine
            </summary>
      <param name="remoteMachine">Machine name or IP address</param>
      <param name="executable">Path to the executable</param>
      <param name="args">Command line params</param>
      <param name="copyExecutable">Copy executable to server before running (will delete file after running)</param>
      <param name="additionalFiles">Addition files to be copied with executable; For pdb, config and reference files</param>
      <exception cref="T:MAT.Server.ServerNotFoundException">Error occurs if Remote execution can not access requested server</exception>
      <returns>Console output</returns>
    </member>
    <member name="M:MAT.Server.Remote.Exec(System.String,System.String)">
      <summary>
            Remotely executes code on the local machine
            </summary>
      <param name="executable">Path to the executable</param>
      <param name="args">Command line params</param>
      <exception cref="T:MAT.Server.ServerNotFoundException">Error occurs if Remote execution can not access requested server</exception>
      <returns>Console output</returns>
    </member>
    <member name="M:MAT.Server.Remote.ExecuteCmdLine(System.String,System.String)">
      <summary>
            Remotely executes code on another machine
            </summary>
      <param name="remoteMachine">Machine name or IP address</param>
      <param name="cmdLineCode">Standard line that would be run from command line</param>
      <returns>Executable exit code</returns>
    </member>
    <member name="M:MAT.Server.Remote.ExecuteCmdLine(System.String)">
      <summary>
            Executes code on local machine
            </summary>
      <param name="cmdLineCode">Standard line that would be run from command line</param>
      <returns>Executable exit code</returns>
    </member>
    <member name="M:MAT.Server.Remote.Execute(System.String,System.String,System.String)">
      <summary>
            Remotely executes code on another machine
            </summary>
      <param name="remoteMachine">Machine name or IP address</param>
      <param name="executable">Path to the executable</param>
      <param name="args">Command line params</param>
      <returns>Executable exit code</returns>
    </member>
    <member name="M:MAT.Server.Remote.Execute(System.String,System.String)">
      <summary>
            Remotely executes code on another machine
            </summary>
      <param name="remoteMachine">Machine name or IP address</param>
      <param name="executable">Path to the executable</param>
      <returns>Executable exit code</returns>
    </member>
    <member name="M:MAT.Server.Remote.Execute(System.String)">
      <summary>
            Remotely executes code on the local machine
            </summary>
      <param name="executable">Path to the executable</param>
      <returns>Executable exit code</returns>
    </member>
    <member name="M:MAT.Server.Remote.Execute(System.String,System.String,System.Boolean,System.String[])">
      <summary>
            Remotely executes code on another machine
            </summary>
      <param name="executable">Path to the executable</param>
      <param name="args">Command line params</param>
      <param name="copyExecutable">Copy executable to server before running (will delete file after running)</param>
      <param name="additionalFiles">Addition files to be copied with executable; For pdb, config and reference files</param>
      <exception cref="T:MAT.Server.ServerNotFoundException">Error occurs if Remote execution can not access requested server</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access Exeception; May be related to VPN.</exception>
      <returns>Executable exit code</returns>
    </member>
    <member name="M:MAT.Server.Remote.Execute(System.String,System.String,System.String,System.Boolean,System.String[])">
      <summary>
            Remotely executes code on another machine
            </summary>
      <param name="remoteMachine">Machine name or IP address</param>
      <param name="executable">Path to the executable</param>
      <param name="args">Command line params</param>
      <param name="copyExecutable">Copy executable to server before running (will delete file after running)</param>
      <param name="additionalFiles">Addition files to be copied with executable; For pdb, config and reference files</param>
      <exception cref="T:MAT.Server.ServerNotFoundException">Error occurs if Remote execution can not access requested server</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access Exeception; May be related to VPN.</exception>
      <returns>Executable exit code</returns>
    </member>
    <member name="M:MAT.Server.Remote.CopyFileToServer(System.String,System.String,System.String@)">
      <summary>
            Copies a file from local to remote machine temp folder.
            </summary>
      <param name="serverName">Server to copy to</param>
      <param name="localFilePath">Source file</param>
      <param name="serverTempLocal">[ref] Temp path in local format</param>
      <exception cref="T:System.ArgumentException">Error reading tmp path results</exception>
      <exception cref="T:System.IO.PathTooLongException">Error reading tmp path results</exception>
      <exception cref="T:MAT.Server.ServerNotFoundException">Server not found</exception>
      <returns>Temp path in UNC format</returns>
    </member>
    <member name="M:MAT.Server.Remote.ConvertPathToUnc(System.String,System.String)">
      <summary>
            Converts a local path to a UNC available path assuming that C$, D$, etc... are available.
            </summary>
    </member>
    <member name="M:MAT.Server.Remote.IsServerLocalMachine(System.String)">
      <summary>
            Determines if the serverName refers to the local box
            </summary>
      <param name="serverName">Server name or IP</param>
      <returns>true if local</returns>
    </member>
    <member name="M:MAT.Server.Remote.ClearResults">
      <summary>
            Clears results string
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.Results">
      <summary>
            All results from last command run
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.ErrorResults">
      <summary>
            On error results from last command run
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.OutResults">
      <summary>
            Only standard output results from last command run
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.OperationsWorkbenchIntermediaryServer">
      <summary>
            Should only be used if you have a compelling reason to change which service requests the password.
            Default is set in the MAT.Core.dll.config
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.RunAsAdmin">
      <summary>
            Use RunAs admin (which will force a dialog) as long as this is running on the local machine,
            dialogs are allowed (running in interactive mode) and the user has Limited or lower priviledges.
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.UseRE">
      <summary>
            Gets or sets a value indicating whether RE.EXE or PSExec.EXE.
            </summary>
      <value>
        <c>true</c> if RE.EXE; otherwise, <c>false</c> if PSExec.EXE.</value>
    </member>
    <member name="P:MAT.Server.Remote.UserName">
      <summary>
            Specify the user account name for the remote process
            execute context.  When used with UseSystemAccount, username 
            and password are used to connect to the remote machine,
            but the process executes in SYSTEM account
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.Password">
      <summary>
            Specify the user account name for the remote process
            execute context.  When used with UseSystemAccount, username 
            and password are used to connect to the remote machine,
            but the process executes in SYSTEM account
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.UseSystemAccount">
      <summary>
            Run the remote process in SYSTEM account
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.TimeOut">
      <summary>
            Time out for executable to finish (default 10 minutes)
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.InteractiveMode">
      <summary>
            Use desktop if session is on
            </summary>
    </member>
    <member name="P:MAT.Server.Remote.RemoteServerPath">
      <summary>
            Path to where the executable and aditional files will be copied
            </summary>
    </member>
    <member name="E:MAT.Server.Remote.Message">
      <summary>
            Message event handler 
            </summary>
    </member>
    <member name="T:MAT.Server.ServerNotFoundException">
      <summary>
            Error occurs if execution can not access requested server
            </summary>
    </member>
    <member name="M:MAT.Server.ServerNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.ServerNotFoundException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:MAT.Server.ServerNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.ServerNotFoundException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:MAT.Server.ServerNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.ServerNotFoundException" /> class.
            </summary>
    </member>
    <member name="M:MAT.Server.ServerNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.ServerNotFoundException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:MAT.Server.ServerNotFoundException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.ServerNotFoundException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="server">The server.</param>
    </member>
    <member name="M:MAT.Server.ServerNotFoundException.#ctor(System.String[],System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.ServerNotFoundException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="server">The server.</param>
    </member>
    <member name="M:MAT.Server.ServerNotFoundException.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:MAT.Server.ServerNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).
            </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:MAT.Server.ServerNotFoundException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="P:MAT.Server.ServerNotFoundException.Messages">
      <summary>
            Gets the messages.
            </summary>
      <value>The messages.</value>
    </member>
    <member name="P:MAT.Server.ServerNotFoundException.Server">
      <summary>
            Gets the server.
            </summary>
      <value>The server.</value>
    </member>
    <member name="T:MAT.Server.MessageEventArgs">
      <summary>
            Message event args
            </summary>
    </member>
    <member name="M:MAT.Server.MessageEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.MessageEventArgs" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:MAT.Server.MessageEventArgs.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Server.MessageEventArgs" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="error">if set to <c>true</c> this message is from the error output stream.</param>
    </member>
    <member name="P:MAT.Server.MessageEventArgs.Message">
      <summary>
            Gets the message.
            </summary>
      <value>The message.</value>
    </member>
    <member name="P:MAT.Server.MessageEventArgs.Error">
      <summary>
            Gets a value indicating whether this <see cref="T:MAT.Server.MessageEventArgs" /> is error.
            </summary>
      <value>
        <c>true</c> if error; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.Security.Elevation">
      <summary>
            Methods related to determining the elevation level of the current process.
            </summary>
    </member>
    <member name="M:MAT.Security.Elevation.IsElevated">
      <summary>
            The possible values are:
            TRUE - the current process is elevated.
            	This value indicates that either UAC is enabled, and the process was elevated by 
            	the administrator, or that UAC is disabled and the process was started by a user 
            	who is a member of the Administrators group.
            FALSE - the current process is not elevated (limited).
            	This value indicates that either UAC is enabled, and the process was started normally, 
            	without the elevation, or that UAC is disabled and the process was started by a standard user. 
             </summary>
      <returns>Bool indicating whether the current process is elevated</returns>
    </member>
    <member name="P:MAT.Security.Elevation.ElevationLevel">
      <summary>
             TokenElevationTypeDefault - User is not using a "split" token. 
            This value indicates that either UAC is disabled, or the process is started
            by a standard user (not a member of the Administrators group).
            The following two values can be returned only if both the UAC is enabled and
            the user is a member of the Administrator's group (that is, the user has a "split" token):
            TokenElevationTypeFull - the process is running elevated. 
            TokenElevationTypeLimited - the process is not running elevated.
             </summary>
      <returns>TokenElevationType</returns>
    </member>
    <member name="T:MAT.Security.ElevationType">
      <summary>
            The TOKEN_ELEVATION_TYPE enumeration indicates the elevation type of token being queried by the GetTokenInformation function or set by the SetTokenInformation function.
            </summary>
    </member>
    <member name="F:MAT.Security.ElevationType.Default">
      <summary>
            The token does not have a linked token.
            </summary>
    </member>
    <member name="F:MAT.Security.ElevationType.Full">
      <summary>
            The token is an elevated token.
            </summary>
    </member>
    <member name="F:MAT.Security.ElevationType.Limited">
      <summary>
            The token is a limited token.
            </summary>
    </member>
    <member name="T:MAT.Security.ElevationException">
      <summary>
            Error message appearing during check for application elevation level
            </summary>
    </member>
    <member name="M:MAT.Security.ElevationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Error message appearing during check for application elevation level
            </summary>
    </member>
    <member name="M:MAT.Security.ElevationException.#ctor">
      <summary>
            Error message appearing during check for application elevation level
            </summary>
    </member>
    <member name="M:MAT.Security.ElevationException.#ctor(System.String)">
      <summary>
            Error message appearing during check for application elevation level
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:MAT.Security.ElevationException.#ctor(System.String,System.Exception)">
      <summary>
            Error message appearing during check for application elevation level
            </summary>
      <param name="message">The error message.</param>
      <param name="inner">The message that caused this message to appear.</param>
    </member>
    <member name="T:MAT.DataCompare.Core.mapCollection">
      <summary>
            structure to prepare database vs database map
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.mapCollection.source">
      <summary>
            Gets or sets the source.
            </summary>
      <value>The source.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.mapCollection.destination">
      <summary>
            Gets or sets the destination.
            </summary>
      <value>The destination.</value>
    </member>
    <member name="M:MAT.DataCompare.Core.ViewSchemaCompare.#ctor(MAT.DataCompare.Core.View,MAT.DataCompare.Core.View)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.ViewSchemaCompare" /> class.
            </summary>
      <param name="sourceView">The source view.</param>
      <param name="destView">The dest view.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.ViewSchemaCompare.#ctor(MAT.DataCompare.Core.View,MAT.DataCompare.Core.View,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.TableSchemaCompare" /> class.
            </summary>
      <param name="sourceView">The source table.</param>
      <param name="destView">The dest table.</param>
      <param name="excludeColumnList">The exclude column list.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.ViewSchemaCompare.Compare">
      <summary>
            Compares this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewSchemaCompare.ColumnCmpResults">
      <summary>
            Gets the column CMP results.
            </summary>
      <value>The column CMP results.</value>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.noFilterApplied">
      <summary>
            By default no filter is applied 
            value = true 
            Once any filter applied this 
            value will change to false
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.dataType">
      <summary>
            no filter  = false 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.isLength">
      <summary>
            no filter  = false 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.isPrimary">
      <summary>
            no filter  = false 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.isClustered">
      <summary>
            TODO :
            no filter  = false 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.isNonClustered">
      <summary>
            TODO : 
            no filter  = false 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.isForeignKeys">
      <summary>
            TODO: 
            no filter  = false 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.isCollation">
      <summary>
            no filter  = false 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.isIndexed">
      <summary>
            TODO: Indexes need to be implemented. 
            no filter  = false 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.allDatabaseObjects">
      <summary>
            Default value is to compare entire database 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaCompareFilters.isNull">
      <summary>
            default value for filter = true 
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsIndexed">
      <summary>
            Gets or sets the indexe validation
            </summary>
      <value>The indexes.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsNull">
      <summary>
            Gets or sets the is null.
            </summary>
      <value>The is null.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsDataType">
      <summary>
            Gets or sets the type of the is data.
            </summary>
      <value>The type of the is data.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsLength">
      <summary>
            Gets or sets the length of the is.
            </summary>
      <value>The length of the is.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsPrimary">
      <summary>
            Gets or sets the is primary.
            </summary>
      <value>The is primary.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsClustered">
      <summary>
            Gets or sets the is clustered.
            </summary>
      <value>The is clustered.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsNonClustered">
      <summary>
            TODO : Need to implement
            Gets or sets the is non clustered.
            </summary>
      <value>The is non clustered.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsForeignKeys">
      <summary>
            TODO : Need to implement
            Gets or sets the is foreign keys.
            </summary>
      <value>The is foreign keys.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsPrecision">
      <summary>
            Gets or sets the is precision.
            </summary>
      <value>The is precision.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsScale">
      <summary>
            Gets or sets the is scale.
            </summary>
      <value>The is scale.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsCollation">
      <summary>
            TODO : Need to implement
            Gets or sets the collation.
            </summary>
      <value>The collation.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.AllDatabaseObjects">
      <summary>
            Gets or sets all database objects.
            </summary>
      <value>All database objects.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsStoredProcedures">
      <summary>
            Gets or sets the is stored procedures.
            </summary>
      <value>The is stored procedures.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsFunctions">
      <summary>
            Gets or sets the is functions.
            </summary>
      <value>The is functions.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsViews">
      <summary>
            Gets or sets the is views.
            </summary>
      <value>The is views.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.IsTables">
      <summary>
            Gets or sets the is tables.
            </summary>
      <value>The is tables.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareFilters.NoFilterApplied">
      <summary>
            Gets or sets the no filter applied.
            </summary>
      <value>The no filter applied.</value>
    </member>
    <member name="T:MAT.TestCaseHelper">
      <summary>
            Class extensions for the TestContext
            </summary>
    </member>
    <member name="T:MAT.TestCaseHelper.TestInfo">
      <summary>
            TestInfo
            </summary>
    </member>
    <member name="P:MAT.TestCaseHelper.TestInfo.TestName">
      <summary>
            Gets or sets the name of the test.
            </summary>
      <value>The name of the test.</value>
    </member>
    <member name="P:MAT.TestCaseHelper.TestInfo.TestOutcome">
      <summary>
            Gets or sets the test outcome.
            </summary>
      <value>The test outcome.</value>
    </member>
    <member name="P:MAT.TestCaseHelper.TestInfo.ReliesOnTest">
      <summary>
            Gets or sets a value indicating whether [relies on test].
            </summary>
      <value>
        <c>true</c> if [relies on test]; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:MAT.TestCaseHelper.UpdateTestResults(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext,System.Object)">
      <summary>
            Updates the test results.  Usually this exists in the TestCleanup class and is written as:
            TestContext.UpdateTestResults(this);
            </summary>
      <param name="testContext">The current testContext.</param>
      <param name="testClass">The current class.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.TestCaseHelper.TestResults(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext,System.Object)">
      <summary>
            List the tests that have 
            </summary>
      <param name="testContext">The current testContext.</param>
      <param name="testClass">The current class.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.TestCaseHelper.RunReliesOnTests(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext,System.Object)">
      <summary>
            Runs the relies on tests.
            </summary>
      <remarks>This is normally run automatically with the <see cref="T:MAT.ReliesOnAttribute" /></remarks>
      <param name="testContext">The current testContext.</param>
      <param name="testClass">The current class.</param>
    </member>
    <member name="T:MAT.ReliesOnAttribute">
      <summary>
            ReliesOn Attribute is used to specificy any tests or functions in the containing class that
            need to be run for the current test.  It will see if these tests or function have run  and
            run them if they haven't.  If any test has failed then an AssertInconclusive will be thrown.
            </summary>
      <remarks>TestContext.UpdateTestResults(this) must be added to the TestCleanup for the ReliesOn to maintain history of previously run tests.</remarks>
    </member>
    <member name="M:MAT.ReliesOnAttribute.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.ReliesOnAttribute" /> class.
            </summary>
      <param name="testCases">The test cases.</param>
    </member>
    <member name="P:MAT.ReliesOnAttribute.TestCases">
      <summary>
            Gets or sets the test cases.
            </summary>
      <value>The test cases.</value>
    </member>
    <member name="T:MAT.Security.PerformImpersonatedAction">
      <summary>
            Perform Impersonated Action
            </summary>
    </member>
    <member name="T:MAT.Security.Impersonation">
      <summary>
            Simple Impersonation helper for performing actions not as the current user on the current thread.
            </summary>
      <example>
        <code>
            public void Usage1()
            {
            using (Impersonation impersonator = new Impersonation("Test", "TEST", "TESTDOMAIN"))
            {
            // do operations as user;
            }
            }
            </code>
      </example>
      <example>
        <code>
            public void Operation()
            {
            File.Delete(fileName);
            }
            public void Usage2()
            {
            Impersonation.Imperonate("TEST", "TEST", "TESTDOMAIN", Operation);
            }
            </code>
      </example>
    </member>
    <member name="M:MAT.Security.Impersonation.#ctor(System.String,System.String,System.String)">
      <summary>
            Construct a Impersonation using the included string credentials
            </summary>
      <param name="userName">NTAccount User Name</param>
      <param name="password">Password</param>
      <param name="domainName">Domain Name</param>
    </member>
    <member name="M:MAT.Security.Impersonation.#ctor(System.Net.NetworkCredential)">
      <summary>
            Construct a Impersonation using the passed NetworkCredential
            </summary>
      <param name="credential">Network Credential</param>
    </member>
    <member name="M:MAT.Security.Impersonation.LogOn">
      <summary>
            LogOn using contained credentials
            </summary>
    </member>
    <member name="M:MAT.Security.Impersonation.Impersonate">
      <summary>
            Impersonate contained credentials
            </summary>
    </member>
    <member name="M:MAT.Security.Impersonation.Undo">
      <summary>
            Restore to Previous credentials
            </summary>
    </member>
    <member name="M:MAT.Security.Impersonation.Close">
      <summary>
            Close stop impersonating, if impersonating and free contained token
            </summary>
    </member>
    <member name="M:MAT.Security.Impersonation.Impersonate(System.String,System.String,System.String,MAT.Security.PerformImpersonatedAction)">
      <summary>
            Static Helper to Impersonate using passed in credentials and then perform delegate action.
            </summary>
      <param name="userName">Account User Name</param>
      <param name="password">password</param>
      <param name="domainName">Domain Name</param>
      <param name="doActions">Action to perform.</param>
    </member>
    <member name="M:MAT.Security.Impersonation.Impersonate(System.Net.NetworkCredential,MAT.Security.PerformImpersonatedAction)">
      <summary>
            Static Helper to Impersonate using passed in credentials and then perform delegate action.
            </summary>
      <param name="networkCredential">Network Credential</param>
      <param name="doActions">Action to perform.</param>
    </member>
    <member name="M:MAT.Security.Impersonation.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:MAT.Security.Impersonation.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:MAT.Security.Impersonation.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MAT.Security.Impersonation" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="T:MAT.Xml.Parser">
      <summary>
            Parser contains a set of basic string parsing function that can be useful for
            quickly getting to the text in HTML or XML body without needing DOM objects.
            </summary>
    </member>
    <member name="M:MAT.Xml.Parser.GetString(System.String,System.String)">
      <summary>
            Reads the first XML node from a file give a proper XPATH query.
            Search help for Introduction to the Syntax of XPath
            </summary>
      <example>
            Retrieving settings from element or attribute:<br /><br />
            Sample File:
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="msnAdGroup" value="CMSIE4" /&gt;
            		&lt;add key="dualSearch" value="true" /&gt;
            	&lt;/appSettings&gt;
            	&lt;customSettings&gt;
            		&lt;data&gt;This is sample data.&lt;/data&gt;
            	&lt;/customSettings&gt;
            &lt;/configuration&gt;
            </code>
            Reads value attribute for the add element whose key attribute is 'dualSearch'
            <code>
            string result = Parser.GetString("C:\\config.xml", "//configuration/appSettings/add[@key = 'dualSearch']/@value");
            </code>
            Read value for data
            <code>
            string result = Parser.GetString("C:\\config.xml", "//configuration/customsettings/data");
            </code></example>
      <param name="file">XML file to load</param>
      <param name="xpathQuery">XPath query to read</param>
    </member>
    <member name="M:MAT.Xml.Parser.GetString(System.String,System.String,System.Boolean)">
      <summary>
            Reads the first XML node from a file give a proper XPATH query.
            <seealso href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/html/xmconIntroductiontoXPathSyntax.asp">Introduction to the Syntax of XPath</seealso></summary>
      <example>
            Retrieving settings from element or attribute:<br /><br />
            Sample File:
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="msnAdGroup" value="CMSIE4" /&gt;
            		&lt;add key="dualSearch" value="true" /&gt;
            	&lt;/appSettings&gt;
            	&lt;customSettings&gt;
            		&lt;data&gt;This is sample data.&lt;/data&gt;
            	&lt;/customSettings&gt;
            &lt;/configuration&gt;
            </code>
            Reads value attribute for the add element whose key attribute is 'dualSearch'
            <code>
            string result = Parser.GetString("C:\\config.xml", "//configuration/appSettings/add[@key = 'dualSearch']/@value");
            </code>
            Read value for data
            <code>
            string result = Parser.GetString("C:\\config.xml", "//configuration/customsettings/data");
            </code></example>
      <param name="file">XML file to load</param>
      <param name="xpathQuery">XPath query to read</param>
      <param name="decode">Decode XML information; default is true</param>
      <returns>string containing data content</returns>
    </member>
    <member name="M:MAT.Xml.Parser.SetString(System.String,System.String,System.String)">
      <summary>
            Writes data to the first XML node from a file give a proper XPATH query.
            <seealso href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/html/xmconIntroductiontoXPathSyntax.asp">Introduction to the Syntax of XPath</seealso></summary>
      <example>
            Retrieving settings from element or attribute:<br /><br />
            Sample File:
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="msnAdGroup" value="CMSIE4" /&gt;
            		&lt;add key="dualSearch" value="true" /&gt;
            	&lt;/appSettings&gt;
            	&lt;customSettings&gt;
            		&lt;data&gt;This is sample data.&lt;/data&gt;
            	&lt;/customSettings&gt;
            &lt;/configuration&gt;
            </code>
            Write new data to the value attribute for the add element whose key attribute is 'dualSearch'
            <code>
            Parser.SetString("C:\\config.xml", "//configuration/appSettings/add[@key = 'dualSearch']/@value", "false");
            </code>
            Write a new value for data
            <code>
            Parser.GetString("C:\\config.xml", "//configuration/customsettings/data", "New content.");
            </code></example>
      <remarks>
            Make sure that &amp; is written as &amp;amp;
            </remarks>
      <param name="file">XML file to load</param>
      <param name="XPathQuery">XPath query to read</param>
      <param name="content">Content to place in the node replacing existing content</param>
    </member>
    <member name="M:MAT.Xml.Parser.SetString(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Writes data to the first XML node from a file give a proper XPATH query.
            </summary>
      <example>
            Retrieving settings from element or attribute:<br /><br />
            Sample File:
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            	&lt;appSettings&gt;
            		&lt;add key="msnAdGroup" value="CMSIE4" /&gt;
            		&lt;add key="dualSearch" value="true" /&gt;
            	&lt;/appSettings&gt;
            	&lt;customSettings&gt;
            		&lt;data&gt;This is sample data.&lt;/data&gt;
            	&lt;/customSettings&gt;
            &lt;/configuration&gt;
            </code>
            Write new data to the value attribute for the add element whose key attribute is 'dualSearch'
            <code>
            Parser.SetString("C:\\config.xml", "//configuration/appSettings/add[@key = 'dualSearch']/@value", "false");
            </code>
            Write a new value for data
            <code>
            Parser.GetString("C:\\config.xml", "//configuration/customsettings/data", "New content.");
            </code></example>
      <remarks>
            Make sure that &amp; is written as &amp;amp;
            </remarks>
      <param name="file">XML file to load</param>
      <param name="XPathQuery">XPath query to read</param>
      <param name="content">Content to place in the node replacing existing content</param>
      <param name="encode">Encode XML information; default is true</param>
    </member>
    <member name="T:MAT.DataCompare.Core.SchemaResults">
      <summary>
            Schema comparison results
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.SchemaResults.schemaCompareFilters">
      <summary>
            Set default value = true
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.SchemaResults.AssertSchemaMatched">
      <summary>
            Asserts the schema matched.
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.SchemaCompareFilters">
      <summary>
            Gets or sets the schema compare filters.
            </summary>
      <value>The schema compare filters.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.SourceTable">
      <summary>
            Gets or sets the source table.
            </summary>
      <value>The source table.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.DestinationTable">
      <summary>
            Gets or sets the destination table.
            </summary>
      <value>The destination table.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.SourceStoredProcedure">
      <summary>
            Gets or sets the source stored procedure.
            </summary>
      <value>The source stored procedure.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.DestinationStoredProcedure">
      <summary>
            Gets or sets the destination stored procedure.
            </summary>
      <value>The destination stored procedure.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.SourceView">
      <summary>
            Gets or sets the source view.
            </summary>
      <value>The source view.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.DestinationView">
      <summary>
            Gets or sets the destination view.
            </summary>
      <value>The destination view.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.SourceFunction">
      <summary>
            Gets or sets the source function.
            </summary>
      <value>The source function.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.DestinationFunction">
      <summary>
            Gets or sets the destination function.
            </summary>
      <value>The destination function.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.NumMismatch">
      <summary>
            Gets the num mismatch.
            </summary>
      <value>The num mismatch.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.ShemaMatched">
      <summary>
            Gets the shema matched.
            </summary>
      <value>The shema matched.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.DiffColumns">
      <summary>
            Gets the diff columns.
            </summary>
      <value>The diff columns.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.SourceSideMissing">
      <summary>
            Gets the source side missing.
            </summary>
      <value>The source side missing.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.DestinationSideMissing">
      <summary>
            Gets the destination side missing.
            </summary>
      <value>The destination side missing.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.MatchedWithDiffResults">
      <summary>
            Gets the matched with diff results.
            </summary>
      <value>The matched with diff results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.AllColumns">
      <summary>
            Gets or sets all columns.
            </summary>
      <value>All columns.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.AllParams">
      <summary>
            Gets or sets all params.
            </summary>
      <value>All params.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.SummaryMessage">
      <summary>
            Gets the summary message.
            </summary>
      <value>The summary message.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaResults.Message">
      <summary>
            Gets or sets the message.
            </summary>
      <value>The message.</value>
    </member>
    <member name="F:MAT.DataCompare.Core.View.indexInfo">
      <summary>
            TODO : Implement index
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.View.rowGuidCol">
      <summary>
            TODO : Implement row guid id
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.View.identity">
      <summary>
            TODO : implement identity 
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.View.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.View.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:MAT.DataCompare.Core.ColumnsCollection">
      <summary>
            List of columns for table object
            </summary>
    </member>
    <member name="T:MAT.Verify.IsTypeException">
      <summary>
            Exception thrown when the value is unexpectedly not of the exact given type.
            </summary>
    </member>
    <member name="M:MAT.Verify.IsTypeException.#ctor(System.Type,System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.IsTypeException" /> class.
            </summary>
      <param name="expected">The expected type</param>
      <param name="actual">The actual object value</param>
    </member>
    <member name="T:MAT.Config">
      <summary>
            Configuration file functions
            </summary>
    </member>
    <member name="M:MAT.Config.UpdateApplicationSettingsBaseClasses(System.Reflection.Assembly)">
      <summary>
            Used to update Setting elements to correct values if run from MSTEST/QTAGENT.  Uses reflection.<br />
            Searches for a .config file with the same name as the calling assembly and loads any settings sections found there into
            the default settings.  So Properties.Settings.Default.KeyX will use the update.  However new Properties.Settings() will
            continue to use the compiled defaults.
            </summary>
      <param name="calling">The calling assembly (assumes executing assembly if null)</param>
    </member>
    <member name="M:MAT.Config.UpdateApplicationSettingsBaseClasses(System.String,System.Reflection.Assembly)">
      <summary>
            Used to update Setting elements to correct values if run from MSTEST/QTAGENT.  Uses reflection.<br />
            Searches for a .config file with the same name as the calling assembly and loads any settings sections found there into
            the default settings.  So Properties.Settings.Default.KeyX will use the update.  However new Properties.Settings() will
            continue to use the compiled defaults.
            </summary>
      <param name="configPath">Config file that settings should be loaded from</param>
      <param name="calling">The calling assembly (assumes executing assembly if null)</param>
      <exception cref="T:System.IO.FileNotFoundException">Thrown if the file doesn't exist</exception>
    </member>
    <member name="M:MAT.Config.GetApplicationSetting``1(System.String,System.Reflection.Assembly,``0)">
      <summary>
            Gets the application setting.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="key">The key.</param>
      <param name="calling">The calling assembly if not the current executing assembly.</param>
      <param name="defaultValue">The default value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Config.PathConfiguration(System.String)">
      <summary>
            Given a App.Config appSettings key, pre-pends the users app data folder.
            Useful when a path is needed to a users appdata/roaming folder with an appended path.
            </summary>
      <param name="key">Name of the appSetting within the App.Config file.</param>
      <returns>Full path of the appSetting including the local directory.</returns>
    </member>
    <member name="T:MAT.ScheduledTasks">
      <summary>
            Scheduled Tasks API
            </summary>
    </member>
    <member name="M:MAT.ScheduledTasks.CreateTask(System.String,System.String,System.String,System.String)">
      <summary>
            Creates the task.
            </summary>
      <param name="taskName">Name of the task.</param>
      <param name="taskToRun">The task to run.  You must quote paths with spaces.</param>
      <param name="user">The user.</param>
      <param name="password">The password.</param>
      <returns>Ouput lines</returns>
    </member>
    <member name="M:MAT.ScheduledTasks.DeleteTask(System.String)">
      <summary>
            Deletes the task.
            </summary>
      <param name="taskName">Name of the task.</param>
      <returns>Ouput lines</returns>
    </member>
    <member name="M:MAT.ScheduledTasks.RunTask(System.String,System.Boolean)">
      <summary>
            Runs the task.
            </summary>
      <param name="taskName">Name of the task.</param>
      <param name="waitForExit">if set to <c>true</c> waits for tasks to stop running.</param>
      <returns>Ouput lines</returns>
    </member>
    <member name="M:MAT.ScheduledTasks.IsRunning(System.String)">
      <summary>
            Determines whether the specified task name is running.
            </summary>
      <param name="taskName">Name of the task.</param>
      <returns>
        <c>true</c> if the specified task name is running; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:MAT.ScheduledTasks.IsExist(System.String)">
      <summary>
            Determines whether the specified task name exists.
            </summary>
      <param name="taskName">Name of the task.</param>
      <returns>
        <c>true</c> if the specified task name exists; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:MAT.ScheduledTasks.GetTask(System.String)">
      <summary>
            Gets the task.
            </summary>
      <param name="taskName">Name of the task.</param>
      <returns>Task or Null</returns>
    </member>
    <member name="M:MAT.ScheduledTasks.GetAllTasks">
      <summary>
            Returns list of tasks for this machine
            </summary>
      <returns>List of tasks</returns>
    </member>
    <member name="T:MAT.TaskItem">
      <summary>
            Task Item
            </summary>
    </member>
    <member name="M:MAT.TaskItem.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:MAT.TaskItem.HostName">
      <summary>
            Gets or sets the name of the host.
            </summary>
      <value>The name of the host.</value>
    </member>
    <member name="P:MAT.TaskItem.TaskName">
      <summary>
            Gets or sets the name of the task.
            </summary>
      <value>The name of the task.</value>
    </member>
    <member name="P:MAT.TaskItem.NextRunTime">
      <summary>
            Gets or sets the next run time.
            </summary>
      <value>The next run time.</value>
    </member>
    <member name="P:MAT.TaskItem.Status">
      <summary>
            Gets or sets the status.
            </summary>
      <value>The status.</value>
    </member>
    <member name="P:MAT.TaskItem.LogonMode">
      <summary>
            Gets or sets the logon mode.
            </summary>
      <value>The logon mode.</value>
    </member>
    <member name="P:MAT.TaskItem.LastRunTime">
      <summary>
            Gets or sets the last run time.
            </summary>
      <value>The last run time.</value>
    </member>
    <member name="P:MAT.TaskItem.LastResult">
      <summary>
            Gets or sets the last result.
            </summary>
      <value>The last result.</value>
    </member>
    <member name="P:MAT.TaskItem.Creator">
      <summary>
            Gets or sets the creator.
            </summary>
      <value>The creator.</value>
    </member>
    <member name="P:MAT.TaskItem.Schedule">
      <summary>
            Gets or sets the schedule.
            </summary>
      <value>The schedule.</value>
    </member>
    <member name="P:MAT.TaskItem.TaskToRun">
      <summary>
            Gets or sets the task to run.
            </summary>
      <value>The task to run.</value>
    </member>
    <member name="P:MAT.TaskItem.StartIn">
      <summary>
            Gets or sets the path task start in.
            </summary>
    </member>
    <member name="P:MAT.TaskItem.Comment">
      <summary>
            Gets or sets the comment.
            </summary>
      <value>The comment.</value>
    </member>
    <member name="P:MAT.TaskItem.ScheduledTaskState">
      <summary>
            Gets or sets the state of the scheduled task.
            </summary>
      <value>The state of the scheduled task. (ex: Enabled)</value>
    </member>
    <member name="P:MAT.TaskItem.ScheduledType">
      <summary>
            Gets or sets the type of the scheduled.
            </summary>
      <value>The type of the scheduled. (ex: Minute)</value>
    </member>
    <member name="P:MAT.TaskItem.StartTime">
      <summary>
            Gets or sets the start time.
            </summary>
      <value>The start time. (ex: 12:00:00 AM)</value>
    </member>
    <member name="P:MAT.TaskItem.StartDate">
      <summary>
            Gets or sets the start date.
            </summary>
      <value>The start date. (ex: 7/7/2009)</value>
    </member>
    <member name="P:MAT.TaskItem.EndDate">
      <summary>
            Gets or sets the end date.
            </summary>
      <value>The end date.</value>
    </member>
    <member name="P:MAT.TaskItem.Days">
      <summary>
            Gets or sets the days.
            </summary>
      <value>The days. (ex: Everyday)</value>
    </member>
    <member name="P:MAT.TaskItem.Months">
      <summary>
            Gets or sets the months.
            </summary>
      <value>The months.</value>
    </member>
    <member name="P:MAT.TaskItem.RunAsUser">
      <summary>
            Gets or sets the run as user.
            </summary>
      <value>The run as user.</value>
    </member>
    <member name="P:MAT.TaskItem.DeleteTaskIfNotRescheduled">
      <summary>
            Gets or sets whether to delete the scheduled task after it has been run.  Task cannot be scheduled to run more than once. (Default: Disabled)
            </summary>
      <value>Enabled or Disabled.</value>
    </member>
    <member name="P:MAT.TaskItem.StopTaskIfRunsXHoursandXMins">
      <summary>
            Gets or sets the stop task if runs X hoursand X mins.
            </summary>
      <value>The stop task if runs X hoursand X mins. (ex: 72:0)</value>
    </member>
    <member name="P:MAT.TaskItem.RepeatEvery">
      <summary>
            Gets or sets the repeat every.
            </summary>
      <value>The repeat every. (ex: 5 Minute(s))</value>
    </member>
    <member name="P:MAT.TaskItem.RepeatUntilTime">
      <summary>
            Gets or sets the repeat until time.
            </summary>
      <value>The repeat until time. (ex: None)</value>
    </member>
    <member name="P:MAT.TaskItem.RepeatUntilDuration">
      <summary>
            Gets or sets the duration of the repeat until.
            </summary>
      <value>The duration of the repeat until. (ex: 24 Hour(s): 0 Minute(s))</value>
    </member>
    <member name="P:MAT.TaskItem.RepeatStopIfStillRunning">
      <summary>
            Gets or sets the repeat stop if still running.
            </summary>
      <value>Disabled/Enabled</value>
    </member>
    <member name="P:MAT.TaskItem.IdleTime">
      <summary>
            Gets or sets the idle time.
            </summary>
      <value>Disabled/Enabled</value>
    </member>
    <member name="P:MAT.TaskItem.PowerManagement">
      <summary>
            Gets or sets the power management.
            </summary>
      <value>No Start On Batteries, Stop On Battery Mode</value>
    </member>
    <member name="T:SecurePasswordTextBox.SecureTextBox">
      <summary>
            This is a TextBox implementation that uses the System.Security.SecureString as its backing
            store instead of standard managed string instance. At no time, is a managed string instance
            used to hold a component of the textual entry.
            It does not display any text and relies on the 'PasswordChar' character to display the amount of
            characters entered. If no password char is defined, then an 'asterisk' is used.
            </summary>
    </member>
    <member name="F:SecurePasswordTextBox.SecureTextBox.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:SecurePasswordTextBox.SecureTextBox.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SecurePasswordTextBox.SecureTextBox" /> class.
            </summary>
    </member>
    <member name="M:SecurePasswordTextBox.SecureTextBox.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:SecurePasswordTextBox.SecureTextBox.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="P:SecurePasswordTextBox.SecureTextBox.SecureText">
      <summary>
            The secure string instance captured so far.
            This is the preferred method of accessing the string contents.
            </summary>
    </member>
    <member name="P:SecurePasswordTextBox.SecureTextBox.CharacterData">
      <summary>
            Allows the consumer to retrieve this string instance as a character array. NOte that this is still
            visible plainly in memory and should be 'consumed' as wuickly as possible, then the contents
            'zero-ed' so that they cannot be viewed.
            </summary>
    </member>
    <member name="T:MAT.Verify.ObjectComparer">
      <summary>
            Compares any 2 objects or object hierarchies
            </summary>
    </member>
    <member name="M:MAT.Verify.ObjectComparer.#ctor">
      <summary>
            Creates a new instance of the ObjectComparer. Use for custom binding flags or event handler attachment.
            </summary>
    </member>
    <member name="M:MAT.Verify.ObjectComparer.VerifyEqual(System.Object,System.Object)">
      <summary>
            Compares objects or object trees - Throws an exception (Assert.Fail) if the objects are not equal. The exception contains the differences.
            </summary>
      <param name="expected">Expected Object - can be any Type</param>
      <param name="actual">Actual Object - can be any Type (same type as 'Expected')</param>
    </member>
    <member name="M:MAT.Verify.ObjectComparer.VerifyEqual(System.Object,System.Object,System.EventHandler{MAT.Verify.BeforeCompareEventArgs})">
      <summary>
            Compares objects or object trees - Throws an exception (Assert.Fail) if the objects are not equal. The exception contains the differences.
            </summary>
      <param name="expected">Expected Object - can be any Type</param>
      <param name="actual">Actual Object - can be any Type (same type as 'Expected')</param>
      <param name="eventHandler">An event handler that provides for custom processing of specific conditions. The event is raised before every comparison</param>
    </member>
    <member name="M:MAT.Verify.ObjectComparer.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String@,System.EventHandler{MAT.Verify.BeforeCompareEventArgs})">
      <summary>
            Use to compare Collection objects       
            </summary>
      <param name="expected">Expected Object Collection</param>
      <param name="actual">Actual Object Collection(same type as 'Expected')</param>
      <param name="resultLog">Ref results - Get the differences</param>
      <param name="eventHandler">An event handler that provides for custom processing of specific conditions. The event is raised before every comparison</param>
      <returns>true if equal, false if not</returns>
    </member>
    <member name="M:MAT.Verify.ObjectComparer.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>
            Use to compare Collection objects
            </summary>
      <param name="expected">Expected Object Collection</param>
      <param name="actual">Actual Object Collection(same type as 'Expected')</param>
      <returns>true if same; false if different</returns>
    </member>
    <member name="M:MAT.Verify.ObjectComparer.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String@)">
      <summary>
            Use to compare Collection objects       
            </summary>
      <param name="expected">Expected Object Collection</param>
      <param name="actual">Actual Object Collection(same type as 'Expected')</param>
      <param name="resultLog">Ref results - Get the differences</param>
      <returns>true if same; false if different</returns>
    </member>
    <member name="M:MAT.Verify.ObjectComparer.AreEqual(System.Object,System.Object,System.String@)">
      <summary>
            Compares 2 individual Objects
            </summary>
      <param name="expected">Expected Object - can be any Type</param>
      <param name="actual">Actual Object - can be any Type (same type as 'Expected')</param>
      <param name="resultLog">Ref results - Get the differences</param>
      <returns>true if same; false if different</returns>
    </member>
    <member name="M:MAT.Verify.ObjectComparer.CompareObjects(System.Object,System.Object)">
      <summary>
            Compares two objects or object trees
            </summary>
      <param name="expected">Expected value</param>
      <param name="actual">Actual value</param>
    </member>
    <member name="P:MAT.Verify.ObjectComparer.FieldBindingFlags">
      <summary>
            Use this to set or get what fields are examined/compared. See System.Reflection.BindingFlags for all possible values
            </summary>
    </member>
    <member name="P:MAT.Verify.ObjectComparer.AreTheyEqual">
      <summary>
            Returns true if any differences were found, false if no differences were found or no comparisons were made
            </summary>
    </member>
    <member name="P:MAT.Verify.ObjectComparer.ResultLog">
      <summary>
            Returns the comprehensive result log
            </summary>
    </member>
    <member name="E:MAT.Verify.ObjectComparer.BeforeCompareEventHandler">
      <summary>
            Event which is triggered before every comparison
            </summary>
    </member>
    <member name="T:MAT.Verify.BeforeCompareEventArgs">
      <summary>
            Event arguments passed to your event handler that allow custom rules for specific situations
            </summary>
    </member>
    <member name="M:MAT.Verify.BeforeCompareEventArgs.Compared(System.Boolean,System.String)">
      <summary>
            Call this method if your code handled the comparsion
            </summary>
      <param name="objectsAreTheSame">Pass true if the objects were the same, false otherwise</param>
      <param name="differenceInfo">If they were not the same, supply more tracing info, such as actual and expected values, and possibly tolerance used</param>
    </member>
    <member name="M:MAT.Verify.BeforeCompareEventArgs.Ignored">
      <summary>
            Call this method if your code specifically ignored or skipped the comparison and you don't want the ObjectComparer to handle the field either
            </summary>
    </member>
    <member name="P:MAT.Verify.BeforeCompareEventArgs.TreePath">
      <summary>
            Provides the full tree path to this object in an arbitrary string format
            </summary>
    </member>
    <member name="P:MAT.Verify.BeforeCompareEventArgs.Actual">
      <summary>
            The actual object being compared
            </summary>
    </member>
    <member name="P:MAT.Verify.BeforeCompareEventArgs.Expected">
      <summary>
            The expected object being compared to
            </summary>
    </member>
    <member name="P:MAT.Verify.BeforeCompareEventArgs.ClassName">
      <summary>
            The short class name of the type of the objects being compared
            </summary>
    </member>
    <member name="P:MAT.Verify.BeforeCompareEventArgs.FullClassName">
      <summary>
            The full class name (including namespace) of the type of the objects being compared
            </summary>
    </member>
    <member name="P:MAT.Verify.BeforeCompareEventArgs.FieldName">
      <summary>
            The name of the field as specified by the containing class of the objects being compared
            </summary>
    </member>
    <member name="M:MAT.Crc32.Calculate(System.Byte[])">
      <summary>
            Caclulate the CRC (Cyclic Reduncancy Check) for a buffer of bytes 
            See RFC1952 for details.
            </summary>
    </member>
    <member name="M:MAT.Crc32.Calculate(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Caclulate the CRC (Cyclic Reduncancy Check) for a range of bytes.
            See RFC1952 for details.
            </summary>
      <param name="buffer">The buffer of bytes where the range of bytes to checksum exist</param>
      <param name="offset">The start index of the range of bytes to checksum</param>
      <param name="length">The length of the range of bytes to checksum</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Crc32.Calculate(System.UInt32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Caclulate the CRC (Cyclic Reduncancy Check) for a range of bytes 
            See RFC1952 for details.
            
            CRCs can be computed in chunks, where you take the CRC of the preceeding block of data and use
            this as the 'crc32' to compute the next chunk.  
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.ConversionResults">
      <summary>
            Describes whether or not the parse of this particular converter was successful
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ConversionResults.#ctor(System.Boolean,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.ConversionResults" /> class.
            </summary>
      <param name="wasSet">if set to <c>true</c> then the converter was able to convert, otherwise false.</param>
      <param name="result">The resulting object of the conversion, if any</param>
    </member>
    <member name="P:MAT.CommandLineParser.ConversionResults.WasSet">
      <summary>
            Gets or sets a value indicating whether the converter was able to convert
            </summary>
      <value>
        <c>true</c> if the converter was able to convert; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ConversionResults.Result">
      <summary>
            Gets or sets the results of the conversion.
            </summary>
      <value>The results.</value>
    </member>
    <member name="T:MAT.CommandLineParser.ConversionCollectionResults">
      <summary>
            Describes whether or not the parse of this particular converter was successful for a collection
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ConversionCollectionResults.#ctor(System.Boolean,System.Collections.ObjectModel.Collection{System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.ConversionCollectionResults" /> class.
            </summary>
      <param name="wasSet">if set to <c>true</c> then the converter was able to convert, otherwise false.</param>
      <param name="results">The resulting object collection of the conversion, if any</param>
    </member>
    <member name="P:MAT.CommandLineParser.ConversionCollectionResults.WasSet">
      <summary>
            Gets or sets a value indicating whether the converter was able to convert
            </summary>
      <value>
        <c>true</c> if the converter was able to convert; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ConversionCollectionResults.Results">
      <summary>
            Gets or sets the results of the conversion.
            </summary>
      <value>The results.</value>
    </member>
    <member name="T:MAT.BuildTasks.SetEnvVar">
      <summary>
            Build task for setting the environmental variables during a build.
            </summary>
      <example>
        <code>
              &lt;UsingTask TaskName="MAT.BuildTasks.SetEnvVar" AssemblyFile="MAT.Core.dll" /&gt;
              &lt;SetEnvVar Variable="$(var)" Value="$(value)" /&gt;
            </code>
      </example>
    </member>
    <member name="M:MAT.BuildTasks.SetEnvVar.#ctor">
      <summary>
            Build task for replacing text in a string.
            </summary>
    </member>
    <member name="M:MAT.BuildTasks.SetEnvVar.Execute">
      <summary>
            Sets an environment variable
            </summary>
      <returns>true is succeeded; otherwise false.</returns>
    </member>
    <member name="P:MAT.BuildTasks.SetEnvVar.Variable">
      <summary>
            Environment variable to set
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.SetEnvVar.Value">
      <summary>
            Value to set
            </summary>
    </member>
    <member name="T:MAT.Server.SqlJobCollection">
      <summary>
            Has List of SqlJob objects of the SqlServer 
            SqlJob class is Wrapper class of Microsoft.SqlServer.Management.Smo.Agent.Job 
            Added this class to MAT to eliminate SMO references and it has extension method RunJobNTimes
            </summary>
    </member>
    <member name="M:MAT.Server.SqlJobCollection.#ctor(System.String)">
      <summary>
            Initializes a new instance of Microsoft.SqlServer.Management.Smo.Server class with the specified name
            </summary>
      <param name="serverName">Sql ServerName</param>
    </member>
    <member name="M:MAT.Server.SqlJobCollection.GetEnumerator">
      <summary>
            Gets the list of Sql jobs
            </summary>
    </member>
    <member name="P:MAT.Server.SqlJobCollection.Item(System.String)">
      <summary>
            Indexer to take string as input to the JobList class
            </summary>
      <param name="jobName">Name of Sql server job</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.Security.Encryption">
      <summary>
            This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and 
            decrypt data. As long as encryption and decryption routines use the same
            parameters to generate the keys, the keys are guaranteed to be the same.
            The class uses static functions with duplicate code to make it easier to
            demonstrate encryption and decryption logic. In a real-life application, 
            this may not be the most efficient way of handling encryption, so - as
            soon as you feel comfortable with it - you may want to redesign this class.
            </summary>
    </member>
    <member name="T:MAT.Security.Encryption.KeySize">
      <summary>
            Size of encryption key in bits. Allowed values are: 128, 192, and 256. 
            Longer keys are more secure than shorter keys.
            </summary>
    </member>
    <member name="T:MAT.Security.Encryption.HashAlgorithm">
      <summary>
            Hash algorithm used to generate password. Allowed values are: "MD5" and 
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
            </summary>
    </member>
    <member name="M:MAT.Security.Encryption.Encrypt(System.String,System.String,System.String,MAT.Security.Encryption.HashAlgorithm,System.Int32,System.String,MAT.Security.Encryption.KeySize)">
      <summary>
            Encrypts specified plaintext using Rijndael symmetric key algorithm
            and returns a base64-encoded result.
            </summary>
      <param name="plainText">
            Plaintext value to be encrypted.
            </param>
      <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.
            </param>
      <param name="saltValue">
            Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.
            </param>
      <param name="hashAlgorithm">
            Hash algorithm used to generate password. Allowed values are: "MD5" and
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
            </param>
      <param name="passwordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.
            </param>
      <param name="initVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be 
            exactly 16 ASCII characters long.
            </param>
      <param name="keySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256. 
            Longer keys are more secure than shorter keys.
            </param>
      <returns>
            Encrypted value formatted as a base64-encoded string.
            </returns>
    </member>
    <member name="M:MAT.Security.Encryption.Decrypt(System.String,System.String,System.String,MAT.Security.Encryption.HashAlgorithm,System.Int32,System.String,MAT.Security.Encryption.KeySize)">
      <summary>
            Decrypts specified ciphertext using Rijndael symmetric key algorithm.
            </summary>
      <param name="cipherText">
            Base64-formatted ciphertext value.
            </param>
      <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.
            </param>
      <param name="saltValue">
            Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.
            </param>
      <param name="hashAlgorithm">
            Hash algorithm used to generate password. Allowed values are: "MD5" and
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
            </param>
      <param name="passwordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.
            </param>
      <param name="initVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long.
            </param>
      <param name="keySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256.
            Longer keys are more secure than shorter keys.
            </param>
      <returns>
            Decrypted string value.
            </returns>
      <remarks>
            Most of the logic in this function is similar to the Encrypt
            logic. In order for decryption to work, all parameters of this function
            - except cipherText value - must match the corresponding parameters of
            the Encrypt function which was called to generate the
            ciphertext.
            </remarks>
    </member>
    <member name="T:MAT.DialogSearchOption">
      <summary>
            Search options which determines how to search for the matching dialog using DialogHandler 
            </summary>
    </member>
    <member name="F:MAT.DialogSearchOption.StartsWith">
      <summary>
             Matches from the beginning of the text (case insensitive)
            </summary>
    </member>
    <member name="F:MAT.DialogSearchOption.EndsWith">
      <summary>
            Matches from the end of the text (case insensitive)
            </summary>
    </member>
    <member name="F:MAT.DialogSearchOption.Contains">
      <summary>
            Searches for the string anywhere in the text (case insensitive)
            </summary>
    </member>
    <member name="F:MAT.DialogSearchOption.ExactMatch">
      <summary>
            Matches the text exactly (Still case insensitive and ends trimmed of white space.)
            </summary>
    </member>
    <member name="F:MAT.DialogSearchOption.Regex">
      <summary>
            Matches the text with the regex pattern passed in
            </summary>
    </member>
    <member name="T:MAT.CommonDialogType">
      <summary>
            Common dialog types that DialogHandler takes care of automatically.
            </summary>
    </member>
    <member name="F:MAT.CommonDialogType.FileDownload">
      <summary>
            IE File Download dialogs
            </summary>
    </member>
    <member name="F:MAT.CommonDialogType.FileSave">
      <summary>
            Common File Save As... dialog
            </summary>
    </member>
    <member name="F:MAT.CommonDialogType.FileOpen">
      <summary>
            Common File Open... dialog
            </summary>
    </member>
    <member name="F:MAT.CommonDialogType.UploadFile">
      <summary>
            Choose File dialog for uploading files on the internet
            </summary>
    </member>
    <member name="F:MAT.CommonDialogType.Password">
      <summary>
            Password and Username dialogs for Passport
            </summary>
    </member>
    <member name="F:MAT.CommonDialogType.IEScriptError">
      <summary>
            IE Script Error
            </summary>
    </member>
    <member name="T:MAT.DialogControlClass">
      <summary>
            Common classes of a dialog box using DialogHandler
            </summary>
    </member>
    <member name="F:MAT.DialogControlClass.Static">
      <summary>
            Static Control
            </summary>
    </member>
    <member name="F:MAT.DialogControlClass.Edit">
      <summary>
            Edit Control
            </summary>
    </member>
    <member name="F:MAT.DialogControlClass.ComboBox">
      <summary>
            ComboBox
            </summary>
    </member>
    <member name="F:MAT.DialogControlClass.CheckBox">
      <summary>
            CheckBox
            </summary>
    </member>
    <member name="F:MAT.DialogControlClass.ListBox">
      <summary>
            ListBox
            </summary>
    </member>
    <member name="F:MAT.DialogControlClass.Button">
      <summary>
            Button
            </summary>
    </member>
    <member name="T:MAT.FoundDialogEventHandler">
      <summary>
            Delegate for the FoundDialog event
            </summary>
      <param name="sender">Dialog Handler</param>
      <param name="e">Arguments specific to the caught dialog.</param>
      <seealso cref="E:MAT.DialogHandler.FoundDialog" />
      <seealso cref="T:MAT.FoundDialogEventArgs" />
    </member>
    <member name="T:MAT.FoundDialogEventArgs">
      <summary>
            Argument passed into FoundDialog event
            </summary>
      <seealso cref="E:MAT.DialogHandler.FoundDialog" />
    </member>
    <member name="M:MAT.FoundDialogEventArgs.#ctor(System.IntPtr,MAT.DialogHandler,System.String)">
      <summary>
            Argument passed into FoundDialog event
            </summary>
      <param name="hWnd">Dialog Handle</param>
      <param name="parentDialogHandler">Parent Dialog Handler</param>
      <param name="actionItem">Button or Event that started this action</param>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.SetTextBox(System.Int32,System.String)">
      <summary>
            Sets the text in an edit or editable combobox
            </summary>
      <param name="inputIndex">Index of the item on the dialog.<br />ex: 0 would be the first edit box.</param>
      <param name="content">Text to set</param>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.SetCheckBox(System.Int32,System.Boolean)">
      <summary>
            Sets the check box in a dialog
            </summary>
      <param name="checkIndex">Index of the item on the dialog.  ex: 0 would be the first edit box.</param>
      <param name="checkBox">true = checked<br />false = unchecked</param>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.SetDropDown(System.Int32,System.String)">
      <summary>
            Sets the combo box
            </summary>
      <param name="dropDownIndex">Index of the item on the dialog.  ex: 0 would be the first edit box.</param>
      <param name="content">Text to select</param>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.SetListBoxItem(System.Int32,System.String)">
      <summary>
            Selects an item in a list box
            </summary>
      <param name="listBoxIndex">Index of the item on the dialog.  ex: 0 would be the first edit box.</param>
      <param name="content">Text to select</param>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.ClickButton(System.Int32)">
      <summary>
            Selects a button on the form
            </summary>
      <param name="buttonIndex">Index of the item on the dialog.  ex: 0 would be the first button.</param>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.ClickButton(System.String)">
      <summary>
            Clicks a button on the dialog
            </summary>
      <param name="buttonToClick">Text of the button to click on (case insensitive)</param>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.GetControls(MAT.DialogControlClass)">
      <summary>
            Get list of control handles filtered by control class
            </summary>
      <param name="controlClass">Class Filter</param>
      <returns>List of control handles</returns>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.GetControlText(System.IntPtr)">
      <summary>
            Get text related to control
            </summary>
      <param name="controlHandle">Control handle</param>
      <returns>Caption Text</returns>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.SetFocus">
      <summary>
            Set keboard focus to this window
            </summary>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.SendKeys(System.String)">
      <summary>
            Send keystrokes to this window
            </summary>
      <param name="keys">String of keystrokes to send</param>
    </member>
    <member name="M:MAT.FoundDialogEventArgs.Wait(System.Int32)">
      <summary>
            Wait
            </summary>
      <param name="time">Time in ms</param>
    </member>
    <member name="P:MAT.FoundDialogEventArgs.Handler">
      <summary>
            Parent Dialog Handler
            </summary>
    </member>
    <member name="P:MAT.FoundDialogEventArgs.ActionItem">
      <summary>
            Button or Event that started this action
            </summary>
    </member>
    <member name="P:MAT.FoundDialogEventArgs.Content">
      <summary>
            Combined text from all static items on the dialog
            </summary>
    </member>
    <member name="P:MAT.FoundDialogEventArgs.Title">
      <summary>
            Window Title of DialogHandle
            </summary>
    </member>
    <member name="P:MAT.FoundDialogEventArgs.DialogWindowHandle">
      <summary>
            Handle to the caught dialog
            </summary>
    </member>
    <member name="P:MAT.FoundDialogEventArgs.Cancel">
      <summary>
            Whether to cancel all further actions
            </summary>
    </member>
    <member name="F:MAT.CommonDialogTypeInternal.FileDownload">
      <summary>
            IE File Download dialogs
            </summary>
    </member>
    <member name="F:MAT.CommonDialogTypeInternal.FileSave">
      <summary>
            Common File Save As... dialog
            </summary>
    </member>
    <member name="F:MAT.CommonDialogTypeInternal.FileOpen">
      <summary>
            Common File Open... dialog
            </summary>
    </member>
    <member name="F:MAT.CommonDialogTypeInternal.UploadFile">
      <summary>
            Choose File dialog for uploading files on the internet
            </summary>
    </member>
    <member name="F:MAT.CommonDialogTypeInternal.Password">
      <summary>
            Password and Username dialogs for Passport
            </summary>
    </member>
    <member name="F:MAT.CommonDialogTypeInternal.IEScriptError">
      <summary>
            IE Script Error
            </summary>
    </member>
    <member name="F:MAT.CommonDialogTypeInternal.None">
      <summary>
            Internal use only
            </summary>
    </member>
    <member name="T:MAT.DialogHandler">
      <summary>
            DialogHandler is designed for automating common dialogs by quickly
            adding watches for the dialogs.  The most common dialog types are
            automatically handled Download File, Save As..., Open..., and Browse
            for folder.
            </summary>
      <example>
        <code>
            DialogHandler dh = new DialogHandler();
            dh.DialogsFoundHistory.Clear();
            dh.AddDialogWatch(CommonDialogType.FileDownload, "C:\Temp\");
            // Add Code that causes the dialog to appear.
            dh.RemoveDialogWatch(CommonDialogType.FileDownload, "C:\Temp\");
            dh.WaitForDialogCount(1); // Depending on the type of test these two line may not be needed.
            dh.WaitForDialogsToComplete(); // Some watches have copying/downloading or confirmation sub dialogs.
            Assert.IsTrue(dh.DialogsFoundHistory.Count &gt; 0);
            </code>
      </example>
      <remarks>
            FoundDialog event can also be attached to collect information about 
            the dialog or perform other actions on the dialog.
            </remarks>
      <remarks>buttonToClick can use "SENDKEYS:[keys to send] instead of button name</remarks>
    </member>
    <member name="M:MAT.DialogHandler.#ctor">
      <summary>
            DialogHandler is designed for automating common dialogs by quickly
            adding watches for the dialogs.  The most common dialog types are
            automatically handled Download File, Save As..., Open..., and Browse
            for folder.
            </summary>
    </member>
    <member name="M:MAT.DialogHandler.AddDialogWatch">
      <summary>
            Catches any dialog that appears.  Expected to be used in conjunction with
            the FoundDialog event for further action instructions.
            </summary>
    </member>
    <member name="M:MAT.DialogHandler.AddDialogWatch(System.String)">
      <summary>
            Catches any dialog that appears whose name matches that of the windowTitle.  
            Expected to be used in conjunction with the FoundDialog event for further
            action instructions.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
    </member>
    <member name="M:MAT.DialogHandler.AddDialogWatch(System.String,MAT.DialogSearchOption)">
      <summary>
            Catches any dialog that appears whose name matches that of the windowTitle
            following the rules in the windowTitleSearchOptions.
            Expected to be used in conjunction with the FoundDialog event for further
            action instructions.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
      <param name="windowTitleSearchOptions">Window title search match options</param>
    </member>
    <member name="M:MAT.DialogHandler.AddDialogWatch(System.String,System.String)">
      <summary>
            Catches any dialog that appears whose name matches that of the windowTitle.  
            After the dialog is found the specified button is clicked.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
      <param name="buttonToClick">Text of button to click</param>
      <remarks>buttonToClick can use "SENDKEYS:[keys to send] instead of button name</remarks>
    </member>
    <member name="M:MAT.DialogHandler.AddDialogWatch(System.String,MAT.DialogSearchOption,System.String)">
      <summary>
            Catches any dialog that appears whose name matches that of the windowTitle 
            following the rules in the windowTitleSearchOptions.
            After the dialog is found the specified button is clicked.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
      <param name="windowTitleSearchOptions">Window title search match options</param>
      <param name="buttonToClick">Text of button to click</param>
      <remarks>buttonToClick can use "SENDKEYS:[keys to send] instead of button name</remarks>
    </member>
    <member name="M:MAT.DialogHandler.AddDialogWatch(System.String,MAT.DialogSearchOption,System.String,System.String,MAT.DialogSearchOption)">
      <summary>
            Catches any dialog that appears whose name matches that of the windowTitle and
            contentfollowing the rules in the SearchOptions paramaters.
            After the dialog is found the specified button is clicked.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
      <param name="windowTitleSearchOptions">Window title search match options</param>
      <param name="buttonToClick">Text of button to click</param>
      <param name="dialogContent">Content to look for in the dialog</param>
      <param name="dialogContentSearchOptions">Options on the content search</param>
      <remarks>buttonToClick can use "SENDKEYS:[keys to send] instead of button name</remarks>
    </member>
    <member name="M:MAT.DialogHandler.AddDialogWatch(MAT.CommonDialogType,System.String)">
      <summary>
            Handles common dialogs for saving or opening files and folders.
            </summary>
      <remarks>Will overwrite files.</remarks>
      <param name="dialogType">Common Dialog to search for</param>
      <param name="fileOrFolder">File or Folder to enter into the dialog</param>
    </member>
    <member name="M:MAT.DialogHandler.AddDialogWatch(MAT.CommonDialogType,System.Boolean)">
      <summary>
            Handles the common dialog and cancels if selected.  If not using cancel then
            it is expected that the dialog is handled in the FoundDialog event.
            </summary>
      <remarks>If IEScriptError then cancelDialog is same as hitting continue/yes</remarks>
      <param name="dialogType">Common Dialog to search for</param>
      <param name="cancelDialog">Cancel dialog when found.</param>
    </member>
    <member name="M:MAT.DialogHandler.AddLogOnDialogWatch(System.String,System.String)">
      <summary>
            Used for passport logon's that use the Windows passport logon dialog.
            </summary>
      <param name="userName">User Name</param>
      <param name="password">Password</param>
    </member>
    <member name="M:MAT.DialogHandler.RemoveDialogWatch">
      <summary>
            Removes the watch that matches these paramaters.  
            Does not throw error if paramaters don't match.
            </summary>
    </member>
    <member name="M:MAT.DialogHandler.RemoveDialogWatch(System.String)">
      <summary>
            Removes the watch that matches these paramaters.  
            Does not throw error if paramaters don't match.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
    </member>
    <member name="M:MAT.DialogHandler.RemoveDialogWatch(System.String,MAT.DialogSearchOption)">
      <summary>
            Removes the watch that matches these paramaters.  
            Does not throw error if paramaters don't match.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
      <param name="windowTitleSearchOptions">Window title search match options</param>
    </member>
    <member name="M:MAT.DialogHandler.RemoveDialogWatch(System.String,System.String)">
      <summary>
            Removes the watch that matches these paramaters.  
            Does not throw error if paramaters don't match.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
      <param name="buttonToClick">Text of button to click</param>
    </member>
    <member name="M:MAT.DialogHandler.RemoveDialogWatch(System.String,MAT.DialogSearchOption,System.String)">
      <summary>
            Removes the watch that matches these paramaters.  
            Does not throw error if paramaters don't match.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
      <param name="windowTitleSearchOptions">Window title search match options</param>
      <param name="buttonToClick">Text of button to click</param>
    </member>
    <member name="M:MAT.DialogHandler.RemoveDialogWatch(System.String,MAT.DialogSearchOption,System.String,System.String,MAT.DialogSearchOption)">
      <summary>
            Removes the watch that matches these paramaters.  
            Does not throw error if paramaters don't match.
            </summary>
      <param name="windowTitle">Title of the window to look for (case insensitive)</param>
      <param name="windowTitleSearchOptions">Window title search match options</param>
      <param name="buttonToClick">Text of button to click</param>
      <param name="dialogContent">Content to look for in the dialog</param>
      <param name="dialogContentSearchOptions">Options on the content search</param>
    </member>
    <member name="M:MAT.DialogHandler.RemoveDialogWatch(MAT.CommonDialogType,System.String)">
      <summary>
            Removes the watch that matches these paramaters.  
            Does not throw error if paramaters don't match.
            </summary>
      <param name="dialogType">Common Dialog to search for</param>
      <param name="fileOrFolder">File or Folder to enter into the dialog</param>
    </member>
    <member name="M:MAT.DialogHandler.RemoveDialogWatch(MAT.CommonDialogType,System.Boolean)">
      <summary>
            Removes the watch that matches these paramaters.  
            Does not throw error if paramaters don't match.
            </summary>
      <param name="dialogType">Common Dialog to search for</param>
      <param name="cancelDialog">Cancel dialog when found.</param>
    </member>
    <member name="M:MAT.DialogHandler.RemoveLogOnDialogWatch(System.String,System.String)">
      <summary>
            Removes the watch that matches these paramaters.  
            Does not throw error if paramaters don't match.
            </summary>
      <param name="userName">User Name</param>
      <param name="password">Password</param>
    </member>
    <member name="M:MAT.DialogHandler.AddWindowClassToHandle(System.String)">
      <summary>
            Adds a new window class to look for.  Default window classese are
            #32770 (standard dialog window) and Internet Explorer_TridentDlgFrame (IE dialog)
            </summary>
      <param name="className">Window class name</param>
    </member>
    <member name="M:MAT.DialogHandler.RemoveAllDialogWatches">
      <summary>
            Clears all dialog watches added using <see cref="M:MAT.DialogHandler.AddDialogWatch" /></summary>
    </member>
    <member name="M:MAT.DialogHandler.ClearDialogsFoundHistory">
      <summary>
            Clears the current list of dialogs found
            </summary>
      <seealso cref="P:MAT.DialogHandler.DialogsFoundHistory" />
    </member>
    <member name="M:MAT.DialogHandler.WaitForDialogCount(System.Int32)">
      <summary>
            Wait for the dialog to reach count. (Default 5 min timeout)
            </summary>
      <param name="count">Count to reach</param>
      <remarks>This only contains the main dialogs and does not include the sub-dialogs like confirmation and copying/downloading dialogs.</remarks>
    </member>
    <member name="M:MAT.DialogHandler.WaitForDialogCount(System.Int32,System.TimeSpan)">
      <summary>
            Wait for the dialog to reach count.
            </summary>
      <param name="count">Count to reach</param>
      <param name="timeout">Timeout</param>
      <remarks>This only contains the main dialogs and does not include the sub-dialogs like confirmation and copying/downloading dialogs.</remarks>
    </member>
    <member name="M:MAT.DialogHandler.WaitForDialogsToComplete">
      <summary>
            Waits for a specified time (default 1 second) to pass without a dialog that is in
            the watch list appearing.
            </summary>
    </member>
    <member name="M:MAT.DialogHandler.WaitForDialogsToComplete(System.TimeSpan)">
      <summary>
            Waits for a specified time (default 1 second) to pass without a dialog that is in
            the watch list appearing.
            </summary>
      <param name="timeout">Time that must pass with none of the watch dialogs appearing</param>
    </member>
    <member name="M:MAT.DialogHandler.Dispose">
      <summary>
            Clears all dialog watches and disposes
            </summary>
    </member>
    <member name="P:MAT.DialogHandler.DialogsFoundHistory">
      <summary>
            A list of the window titles of every dialog that was found.
            </summary>
      <remarks>This only contains the main dialogs and does not include the sub-dialogs like confirmation and copying/downloading dialogs.</remarks>
      <seealso cref="M:MAT.DialogHandler.ClearDialogsFoundHistory" />
    </member>
    <member name="E:MAT.DialogHandler.FoundDialog">
      <summary>
            Event thrown whenever a dialog match is found.  The event args allows for
            further actions against the dialog.
            </summary>
      <seealso cref="T:MAT.FoundDialogEventArgs" />
    </member>
    <member name="T:MAT.DataCompare.Core.TableSchemaCompare">
      <summary>
            Table Comparator
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.TableSchemaCompare.#ctor(MAT.DataCompare.Core.Table,MAT.DataCompare.Core.Table)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.TableSchemaCompare" /> class.
            </summary>
      <param name="sourceTable">The source table.</param>
      <param name="destTable">The dest table.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.TableSchemaCompare.#ctor(MAT.DataCompare.Core.Table,MAT.DataCompare.Core.Table,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.TableSchemaCompare" /> class.
            </summary>
      <param name="sourceTable">The source table.</param>
      <param name="destTable">The dest table.</param>
      <param name="excludeColumnList">The exclude column list.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.TableSchemaCompare.Compare">
      <summary>
            Compares this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataCompare.Core.TableSchemaCompare.ColumnCmpResults">
      <summary>
            Gets the column CMP results.
            </summary>
      <value>The column CMP results.</value>
    </member>
    <member name="T:MAT.DataCompare.Core.TableCompareResults">
      <summary>
            This class takes two column objects from source and destination
            Compare them 
            Sets the comparision status
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.TableCompareResults.#ctor(MAT.DataCompare.Core.ColumnEntry,MAT.DataCompare.Core.ColumnEntry)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.TableCompareResults" /> class.
            </summary>
      <param name="sourceColumn">The source column.</param>
      <param name="destColumn">The dest column.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.TableCompareResults.CompareColumnDifferences">
      <summary>
            Compares the column differences.
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.TableCompareResults.DiffStatus">
      <summary>
            Gets or sets the diff status.
            </summary>
      <value>The diff status.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.TableCompareResults.SourceEntityName">
      <summary>
            Gets the name of the source entity.
            </summary>
      <value>The name of the source entity.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.TableCompareResults.SourceColumnImage">
      <summary>
            Gets the source column image.
            </summary>
      <value>The source column image.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.TableCompareResults.DestinationEntityName">
      <summary>
            Gets the name of the destination entity.
            </summary>
      <value>The name of the destination entity.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.TableCompareResults.DestinationColumnImage">
      <summary>
            Gets the destination column image.
            </summary>
      <value>The destination column image.</value>
    </member>
    <member name="T:MAT.Data.DataContext">
      <summary>
            Schema comparer 
            </summary>
      <summary>
            Data context with which the test cases in this class will be using to compare source and target.
            </summary>
    </member>
    <member name="T:MAT.Data.DataContext.ConnectionType">
      <summary>
            Connection types allowed for Data Comparison.  SQL or MDX.
            </summary>
    </member>
    <member name="F:MAT.Data.DataContext.schemaCompareFilters">
      <summary>
            Set default value = true
            </summary>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTable(System.String,System.String,System.String,MAT.Data.CompareWithType)">
      <summary>
            table vs table map schema comparison with filter columns.
            </summary>
      <param name="sourceTableName">Name of the source table.</param>
      <param name="destTableName">Name of the dest table.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTable(System.String,System.String,System.String)">
      <summary>
            table vs table map schema comparison with filter columns.
            </summary>
      <param name="sourceTableName">Name of the source table.</param>
      <param name="destTableName">Name of the dest table.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTable(System.String,System.String,MAT.Data.CompareWithType)">
      <summary>
            table vs table schema comparision.
            </summary>
      <param name="sourceTableName">Name of the source table.</param>
      <param name="destTableName">Name of the dest table.</param>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTable(System.String,System.String)">
      <summary>
            table vs table schema comparision.
            </summary>
      <param name="sourceTableName">Name of the source table.</param>
      <param name="destTableName">Name of the dest table.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTable(MAT.Data.CompareWithType,System.String)">
      <summary>
            table vs table schema comparison
            </summary>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTable(System.String)">
      <summary>
            table vs table schema comparison.
            </summary>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTableMap(System.String,MAT.Data.CompareWithType,System.String)">
      <summary>
            table vs table schema comparison. map with filter columns.
            </summary>
      <param name="tableMap">The table map. eg: [dbo.Table1] : [dbo.Table1] &lt; column1, column2 &gt; ;
            [sales.Table2] : [sales.Table2] ; </param>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2" This exclude column/s will be on all the tables</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTableMap(MAT.DataCompare.Core.SchemaObjectCollection,MAT.Data.CompareWithType,System.String)">
      <summary>
            table vs table map schema comparison with filter columns.
            </summary>
      <param name="mapList">The map list. eg : var x = new SchemaObjectCollection(){            
                   new SchemaCompareObject(){SourceTable = "[HRPersonDimensionFiltered]", DestinationTable = "[FixedFeeProfileDimension]", ExcludeColumns = "PersonnelIdentifier, PositionNumber"},
                   new SchemaCompareObject(){SourceTable = "[FixedFeeProfileDimension]", DestinationTable = "[FixedFeeProfileDimension]"}
               }; </param>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTableMap(MAT.DataCompare.Core.SchemaObjectCollection,System.String)">
      <summary>
            table vs table map schema comparison with filter columns.
            </summary>
      <param name="mapList">The map list. eg : var x = new SchemaObjectCollection(){            
                   new SchemaCompareObject(){SourceTable = "[HRPersonDimensionFiltered]", DestinationTable = "[FixedFeeProfileDimension]", ExcludeColumns = "PersonnelIdentifier, PositionNumber"},
                   new SchemaCompareObject(){SourceTable = "[FixedFeeProfileDimension]", DestinationTable = "[FixedFeeProfileDimension]"}
               }; </param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTableMap(System.String,MAT.Data.CompareWithType)">
      <summary>
            table vs table map schema comparison with filter columns.
            </summary>
      <param name="tableMap">The table map. eg: [dbo.Table1] : [dbo.Table1] &lt; column1, column2 &gt; ;
            [sales.Table2] : [sales.Table2] ; </param>
      <param name="type">The comparison type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTableMap(System.String)">
      <summary>
            table vs table map schema comparison with filter columns.
            </summary>
      <param name="tableMap">The table map. eg: [dbo.Table1] : [dbo.Table1] &lt; column1, column2 &gt; ;
            [sales.Table2] : [sales.Table2] ; </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableVsTableMap(System.String,System.String)">
      <summary>
            table vs table map schema comparison with filter columns.
            </summary>
      <param name="tableMap">The table map. eg: [dbo.Table1] : [dbo.Table1] &lt; column1, column2 &gt; ;
            [sales.Table2] : [sales.Table2] ; </param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareTableMap(MAT.DataCompare.Core.SchemaObjectCollection,MAT.Data.CompareWithType,System.String)">
      <summary>
            Compares the schema map.
            </summary>
      <param name="mapList">The map list.</param>
      <param name="type">The type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareViewVsView(MAT.Data.CompareWithType,System.String)">
      <summary>
            view vs view schema comparison.
            TODO: Update the assert method for reflecting results appropriately
            </summary>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareViewVsView(System.String)">
      <summary>
            view vs view schema comparison.
            </summary>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareViewVsView(System.String,System.String,MAT.Data.CompareWithType,System.String)">
      <summary>
            Views vs View schema compare.
            </summary>
      <param name="sourceView">The source view.</param>
      <param name="destView">The dest view.</param>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareViewVsView(MAT.DataCompare.Core.View,MAT.DataCompare.Core.View,MAT.Data.CompareWithType,System.String)">
      <summary>
            Views vs view schema compare.
            </summary>
      <param name="sourceView">The source view.</param>
      <param name="destView">The dest view.</param>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareViewMap(MAT.DataCompare.Core.ViewSchemaCompareObjectCollection,MAT.Data.CompareWithType,System.String)">
      <summary>
            Compares view vs view schema map.
            </summary>
      <param name="mapList">The map list.</param>
      <param name="type">The type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareFunctionVsFunction(MAT.Data.CompareWithType,System.String)">
      <summary>
            function vs function schema comparison.
            TODO : Update the Assert method to reflect results
            </summary>
      <param name="type">The type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareFunctionVsFunction(System.String)">
      <summary>
            function vs function schema comparison.
            </summary>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareFunctionVsFunction(System.String,System.String,MAT.Data.CompareWithType,System.String)">
      <summary>
            Functions vs function schema compare.
            </summary>
      <param name="sourceFunction">The source function.</param>
      <param name="destFunction">The dest function.</param>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareFunctionVsFunction(MAT.DataCompare.Core.Function,MAT.DataCompare.Core.Function,MAT.Data.CompareWithType,System.String)">
      <summary>
            Functions vs function schema compare.
            </summary>
      <param name="sourceFunction">The source function.</param>
      <param name="destFunction">The dest function.</param>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareFunctionMap(MAT.DataCompare.Core.FunctionSchemaCompareObjectCollection,MAT.Data.CompareWithType,System.String)">
      <summary>
            Compares function schema map.
            </summary>
      <param name="mapList">The map list.</param>
      <param name="type">The type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareStoredProcedureVsStoredProcedure(MAT.Data.CompareWithType,System.String)">
      <summary>
            stored procedure vs stored procedure schema comparison.
            TODO : Update Assert method to reflect correct results
            </summary>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareStoredProcedureVsStoredProcedure(System.String)">
      <summary>
            stored procedure vs stored procedure schema comparison.
            </summary>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareStoredProcedureVsStoredProcedure(System.String,System.String,MAT.Data.CompareWithType,System.String)">
      <summary>
            Store proc vs store proc  schema compare.
            </summary>
      <param name="sourceStoreProcedure">The source store procedure.</param>
      <param name="destStoreProcedure">The dest store procedure.</param>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareStoredProcedureVsStoredProcedure(MAT.DataCompare.Core.StoredProcedure,MAT.DataCompare.Core.StoredProcedure,MAT.Data.CompareWithType,System.String)">
      <summary>
            Storeds procedure vs store procedure schema compare.
            </summary>
      <param name="sourceStoredProcedure">The source stored procedure.</param>
      <param name="destStoredProcedure">The dest stored procedure.</param>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareStoredProcedureMap(MAT.DataCompare.Core.StoredProcedureSchemaCompareObjectCollection,MAT.Data.CompareWithType,System.String)">
      <summary>
            Compares stored procedure schema map.
            </summary>
      <param name="mapList">The map list.</param>
      <param name="type">The type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareDatabaseVsDatabase(MAT.Data.CompareWithType,System.String)">
      <summary>
            database vs database schema comparison.
            TODO: Update assert method to reflect correct results
            </summary>
      <param name="type">The comparison type.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareDatabaseVsDatabase(MAT.Data.CompareWithType,MAT.DataCompare.Core.SchemaObjectCollection,System.String)">
      <summary>
            Database vs database level schema compare
            </summary>
      <param name="tableMap">The map list. eg : var x = new SchemaObjectCollection(){            
                   new SchemaCompareObject(){SourceTable = "[HRPersonDimensionFiltered]", DestinationTable = "[FixedFeeProfileDimension]", ExcludeColumns = "PersonnelIdentifier, PositionNumber"},
                   new SchemaCompareObject(){SourceTable = "[FixedFeeProfileDimension]", DestinationTable = "[FixedFeeProfileDimension]"}
               }; </param>
      <param name="type">Comparison type</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareDatabaseVsDatabase(MAT.DataCompare.Core.SchemaObjectCollection,System.String)">
      <summary>
            Database vs database level schema compare
            </summary>
      <param name="tableMap">The map list. eg : var x = new SchemaObjectCollection(){            
                   new SchemaCompareObject(){SourceTable = "[HRPersonDimensionFiltered]", DestinationTable = "[FixedFeeProfileDimension]", ExcludeColumns = "PersonnelIdentifier, PositionNumber"},
                   new SchemaCompareObject(){SourceTable = "[FixedFeeProfileDimension]", DestinationTable = "[FixedFeeProfileDimension]"}
               }; </param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareDatabaseVsDatabase(System.String)">
      <summary>
            database vs database schema comparison.
            Exlude column/s will be excluded on all tables in both databases
            </summary>
      <param name="excludeColumns">The exclude columns. eg: "column" or "column1, column2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.CreateTableMap(MAT.DataCompare.Core.DatabaseServer,MAT.DataCompare.Core.DatabaseServer)">
      <summary>
            Creates the table map.
            </summary>
      <param name="destination">The destination.</param>
      <param name="source">The source.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.CreateViewMap(MAT.DataCompare.Core.DatabaseServer,MAT.DataCompare.Core.DatabaseServer)">
      <summary>
            Creates the view map.
            </summary>
      <param name="destination">The destination.</param>
      <param name="source">The source.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.CreateFunctionMap(MAT.DataCompare.Core.DatabaseServer,MAT.DataCompare.Core.DatabaseServer)">
      <summary>
            Creates the function map.
            </summary>
      <param name="destination">The destination.</param>
      <param name="source">The source.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.CreateStoreProcedureMap(MAT.DataCompare.Core.DatabaseServer,MAT.DataCompare.Core.DatabaseServer)">
      <summary>
            Creates the store procedure map.
            </summary>
      <param name="destination">The destination.</param>
      <param name="source">The source.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.PrepareTableMapFromText(System.String)">
      <summary>
            Prepare table collection object map from text.
            </summary>
      <param name="textMap"> The table map. eg: [dbo.Table1] : [dbo.Table1] &lt; excludeColumn1, excludeColumn2 &gt; ;
            [sales.Table2] : [sales.Table2] ;</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.PrepareTableMapFromExcelFileWithColumnMap(System.String)">
      <summary>
            TODO : Implementation is not complete
            </summary>
      <param name="filePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareViewVsTable(System.String,System.String,System.String)">
      <summary>
            Views vs table schema compare.
            </summary>
      <param name="sourceView">The source view.</param>
      <param name="destTable">The dest table.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareViewVsTable(MAT.DataCompare.Core.View,MAT.DataCompare.Core.Table,System.String)">
      <summary>
            Views vs table schema compare.
            </summary>
      <param name="sourceView">The source view.</param>
      <param name="destTable">The dest table.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.SchemaCompareViewVsTableMap(MAT.DataCompare.Core.ViewTableSchemaCompareObjectCollection,System.String)">
      <summary>
            Compares view vs table schema map.
            </summary>
      <param name="mapList">The map list.</param>
      <param name="excludeColumns">The exclude columns. eg: "col1, col2"</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.DataContext.CompareData(System.String,System.String,System.Nullable{System.Boolean})">
      <summary>
            Compares the data.
            </summary>
      <param name="sourceQuery">The source query.</param>
      <param name="destinationQuery">The destination/target query.</param>
      <returns>Results of comparison of both queries compared</returns>
    </member>
    <member name="M:MAT.Data.DataContext.ExecuteExceptQuery(System.String,System.Boolean)">
      <summary>
            Executes the except query.
            </summary>
      <param name="sourceQuery">The source query.</param>
      <param name="isFile">Determines whether sourceQuery is a pointer to a sql file.</param>
      <returns>Results of except query.</returns>
    </member>
    <member name="P:MAT.Data.DataContext.SchemaCompareFilters">
      <summary>
            Gets or sets the schema compare filters.
            </summary>
      <value>The schema compare filters.</value>
    </member>
    <member name="P:MAT.Data.DataContext.SourceConnection">
      <summary>
            Gets or sets the source connection.  You can use Server/DB properties instead.
            </summary>
      <value>The source connection.</value>
    </member>
    <member name="P:MAT.Data.DataContext.DestinationConnection">
      <summary>
            Gets or sets the destination connection. You can use Server/DB properties instead.
            </summary>
      <value>The destination connection.</value>
    </member>
    <member name="P:MAT.Data.DataContext.IsAsync">
      <summary>
            Gets or sets a value indicating whether this instance is async.
            </summary>
      <value>
        <c>true</c> if this instance is async; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Data.DataContext.SourceConnectionType">
      <summary>
            Gets or sets the type of the source connection (SQL or MDX).
            </summary>
      <value>The type of the source connection.</value>
    </member>
    <member name="P:MAT.Data.DataContext.DestinationConnectionType">
      <summary>
            Gets or sets the type of the destination connection (SQL or MDX).
            </summary>
      <value>The type of the destination connection.</value>
    </member>
    <member name="P:MAT.Data.DataContext.SourceServer">
      <summary>
            Gets or sets the source server.
            </summary>
      <value>The source server.</value>
    </member>
    <member name="P:MAT.Data.DataContext.SourceDB">
      <summary>
            Gets or sets the source DB.
            </summary>
      <value>The source DB.</value>
    </member>
    <member name="P:MAT.Data.DataContext.DestinationServer">
      <summary>
            Gets or sets the destination/target server.
            </summary>
      <value>The destination server.</value>
    </member>
    <member name="P:MAT.Data.DataContext.DestinationDB">
      <summary>
            Gets or sets the destination/target database.
            </summary>
      <value>The destination DB.</value>
    </member>
    <member name="P:MAT.Data.DataContext.MaxErrorCount">
      <summary>
            Gets or sets the number of errors you want to see before the code stops comparing rows (default 10)
            </summary>
      <value>
            The max error count.
            </value>
    </member>
    <member name="P:MAT.Data.DataContext.HostName">
      <summary>
            Gets or sets the name of the host where the test should be run (this can be Source, Target or some other third part server).
            </summary>
      <value>
            The name of the host.
            </value>
    </member>
    <member name="P:MAT.Data.DataContext.UserName">
      <summary>
            Gets or sets the name of the user account you want to run the test under.
            </summary>
      <value>
            The name of the user.
            </value>
    </member>
    <member name="P:MAT.Data.DataContext.Password">
      <summary>
            Gets or sets the password.  If null code will look up password in PDS (see \\zenbietest01\public\pds)
            </summary>
      <value>
            The password.
            </value>
    </member>
    <member name="P:MAT.Data.DataContext.UnitTest">
      <summary>
            Gets or sets a value indicating whether in unit test mode which will get MAT.Core.dll from MAT.Core folder and DataCompare.exe from datacompare folder.
            </summary>
      <value>
        <c>true</c> if unit test; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:MAT.Data.DataContext.ShouldBeSortedByDataComparer">
      <summary>
            Gets or sets a value indicating whether [user explicit sort].
            </summary>
      <value>
        <c>true</c> if [user explicit sort] Then Sorts based on User's Order by,  else  will be done based on the columns in the select statement order by <c>false</c>.
            </value>
    </member>
    <member name="T:MAT.DataCompare.Core.DatabaseServer">
      <summary>
            Database server object
            This class hold table list database related information
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.DatabaseServer._tableRowCount">
      <summary>
            Table row count
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.DatabaseServer.LoadTables">
      <summary>
            Loads the tables.
            TODO: load tables but not column info at this point 
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.DatabaseServer.LoadChildrensWithCurrentView">
      <summary>
            Load children from controller database into database object 
            clears previous SelectedTables collection and and table object from controller database
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.DatabaseServer.GenerateCommonInfoFromView">
      <summary>
            Gets database schema info
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.DatabaseServer.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.DatabaseServer.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.ThreadingType">
      <summary>
            define to set approach
            1: all threads (environment will be divided into 3:1) and start over list sorted by partition
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.TableList">
      <summary>
            Gets the table list.
            </summary>
      <value>The table list.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.DatabaseName">
      <summary>
            Gets or sets the name of the database.
            </summary>
      <value>The name of the database.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.ServerName">
      <summary>
            Gets or sets the name of the server.
            </summary>
      <value>The name of the server.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.ErrorMessage">
      <summary>
            Gets or sets the error message.
            </summary>
      <value>The error message.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.IsReadAccess">
      <summary>
            Gets or sets the is read access.
            </summary>
      <value>The is read access.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.IsWriteAccess">
      <summary>
            Gets or sets the is write access.
            </summary>
      <value>The is write access.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.IsLocalServer">
      <summary>
            Gets or sets the is local server.
            </summary>
      <value>The is local server.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.Server_File_Path">
      <summary>
            Data file path where hash db is created 
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.Server_Log_Path">
      <summary>
            Data log path
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.LocalServerName">
      <summary>
            Gets or sets the name of the local server.
            </summary>
      <value>The name of the local server.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.Tables">
      <summary>
            Gets the tables.
            </summary>
      <value>The tables.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.DatabaseServer.Functions">
      <summary>
            Gets the functions.
            </summary>
      <value>The functions.</value>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.IfExistsInDest">
      <summary>
            Check table exists in destination database 
            {0} -destination database 
            {1} - table name
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.IfNotExistsInDest">
      <summary>
            Check table not exists in destination database 
            {0} -destination database
            {1} - table name
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.dropTableFromDest">
      <summary>
            Drop table from destination 
            {0} - destination database 
            {1} -table name
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.createHashTable">
      <summary>
            Create hash table with 
            {0} table name 
            {1} string with primary key contraints and data type 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.createHashTableInDest">
      <summary>
            Create hash table in destination database with 
            {0} destination database
            {1} table name 
            {2} string with primary key contraints and data type 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.createHashTableWithPartitionSchema">
      <summary>
            Create hash table with partition schema 
            {0} table name 
            {1} string with primary key contraints and data type 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.createHashTableInDestWithPartitionSchema">
      <summary>
            Create hash table in destination database with partition schema
            {0} destination database
            {1} table name 
            {2} string with primary key contraints and data type 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.getCountFromView">
      <summary>
            Get row count from view using table name
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.getSandAloneTableCommonInfo">
      <summary>
            Stand alone table object can use this to featch entier info from sql server 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.getSandAloneTableCommonInfoWithSchema">
      <summary>
            Stand alone table object can use this to featch entier info from sql server 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.getTablesColumnInfoFromDB">
      <summary>
            get column info for each table on database
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.getObjectsFromDB">
      <summary>
            get object ids from db
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.isSysAdmin">
      <summary>
            sys admin 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.version">
      <summary>
            sql version 
            works for 2005, 2008 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.sp_help">
      <summary>
            run sp_help
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.getAllFunctions">
      <summary>
            get all functions
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.getAllStoredProcedures">
      <summary>
            Get all stored procedures
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.getAllViews">
      <summary>
            get all views 
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.sp_helpindex">
      <summary>
            Get index information
            </summary>
    </member>
    <member name="F:MAT.DataCompare.CommonSQLStrings.sp_helpconstraint">
      <summary>
            Gives all the constraints on table
            find foreign key
            </summary>
    </member>
    <member name="T:MAT.Verify.NotEmptyException">
      <summary>
            Exception thrown when a collection is unexpectedly empty.
            </summary>
    </member>
    <member name="M:MAT.Verify.NotEmptyException.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.NotEmptyException" /> class.
            </summary>
    </member>
    <member name="T:MAT.Security.Credentials.GetCredential">
      <summary>
            Create a form for collecting secure user name and password.
            </summary>
      <summary>
            Create a form for collecting secure user name and password.
            </summary>
    </member>
    <member name="F:MAT.Security.Credentials.GetCredential.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="F:MAT.Security.Credentials.GetCredential.UserName">
      <summary>
            UserName
            </summary>
    </member>
    <member name="F:MAT.Security.Credentials.GetCredential.Password">
      <summary>
            Password
            </summary>
    </member>
    <member name="F:MAT.Security.Credentials.GetCredential.Message">
      <summary>
            Message
            </summary>
    </member>
    <member name="M:MAT.Security.Credentials.GetCredential.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:MAT.Security.Credentials.GetCredential.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:MAT.Security.Credentials.GetCredential.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Security.Credentials.GetCredential" /> class.
            </summary>
    </member>
    <member name="T:MAT.Data.BulkCopy">
      <summary>
            Represtents SQL BCP utility(QyeryOut,IN). Copies data from SQL Query to file and File to Databae table.
            </summary>
      <remarks>
            This class doesn't support user-specified format file to bulk copy.
            </remarks>
    </member>
    <member name="M:MAT.Data.BulkCopy.FromSqlQueryToFile(System.String,System.String,System.String)">
      <summary>
            Bulk Copy from SELECT query to a file
            </summary>
      <param name="sqlServerName">SQL Server Name</param>
      <param name="selectQuery">T-SQL SELECT statement eg: SELECT * FROM AdventureWorks.Person.Contact</param>
      <param name="destiFilePath">Path of the File eg:\\anithat\d$\temp\MyFile.txt</param>
      <returns>Returns True if Bulk copy is success otherwise throws exception with error message</returns>
    </member>
    <member name="M:MAT.Data.BulkCopy.FromFileToDBTable(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
      <summary>
            Bulk Copy from file to database table
            </summary>
      <param name="sourceFilePath">Path of the File eg:\\anithat\d$\temp\MyFile.txt</param>
      <param name="sqlServerName">SQL Server Name</param>
      <param name="dbName">Database Name</param>
      <param name="tableSchema">Table Schema default schema is dbo</param>
      <param name="tableName">Table Name</param>
      <param name="ignoreConstraints">Ignore CHECK /ForeignKey constraints. By default it's value is false</param>
      <param name="user">The SQL Server username to use. This can be left blank if NT authentication is used.</param>
      <param name="password">The password to use for the account.</param>
      <returns>Returns True if Bulk copy is success otherwise throws exception with error message</returns>
    </member>
    <member name="T:MAT.BuildTasks.MDSDeploy">
      <summary>
            Deployment task for the MSCOM Deployment Studio
            </summary>
      <example>
        <code>
              &lt;UsingTask TaskName="MAT.BuildTasks.MDSDeploy" AssemblyFile="MAT.Core.dll"/&gt;
            
              &lt;Target Name = "AfterCompile" &gt;
                &lt;MDSDeploy 
                    ApplicationPath="MAT\Client" &lt;!-- required --&gt;
                    ServiceAccount="$(ServiceAccount)"
                    ServicePassword="$(ServicePassword)"
                    Root="\\MXPS-TFSORCAS\CM\MSCOM"
                    Environment="Base"
                    Mode="Verify"
                    LogFile="$(TestResultsFolder)\TestDeployLog.xml"
                    Machine="127.0.0.1"
                    Override="%(Override)"
                    Switches="" /&gt;
                    OutputDeployExe='$(DropLocation)\$(BuildNumber)\Setup.exe'
                &lt;/MDSDeploy&gt;
                &lt;/Target&gt;
            </code>
      </example>
    </member>
    <member name="M:MAT.BuildTasks.MDSDeploy.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.BuildTasks.MDSDeploy" /> class.
            </summary>
    </member>
    <member name="M:MAT.BuildTasks.MDSDeploy.Execute">
      <summary>
            Run deployment script
            </summary>
      <returns>true if exit code = 0</returns>
    </member>
    <member name="M:MAT.BuildTasks.MDSDeploy.ConvertPathToUnc(System.String)">
      <summary>
            Converts a local path to a UNC available path assuming that C$, D$, etc... are available.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.WhatIf">
      <summary>
            Gets or sets a value indicating whether project runs or just displays what will run.
            </summary>
      <value>
        <c>true</c> if doesn't run, just shows what will run; otherwise, <c>false</c> which runs the deploy.</value>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.Timeout">
      <summary>
            Timeout in Mintues (Default 15 min)
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.Root">
      <summary>
            Gets or sets the root.  Default is \\MSCOMTEST\MDS 
            </summary>
      <value>The root.</value>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.ServiceAccount">
      <summary>
            Gets or sets the service account.
            </summary>
      <value>The service account.</value>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.ServicePassword">
      <summary>
            Gets or sets the service password.  Required ServiceAccount to be set.
            </summary>
      <value>The service password.</value>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.Mode">
      <summary>
            Gets or sets the mode.  Default is "Verify"
            </summary>
      <value>The mode.</value>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.ApplicationPath">
      <summary>
            Gets or sets the application path. (APP\COMPONENT)
            </summary>
      <value>The application path.</value>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.Environment">
      <summary>
            Gets or sets the environment.
            </summary>
      <value>The environment.</value>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.LogFile">
      <summary>
            Gets or sets the log file.
            </summary>
      <value>The log file.</value>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.Override">
      <summary>
            List of override tasks in the form of &lt;override group="" name="" value=""&gt;
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.Machine">
      <summary>
            Comma separated list of machines to deploy to
            </summary>
      <value>Machine list</value>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.OutputDeployExe">
      <summary>
            Output location and name for the deployment exe.
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.MDSDeploy.Switches">
      <summary>
            Gets or sets the any extra arguments needed.
            </summary>
      <value>The switches.</value>
    </member>
    <member name="T:MAT.DataCompareResult">
      <summary>
            Result of a Data Comparison
            </summary>
    </member>
    <member name="M:MAT.DataCompareResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompareResult" /> class.
            </summary>
    </member>
    <member name="M:MAT.DataCompareResult.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompareResult" /> class.
            </summary>
      <param name="serializedMatTestResult">The serialized MAT test result.</param>
    </member>
    <member name="M:MAT.DataCompareResult.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:MAT.DataCompareResult.AssertDataMatch(System.String,System.Int32,System.String)">
      <summary>
            Asserts the data compare returned no mismatch information.
            </summary>
      <param name="methodName">Name of the method (null for default Test Case name).</param>
      <param name="workItemId">The work item ID (null for WorkItemId in Attribute of Test Case).</param>
      <param name="className">Name of the class (null for Test Class name).</param>
    </member>
    <member name="P:MAT.DataCompareResult.SourceColumnCount">
      <summary>
            Gets or sets the source column count.
            </summary>
      <value>
            The source column count.
            </value>
    </member>
    <member name="P:MAT.DataCompareResult.DestinationColumnCount">
      <summary>
            Gets or sets the destination column count.
            </summary>
      <value>
            The destination column count.
            </value>
    </member>
    <member name="P:MAT.DataCompareResult.SourceRowCount">
      <summary>
            Gets or sets the source row count.
            </summary>
      <value>
            The source row count.
            </value>
    </member>
    <member name="P:MAT.DataCompareResult.DestinationRowCount">
      <summary>
            Gets or sets the destination row count.
            </summary>
      <value>
            The destination row count.
            </value>
    </member>
    <member name="P:MAT.DataCompareResult.DataMismatchInformation">
      <summary>
            Gets or sets the data mismatch information.
            </summary>
      <value>
            The data mismatch information.
            </value>
    </member>
    <member name="P:MAT.DataCompareResult.Message">
      <summary>
            Gets the message.
            </summary>
    </member>
    <member name="P:MAT.DataCompareResult.TestPassed">
      <summary>
            Gets a value indicating whether test passed.
            </summary>
      <value>
        <c>true</c> if test passed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:MAT.DataCompareResult.DestinationQuery">
      <summary>
            Gets or sets the target query.  May be null if SourceQuery is an Except query.
            </summary>
      <value>
            The target query.
            </value>
    </member>
    <member name="P:MAT.DataCompareResult.SourceQuery">
      <summary>
            Gets or sets the source query.  This may be an Except query
            </summary>
      <value>
            The source query.
            </value>
    </member>
    <member name="T:MAT.Data.ObjectCopier">
      <summary>
            Makes a deep copy of objects, including any arrays.
            Does not handle circular references - will probably lead to stack overflow
            Originally authored by FBurian, release data 8/31/06
            </summary>
    </member>
    <member name="M:MAT.Data.ObjectCopier.Copy(System.Array)">
      <summary>
            Deep-Copies the contents of one array and returns the new array.
            Handles empty and null arrays
            </summary>
      <param name="fromArray">The array to copy from</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.ObjectCopier.Copy(System.Object)">
      <summary>
            Deep-Copies the contents of this object and returns an instance of the new object. 
            </summary>
      <param name="fromObject">The object to copy from</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.ObjectCopier.CreateNewObjectOfType(System.Type)">
      <summary>
            Creates a new object of the specified type
            </summary>
      <param name="type">The type of the object to create</param>
      <returns>The initialized/uninitialized object</returns>
    </member>
    <member name="M:MAT.Data.ObjectCopier.CopyToNew(System.Object,System.Type)">
      <summary>
            Creates a new instance of newType and loads it with the values from fromObject
            </summary>
      <param name="fromObject">The object to copy from</param>
      <param name="newType">The type to copy to</param>
      <returns>A new instance of newType</returns>
    </member>
    <member name="M:MAT.Data.ObjectCopier.Copy(System.Object,System.Object)">
      <summary>
            Deep-Copies the contents of this object and returns an instance of the new object. 
            </summary>
      <param name="fromObject">The object to copy from</param>
      <param name="toObject">The object to copy to - note all fields and properties that match will be over-written.</param>
    </member>
    <member name="M:MAT.Data.ObjectCopier.Copy(System.Object,System.Object,System.Boolean)">
      <summary>
            Deep-Copies the contents of this object and returns an instance of the new object. 
            </summary>
      <param name="fromObject">The object to copy from</param>
      <param name="ignoreCase">Ignore case of properties and fields when copying from different type objects.</param>
      <param name="toObject">The object to copy to - note all fields and properties that match will be over-written.</param>
    </member>
    <member name="M:MAT.Data.ObjectCopier.CopyFromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object,System.Boolean)">
      <summary>
            Copies values from Dictionary into matching properties or fields in a target Object.
            </summary>
      <param name="fromObject">Dictionary of Name/Value pairs to match up to and copy properties/fields in toObject.</param>
      <param name="ignoreCase">Ignore case of properties and fields when copying from different type objects.</param>
      <param name="toObject">The object to copy to - note all fields and properties that match will be over-written.</param>
    </member>
    <member name="M:MAT.Data.ObjectCopier.ObjectToGenericConverter``1(System.Object)">
      <summary>
            Creates object T and copies properties and fields from o to new object
            </summary>
      <typeparam name="T">Object to create; may be anonymous type.</typeparam>
      <param name="sourceObject">Object to copy properties and fields from.</param>
      <returns>object T</returns>
    </member>
    <member name="T:MAT.Verify.DoesNotThrowException">
      <summary>
            Exception thrown when code unexpectedly throws an exception.
            </summary>
    </member>
    <member name="M:MAT.Verify.DoesNotThrowException.#ctor(System.Exception)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.DoesNotThrowException" /> class.
            </summary>
      <param name="actual">Actual exception</param>
    </member>
    <member name="M:MAT.Verify.DoesNotThrowException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:MAT.Verify.DoesNotThrowException.StackTrace">
      <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
      <returns>A string that describes the contents of the call stack, with the most recent method call appearing first.</returns>
    </member>
    <member name="T:MAT.Server.SqlJob">
      <summary>
            Wrapper class on top of Microsoft.SqlServer.Management.Smo.Agent.Job so that user no need to
            add SMO references in their project just need to add MAT library
            </summary>
    </member>
    <member name="M:MAT.Server.SqlJob.Start">
      <summary>
            Runs the referenced job.
            </summary>
    </member>
    <member name="M:MAT.Server.SqlJob.Start(System.String)">
      <summary>
            Runs the referenced job starting at the specified job step.
            </summary>
      <param name="jobStepName">A System.String value that specifies the job step to start execution</param>
    </member>
    <member name="M:MAT.Server.SqlJob.Stop">
      <summary>
            Stops executing the referenced job.
            </summary>
    </member>
    <member name="M:MAT.Server.SqlJob.Invoke">
      <summary>
            Runs the Job
            </summary>
    </member>
    <member name="M:MAT.Server.SqlJob.Refresh">
      <summary>
                 Refreshes the object and retrieves properties when the object is next accessed.
            </summary>
    </member>
    <member name="P:MAT.Server.SqlJob.IsEnabled">
      <summary>
            Gets the System.Boolean property value that specifies whether the job is enabled.
            Returns:
                A System.Boolean value that specifies whether the job is enabled or not.If
                True, the job is enabled. If False (default), the job is not enabled.
            </summary>
    </member>
    <member name="P:MAT.Server.SqlJob.LastRunDate">
      <summary>
            Gets the date and time when the job was last run.
            Returns:
            A System.DateTime system object value that specifies the date and time when
            the job was last run.
            </summary>
    </member>
    <member name="P:MAT.Server.SqlJob.LastRunOutcome">
      <summary>
             Gets the result of the job from the last time it completed execution.
             Returns:
                Was returning A Microsoft.SqlServer.Management.Smo.Agent.CompletionResult object value
                but wrote wrapper to return string that specifies the result of the last time the job completed executing.
            </summary>
    </member>
    <member name="P:MAT.Server.SqlJob.CurrentRunStatus">
      <summary>
            Gets the current execution status of the job.
            Returns:
                Was returning A Microsoft.SqlServer.Management.Smo.Agent.JobExecutionStatus object value
                but wrote wrapper to return string that specifies the current execution status of the job.
            </summary>
    </member>
    <member name="T:MAT.Server.CompletionResult">
      <summary>
             Is a list of constant values that specify the status on completion of a job or job step.
            </summary>
    </member>
    <member name="F:MAT.Server.CompletionResult.Failed">
      <summary>
            Job failed.
            </summary>
    </member>
    <member name="F:MAT.Server.CompletionResult.Succeeded">
      <summary>
            Job succeeded.
            </summary>
    </member>
    <member name="F:MAT.Server.CompletionResult.Retry">
      <summary>
            Job is retrying.
            </summary>
    </member>
    <member name="F:MAT.Server.CompletionResult.Canceled">
      <summary>
            Job was cancelled.
            </summary>
    </member>
    <member name="F:MAT.Server.CompletionResult.InProgress">
      <summary>
            Job is currently in progress.
            </summary>
    </member>
    <member name="F:MAT.Server.CompletionResult.Unknown">
      <summary>
            Job is in an unknown state.
            </summary>
    </member>
    <member name="T:MAT.Server.JobExecutionStatus">
      <summary>
            The JobExecutionStatus enumeration is a list of constant values that specify the execution status of a job or job step.
            </summary>
    </member>
    <member name="F:MAT.Server.JobExecutionStatus.Unknown">
      <summary>
            Job is in an unknown state
            </summary>
    </member>
    <member name="F:MAT.Server.JobExecutionStatus.Executing">
      <summary>
            Job is executing
            </summary>
    </member>
    <member name="F:MAT.Server.JobExecutionStatus.WaitingForWorkerThread">
      <summary>
            Job is waiting.
            </summary>
    </member>
    <member name="F:MAT.Server.JobExecutionStatus.BetweenRetries">
      <summary>
            Job is between retries.
            </summary>
    </member>
    <member name="F:MAT.Server.JobExecutionStatus.Idle">
      <summary>
            Job is not running.
            </summary>
    </member>
    <member name="F:MAT.Server.JobExecutionStatus.Suspended">
      <summary>
            Job has been suspended.
            </summary>
    </member>
    <member name="F:MAT.Server.JobExecutionStatus.WaitingForStepToFinish">
      <summary>
            Job is waiting for step to finish.
            </summary>
    </member>
    <member name="F:MAT.Server.JobExecutionStatus.PerformingCompletionAction">
      <summary>
            Job is performing hte completion action.
            </summary>
    </member>
    <member name="T:MAT.Security.SecureStringConverter">
      <summary>
            Helper Class for converting secure strings
            </summary>
    </member>
    <member name="M:MAT.Security.SecureStringConverter.ConvertToPlainText(System.Security.SecureString)">
      <summary>
            Converts a secure string to plain text
            </summary>
      <param name="secureString">SecureString to convert</param>
      <returns>Plain text</returns>
    </member>
    <member name="M:MAT.Security.SecureStringConverter.ConvertToSecureString(System.String)">
      <summary>
            Converts plain text to a secure string
            </summary>
      <param name="plaintext">Text to converts</param>
      <returns>Secure string</returns>
    </member>
    <member name="T:MAT.DataCompare.Core.WhereClauseType">
      <summary>
            Where clasue type to add extra filter on table column entry
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.ViewMapResult.schemaCompareFilters">
      <summary>
            Set default value = true
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.ViewMapResult.AssertSchemaMatched">
      <summary>
            Asserts the schema matched.
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.ViewMapResult.AssertSchemaMatchedWithOnlyFailedResults">
      <summary>
            Asserts the schema matched.
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewMapResult.SchemaCompareFilters">
      <summary>
            Gets or sets the schema compare filters.
            </summary>
      <value>The schema compare filters.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewMapResult.SchemaCompareResults">
      <summary>
            Gets or sets the schema compare results.
            </summary>
      <value>The schema compare results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewMapResult.PassedResults">
      <summary>
            Gets the passed results.
            </summary>
      <value>The passed results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewMapResult.FailedResults">
      <summary>
            Gets the failed results.
            </summary>
      <value>The failed results.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewMapResult.SummaryMessage">
      <summary>
            Gets the summary message.
            </summary>
      <value>The summary message.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewMapResult.SummaryMessageOnlyMismatchedResults">
      <summary>
            Gets the summary message.
            </summary>
      <value>The summary message.</value>
    </member>
    <member name="T:MAT.Verify.NotNullException">
      <summary>
            Exception thrown when an object is unexpectedly null.
            </summary>
    </member>
    <member name="M:MAT.Verify.NotNullException.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.NotNullException" /> class.
            </summary>
    </member>
    <member name="T:MAT.HttpAnalysis.PostParam">
      <summary>
            Encapsulates post parameter information
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.PostParam.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Stores parameters in internal attributes
            </summary>
      <param name="fileName">file to upload</param>
      <param name="header">post param header</param>
      <param name="name">parameter name</param>
      <param name="value">parameter value</param>
    </member>
    <member name="P:MAT.HttpAnalysis.PostParam.FileName">
      <summary>
            Returns name for the file to be uploades
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.PostParam.Header">
      <summary>
            Returns post param header
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.PostParam.Name">
      <summary>
            Returns parameter name
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.PostParam.Value">
      <summary>
            Returns parameter value
            </summary>
    </member>
    <member name="T:MAT.BuildTasks.GetDomainAccountPassword">
      <summary>
            Build Task that can access Protected Data Store to retrieve a password for a service account (providing that the calling account has permissions to do so).
            </summary>
      <example>
            Put this above where you're going to use this task, preferably with other UsingTask statements you already have
              &lt;!-- Setup for Protected Data Store Task --&gt;
              &lt;UsingTask TaskName="MAT.BuildTasks.GetDomainAccountPassword" AssemblyFile="MAT.Core.dll" /&gt;
                   
            Put this inside your target where you want to retrieve the password:
              &lt;GetDomainAccountPassword DomainAndAccountName="$(UserName)"&gt;
                &lt;Output TaskParameter="Password" PropertyName="ServicePassword"/&gt;
              &lt;/GetDomainAccountPassword&gt;
              
            After that you can use the password by simply refering to $(ServicePassword)
            </example>
    </member>
    <member name="M:MAT.BuildTasks.GetDomainAccountPassword.#ctor">
      <summary>
            Build Task that can access Protected Data Store to retrieve a password for a service account (providing that the calling account has permissions to do so).
            </summary>
    </member>
    <member name="M:MAT.BuildTasks.GetDomainAccountPassword.Execute">
      <summary>
            Build Task that can access Protected Data Store to retrieve a password for a service account (providing that the calling account has permissions to do so).
            </summary>
      <returns>True if the password was able to be retrieved; otherwise, false.</returns>
    </member>
    <member name="P:MAT.BuildTasks.GetDomainAccountPassword.DomainAndAccountName">
      <summary>
            The domain and accoutn name (supplied in domain\account format) of the service account
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.GetDomainAccountPassword.PDSLocation">
      <summary>
            Location of Protected Data Store
            </summary>
    </member>
    <member name="P:MAT.BuildTasks.GetDomainAccountPassword.Password">
      <summary>
            The value of the service account's password once the task has been executed
            </summary>
    </member>
    <member name="T:MAT.Server.GacUtil">
      <summary>
            Install, Uninstall and View Assemblies from the Global Assembly Cache (GAC) on remote servers.
            </summary>
    </member>
    <member name="M:MAT.Server.GacUtil.Install(System.String,System.String)">
      <summary>
            Install DLL's in SourcePath in the Global Assembly Cache (GAC) on the given server.
            </summary>
      <remarks>Code assumes Admin rights to remote server and access to temp folders through C$, D$, etc...</remarks>
      <param name="serverName">Remote server to install files to</param>
      <param name="sourceFilesPath">Path to look for DLL's to install</param>
      <exception cref="T:MAT.Server.ServerNotFoundException">Error occurs if Remote execution can not access requested server</exception>
    </member>
    <member name="M:MAT.Server.GacUtil.Uninstall(System.String,System.String)">
      <summary>
            Uninstall assemblies that match DLL names in SourcePath in the Global Assembly Cache (GAC) from the given server.
            </summary>
      <remarks>Code assumes Admin rights to remote server and access to temp folders through C$, D$, etc...</remarks>
      <param name="serverName">Remote server to uninstall files from</param>
      <param name="sourceFilesPath">Path to look for DLL's names to uninstall</param>
      <exception cref="T:MAT.Server.ServerNotFoundException">Error occurs if Remote execution can not access requested server</exception>
    </member>
    <member name="M:MAT.Server.GacUtil.GetAssemblyList(System.String)">
      <summary>
            Retieve a list of assemblies in the GAC of a remote server
            </summary>
      <param name="serverName">Remote Server</param>
      <exception cref="T:MAT.Server.ServerNotFoundException">Error occurs if Remote execution can not access requested server</exception>
      <returns>List of Assemblies in remote servers Cache</returns>
    </member>
    <member name="M:MAT.Server.GacUtil.GetAssemblyList(System.String,System.String)">
      <summary>
            Retieve a list of assemblies in the GAC of a remote server
            </summary>
      <param name="serverName">Remote Server</param>
      <exception cref="T:MAT.Server.ServerNotFoundException">Error occurs if Remote execution can not access requested server</exception>
      <param name="assemblyName">Name of assembly in the cache</param>
      <returns>List of Assemblies in remote servers Cache</returns>
    </member>
    <member name="M:MAT.Server.GacUtil.ConvertPathToUnc(System.String,System.String)">
      <summary>
            Converts a local path to a UNC available path assuming that C$, D$, etc... are available.
            </summary>
    </member>
    <member name="E:MAT.Server.GacUtil.Message">
      <summary>
            Message event handler 
            </summary>
    </member>
    <member name="T:MAT.Server.AssemblyInfo">
      <summary>
            Assembly Info
            </summary>
    </member>
    <member name="M:MAT.Server.AssemblyInfo.#ctor">
      <summary>
            Assembly Info
            </summary>
    </member>
    <member name="M:MAT.Server.AssemblyInfo.#ctor(System.String)">
      <summary>
            Assembly Info
            </summary>
      <param name="itemLine">Assembly line in the form of: assembly.name, Version=x.x, Culture=xx-xx, PublicKeyToken=guid, processorArchitecture=XXXX</param>
    </member>
    <member name="M:MAT.Server.AssemblyInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Assembly Info
            </summary>
      <param name="assembly">Assembly name</param>
      <param name="version">Version</param>
      <param name="culture">Culture</param>
      <param name="key">Public Key Token</param>
      <param name="arch">Processor Architecture</param>
    </member>
    <member name="M:MAT.Server.AssemblyInfo.ToString">
      <summary>
            Returns the base representation of the assembly and version.
            </summary>
    </member>
    <member name="P:MAT.Server.AssemblyInfo.Assembly">
      <summary>
            Assembly Name
            </summary>
    </member>
    <member name="P:MAT.Server.AssemblyInfo.Version">
      <summary>
            Version
            </summary>
    </member>
    <member name="P:MAT.Server.AssemblyInfo.Culture">
      <summary>
            Culture
            </summary>
    </member>
    <member name="P:MAT.Server.AssemblyInfo.PublicKeyToken">
      <summary>
            Public Key Token
            </summary>
    </member>
    <member name="P:MAT.Server.AssemblyInfo.ProcessorArchitecture">
      <summary>
            Processor Architecture
            </summary>
    </member>
    <member name="T:MAT.Server.EventLogHelper">
      <summary>
            Use this class to verify whether event logs exist on a given machine
            in a given event source.
            </summary>
    </member>
    <member name="T:MAT.Server.EventLogHelper.NativeMethods">
      <summary>
            This is a class used to access a handful of Win32 stuff
            </summary>
    </member>
    <member name="M:MAT.Server.EventLogHelper.#ctor(System.String,System.String,System.String,System.Diagnostics.EventLogEntryType,System.Boolean)">
      <summary>
            Create a new EventLogHelper
            </summary>
      <param name="machineName">Name of the machine that you want to check event logs on</param>
      <param name="logName">Name of the event log you want to check event logs on</param>
      <param name="source">The source of event log entries</param>
      <param name="eventType">Type of event to filter on (can be combined with an or "|"). Default is Warnings and Errors</param>
      <param name="caseInsensitiveComparison">Pass true for case insensitive comparison</param>
    </member>
    <member name="M:MAT.Server.EventLogHelper.#ctor(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Boolean)">
      <summary>
            Create a new EventLogHelper
            </summary>
      <param name="machineName">Name of the machine that you want to check event logs on</param>
      <param name="logName">Name of the event log you want to check event logs on</param>
      <param name="eventType">Type of event to filter on (can be combined with an or "|"). Default is Warnings and Errors</param>
      <param name="caseInsensitiveComparison">Pass true for case insensitive comparison</param>
    </member>
    <member name="M:MAT.Server.EventLogHelper.#ctor(System.String,System.String,System.Diagnostics.EventLogEntryType)">
      <summary>
            Create a new EventLogHelper
            </summary>
      <param name="machineName">Name of the machine that you want to check event logs on</param>
      <param name="logName">Name of the event log you want to check event logs on</param>
      <param name="eventType">Type of event to filter on (can be combined with an or "|"). Default is Warnings and Errors</param>
    </member>
    <member name="M:MAT.Server.EventLogHelper.#ctor(System.String,System.String)">
      <summary>
            Create a new EventLogHelper
            </summary>
      <param name="machineName">Name of the machine that you want to check event logs on</param>
      <param name="logName">Name of the event log you want to check event logs on</param>
    </member>
    <member name="M:MAT.Server.EventLogHelper.EventExists(System.String,System.DateTime,System.DateTime)">
      <summary>
             Checks whether a certain event log entry exists
             </summary>
      <example>
        <code>
            EventLogHelper ev = new EventLogHelper(machineName, "Application");
             // Sample usage: Does an event exist of the default type (warning or error) with a specific part of the message matching a substring 
             // and occurring between the start and end times?
            DateTime start = ev.RemoteTime().AddMinutes(-5); //start 5 minutes ago
            DateTime end = ev.RemoteTime(); //end now
            bool found = ev.EventExists(subString, start, end); 
             </code>
      </example>
      <param name="messageSubstring">Text that the event log should contain</param>
      <param name="startTime">Start time of range to check for log</param>
      <param name="finishTime">Finish time of range to check for log</param>
      <returns>True if event was found</returns>
    </member>
    <member name="M:MAT.Server.EventLogHelper.EventExists(System.String)">
      <summary>
             Checks whether a certain event log entry exists
             </summary>
      <example>
        <code>
            EventLogHelper ev = new EventLogHelper(machineName, "Application");
             //Sample usage: Does an event exist of the default type (warning or error) with a specific part of the message matching a substring?
             bool found = ev.EventExists(subString);
             </code>
      </example>
      <param name="messageSubstring">Text that the event log should contain</param>
      <returns>True if event was found</returns>
    </member>
    <member name="M:MAT.Server.EventLogHelper.EventMessages(System.String,System.DateTime,System.DateTime)">
      <summary>
            Finds and returns a string array of event messages matching the supplied criteria
            </summary>
      <example>
        <code>
            EventLogHelper ev = new EventLogHelper(machineName, "Application");
            //Sample usage:  Get all messages that match the substring and occur between the start and end time
            DateTime start = ev.RemoteTime().AddMinutes(-5);
            DateTime end = ev.RemoteTime();
            string[] allEntries = ev.EventMessages(subString, start, end); 
            </code>
      </example>
      <param name="messageSubstring">Text that the event log should contain</param>
      <param name="startTime">Start time of range to check for log</param>
      <param name="finishTime">Finish time of range to check for log</param>
      <returns>a string array of event messages matching the supplied criteria</returns>
    </member>
    <member name="M:MAT.Server.EventLogHelper.EventMessages(System.String)">
      <summary>
            Finds and returns a string array of event messages matching the supplied criteria
            </summary>
      <example>
        <code>
            EventLogHelper ev = new EventLogHelper(machineName, "Application");
            //Sample usage: Get all messages that match the substring
            string[] entries = ev.EventMessages(subString);
            </code>
      </example>
      <param name="messageSubstring">Text that the event log should contain</param>
      <returns>a string array of event messages matching the supplied criteria</returns>
    </member>
    <member name="M:MAT.Server.EventLogHelper.EventCount(System.String,System.DateTime,System.DateTime,System.Int32)">
      <summary>
            Finds and returns a count of event messages matching the supplied criteria
            </summary>
      <example>
        <code>
            EventLogHelper ev = new EventLogHelper(machineName, "Application");
            //Sample usage: Get a count of events that match the substring and occur between the start and end time
            //This is useful if you want to make sure exactly 4 entries exist (in which case, pass 5 as a max value).
            int numEntries2 = ev.EventCount(String.Empty, DateTime.MinValue, DateTime.MaxValue, 5);
            </code>
      </example>
      <param name="messageSubstring">Text that the event log should contain</param>
      <param name="startTime">Start time of range to check for log</param>
      <param name="finishTime">Finish time of range to check for log</param>
      <param name="maxItemsToFind">Causes the method to return the number found so far, even if there could be more</param>
      <returns>a count of event messages matching the supplied criteria</returns>
    </member>
    <member name="M:MAT.Server.EventLogHelper.EventCount(System.String,System.DateTime,System.DateTime)">
      <summary>
            Finds and returns a count of event messages matching the supplied criteria
            </summary>
      <example>
        <code>
            EventLogHelper ev = new EventLogHelper(machineName, "Application");
            //Sample usage: Get a count of events that match the substring and occur between the start and end time
            DateTime start = ev.RemoteTime().AddMinutes(-5);
            DateTime end = ev.RemoteTime();
            int numEntries = ev.EventCount(subString, start, end);
            </code>
      </example>
      <param name="messageSubstring">Text that the event log should contain</param>
      <param name="startTime">Start time of range to check for log</param>
      <param name="finishTime">Finish time of range to check for log</param>
      <returns>a count of event messages matching the supplied criteria</returns>
    </member>
    <member name="M:MAT.Server.EventLogHelper.EventCount(System.String)">
      <summary>
            Finds and returns a count of event messages matching the supplied criteria
            </summary>
      <example>
        <code>
            EventLogHelper ev = new EventLogHelper(machineName, "Application");
            //Sample usage: Get a count of events that match the substring
            int numAllEntries = ev.EventCount(subString);
            </code>
      </example>
      <returns>a count of event messages matching the supplied criteria</returns>
    </member>
    <member name="M:MAT.Server.EventLogHelper.ClearEventLog">
      <summary>
            Clear all event log messages in the event source
            </summary>
    </member>
    <member name="M:MAT.Server.EventLogHelper.RemoteTime">
      <summary>
            This will return the DateTime.Now equivalent of the machine whether it is remote or not.
            </summary>
      <returns>DateTime.Now basically for the machine (Different machines clocks are usually off by a little)</returns>
    </member>
    <member name="M:MAT.Server.EventLogHelper.FindEvents(System.String,System.DateTime,System.DateTime,System.Collections.ArrayList,System.Int32)">
      <summary>
            Finds Events based on a message substring, start, and end times.
            </summary>
      <param name="messageSubstring">Substring to use for searching the event message</param>
      <param name="startTime">Min time to search for</param>
      <param name="finishTime">Max time to search for</param>
      <param name="al">An initialized arrayList to return an array of messages. Pass null to bypass this option</param>
      <param name="maxItemsToFind">Causes the method to return the number found so far, even if there could be more. Pass Int.MaxValue if you want all to be returned</param>
      <returns>Count of matching messages found</returns>
    </member>
    <member name="P:MAT.Server.EventLogHelper.EventTypesFilter">
      <summary>
            Type of event to filter on (can be combined with an or "|"). Default is Warnings and Errors
            </summary>
    </member>
    <member name="P:MAT.Server.EventLogHelper.CaseInsensitiveMessageSearch">
      <summary>
            Set to true for case insensitive comparison
            </summary>
    </member>
    <member name="T:MAT.DataCompare.DataAccess.HashDatabase">
      <summary>
            Hash database class provides the information required to construct the schema comparion objects
            </summary>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetSqlConnection(System.String,System.String)">
      <summary>
            Generate the SQL connection string from given database and server name.
            with security type is SSIS
            </summary>
      <param name="database">The database.</param>
      <param name="server">The server.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.RunSqlCommand(System.Data.SqlClient.SqlCommand)">
      <summary>
            Runs the SQL command.
            </summary>
      <param name="commad">The commad.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.RunSqlCommand(System.Data.SqlClient.SqlCommand,System.String)">
      <summary>
            Runs the SQL command.
            </summary>
      <param name="commad">The commad.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.RunSQLScriptWithGOString(System.String,System.String)">
      <summary>
            Runs the SQL script with GO string.
            </summary>
      <param name="scriptText">The script text.</param>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.RunSqlText(System.String,System.String)">
      <summary>
            Runs the SQL text.
            </summary>
      <param name="sqlText">The SQL text.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetTableListAsc(System.String,System.String)">
      <summary>
            Gets the table list in asc order of row count.
            </summary>
      <param name="database">The database.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.TableRowCount(System.String,System.String)">
      <summary>
            Tables the row count of entier database.
            </summary>
      <param name="databaseName">Name of the database.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.HashTableList(System.String,System.String)">
      <summary>
            Hashes the table list.
            TODO : Delete this not required for schema comparision
            </summary>
      <param name="database">The database.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetColumnsList(System.String,System.String)">
      <summary>
            Gets the columns list for specified table name.
            </summary>
      <param name="tablename">The tablename.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetPrimaryKeys(System.String,System.String)">
      <summary>
            Gets the primary keys for specified table.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.RunSQLString(System.String,System.String)">
      <summary>
            Runs the SQL string.
            </summary>
      <param name="SQLText">The SQL text.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.RunSQLString(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.String)">
      <summary>
            Runs the SQL string.
            </summary>
      <param name="SQLText">The SQL text.</param>
      <param name="parameters">The parameters.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.RunSQLString(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Int32,System.String)">
      <summary>
            Runs the SQL string/ script and return data set.
            </summary>
      <param name="SQLText">The SQL text.</param>
      <param name="parameters">The parameters.</param>
      <param name="time">The time.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.Run_SQL_String(System.String,System.String)">
      <summary>
            Runs the SQL string/ script and return data table
            Only first select will be return in this case.
            </summary>
      <param name="SQLText">The SQL text.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetTableSchemaNameByTableName(System.String,System.Data.DataTable)">
      <summary>
            Gets the name of the table schema name by table.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="tableSchemaInfo">The table schema info.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetCountByTableName(System.String,System.Data.DataTable)">
      <summary>
            Gets the row count of the table by table name.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="tableRowCount">The table row count.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GenerateTableCommonInfo(System.String,System.String)">
      <summary>
            Generates the table common info.
            This will get schema information on table object
            Rows in each table
            Primary and clusterd keys in each table
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GenerateStandAloneTableCommonInfo(System.String,System.String)">
      <summary>
            Get Stand alone table common info with default schema
            </summary>
      <param name="tableName">
      </param>
      <param name="connectionString">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GenerateStandAloneTableCommonInfo(System.String,System.String,System.String)">
      <summary>
            Get Stand alone table common info with schema information specified. 
            </summary>
      <param name="tableName">
      </param>
      <param name="connectionString">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GenerateDatabaseInfo(System.String)">
      <summary>
            Generates the database info.
            This will get schema information on entier database object
            Rows in each table
            Primary and clusterd keys in each table
            </summary>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetDefaultServerPath(System.String)">
      <summary>
            Gets the default server path.
            </summary>
      <param name="serverName">Name of the server.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetScriptSchemaInfo(System.String,System.String)">
      <summary>
            Gets the SQL script schema info.
            TODO: Will be used for ETL to ETL comparision or ETL to target table comparision
            </summary>
      <param name="sqlString">The SQL string.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetSpHelpInfoForSpecifiedObject(System.String,System.String)">
      <summary>
            Gets the sp help  info for specified object.
            </summary>
      <param name="name">The name. if schema is different please provide schema.name format</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetSpHelpIndexForSpecifiedObject(System.String,System.String)">
      <summary>
            Gets the sp help index info for specified object.
            </summary>
      <param name="name">The name. if schema is different please provide schema.name format</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.DataAccess.HashDatabase.GetSpHelpConstraintForSpecifiedObject(System.String,System.String)">
      <summary>
            Gets the sp help contraint info for specified object.
            </summary>
      <param name="name">The name. if schema is different please provide schema.name format</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="F:MAT.DataCompare.Core.Table.Result">
      <summary>
            Properties for stand alone table object
            </summary>
    </member>
    <member name="F:MAT.DataCompare.Core.Table._columnInfo">
      <summary>
            Properties for stand alone table object
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            TODO: Create stand alone table object with database name, server name, table name
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.#ctor(System.String,System.String,System.String)">
      <summary>
            TODO: Create stand alone table object with database name, server name, table name, for schema comparison API
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.extractScriptInfo(System.Text.StringBuilder)">
      <summary>
            Extracts the script info.
            This method validates the script and gets column info, column types etc
            </summary>
      <param name="contents">The contents.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.setIsDisabled(System.Boolean)">
      <summary>
            Sets the is disabled.
            </summary>
      <param name="val">The val.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.setMappedTableForScript(System.String)">
      <summary>
            Sets the mapped table for script.
            </summary>
      <param name="mappedTableName">Name of the mapped table.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.GenerateCommonInfoFromView">
      <summary>
            Gets database schema info
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.LoadTableObject">
      <summary>
            Create stand alone table object
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.GenerateCommonInfoFromViewForSchema">
      <summary>
            Gets database schema info
            </summary>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.Table.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.Script">
      <summary>
            Gets or sets the script.
            TODO : Use this object to compare ETL script vs target table
            </summary>
      <value>The script.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.TableName">
      <summary>
            Gets the name of the table.
            </summary>
      <value>The name of the table.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.TableNameInLowerCase">
      <summary>
            Gets tablename in lowercase
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.TableNameInUpperCase">
      <summary>
            Gets tablename in uppercase
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.Columns">
      <summary>
            Column collection on table level
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.ExcludeColumnList">
      <summary>
            Gets or sets the exclude column list.
            </summary>
      <value>The exclude column list.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.IsEnabled">
      <summary>
            Gets the is table enabled.
            </summary>
      <value>The is enabled.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.ScriptTableColumnInfo">
      <summary>
            Stores column info of a script provided
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.ScriptTablePrimaryKeys">
      <summary>
            Gets or sets the script table primary keys.
            </summary>
      <value>The script table primary keys.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.TableColumnInfo">
      <summary>
            Stores Column info of a database table
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.TablePrimaryKeys">
      <summary>
            Gets or sets the table primary keys.
            </summary>
      <value>The table primary keys.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.IsScriptTable">
      <summary>
            Gets or sets the is script table.
            </summary>
      <value>The is script table.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.DatabaseName">
      <summary>
            Gets or sets the name of the database.
            </summary>
      <value>The name of the database.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.ServerName">
      <summary>
            Gets or sets the name of the server.
            </summary>
      <value>The name of the server.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.ConnectionString">
      <summary>
            Gets or sets the connection string.
            </summary>
      <value>The connection string.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.TableSchemaInfo">
      <summary>
            Gets or sets the table schema info.
            </summary>
      <value>The table schema info.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.FilterClause">
      <summary>
            Gets or sets the filter clause.
            </summary>
      <value>The filter clause.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.LastRowCount">
      <summary>
            Gets or sets the  row count from data model views.
            </summary>
      <value>The last row count.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.ErrorMessage">
      <summary>
            Gets or sets the error message.
            </summary>
      <value>The error message.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.MappedTableName">
      <summary>
            Gets or sets the name of the mapped table.
            </summary>
      <value>The name of the mapped table.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.isMapped">
      <summary>
            Gets or sets the is mapped.
            </summary>
      <value>The is mapped.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.IsSkiped">
      <summary>
            Set true to indicate table skipped due to no primary keys or no rows in table
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.Table.Error">
      <summary>
            Set to indicate error occured 
            </summary>
    </member>
    <member name="T:MAT.Data.CompareWithType">
      <summary>
            Compare type to set which is expected
            Set LeftExpected ? when destination table schema is expected schema (any columns in destination should present in source except exclude column list) 
            RightExpected ? source table schema should present in destination except excluded columns
            BothEqual any difference in either side will be reported except exclude column list
            </summary>
    </member>
    <member name="T:MAT.Verify.ThrowsException">
      <summary>
            Exception thrown when code unexpectedly fails to throw an exception.
            </summary>
    </member>
    <member name="M:MAT.Verify.ThrowsException.#ctor(System.Type)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.ThrowsException" /> class. Call this constructor
            when no exception was thrown.
            </summary>
      <param name="expectedType">The type of the exception that was expected</param>
    </member>
    <member name="M:MAT.Verify.ThrowsException.#ctor(System.Type,System.Exception)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.ThrowsException" /> class. Call this constructor
            when an exception of the wrong type was thrown.
            </summary>
      <param name="expectedType">The type of the exception that was expected</param>
      <param name="actual">The actual exception that was thrown</param>
    </member>
    <member name="M:MAT.Verify.ThrowsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:MAT.Verify.ThrowsException.StackTrace">
      <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
      <returns>A string that describes the contents of the call stack, with the most recent method call appearing first.</returns>
    </member>
    <member name="T:MAT.Verify.NotSameException">
      <summary>
            Exception thrown when two values are unexpected the same instance.
            </summary>
    </member>
    <member name="M:MAT.Verify.NotSameException.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.NotSameException" /> class.
            </summary>
    </member>
    <member name="T:MAT.Verify.NotEqualException">
      <summary>
            Exception thrown when two values are unexpectedly equal.
            </summary>
    </member>
    <member name="M:MAT.Verify.NotEqualException.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.NotEqualException" /> class.
            </summary>
    </member>
    <member name="T:MAT.Files">
      <summary>
            Collection of methods for deleting files with retries and extracting embedded resources.
            </summary>
    </member>
    <member name="M:MAT.Files.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
      <summary>
            If reference assemblies are not found will search paths in %APPDATA%/MAT
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="args">The <see cref="T:System.ResolveEventArgs" /> instance containing the event data.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Files.SaveResourceBytes(System.Byte[],System.String,System.Boolean,System.String,System.Boolean)">
      <summary>
            Saves the resource bytes to a file and unzips if requested.
            </summary>
      <example>
        <para>Extract file to %APPDATA%\Core</para>
        <code>string pathToFile = Files.SaveResourceBytes(Resources.rename, "resourcename.ext");</code>
        <para>Extract zip file and expand to sub folder under %APPDATA%\Core</para>
        <code>string pathToFolder = Files.SaveResourceBytes(Resources.zipName, "zipName.zip", unzipFile: true, unzipSubFolder: "SubFolder"</code>
      </example>
      <param name="resourceBytes">The resource bytes.</param>
      <param name="extractedFileName">Name the extracted file will be saved as.  If only name is supplied (no path information) then Core Common Store location will be used.</param>
      <param name="unzipFile">if set to <c>true</c> bytes are assumed to be zip file and will be unzipped.</param>
      <param name="unzipSubFolder">If unzipFile is true file will unzip to this folder under the zip file location..</param>
      <param name="compareFiles">Compares bytes of file to resource and doesn't write to disk if files are identical.</param>
      <returns>Location of and file name unless unzipped file and then just path to extracted files.</returns>
    </member>
    <member name="M:MAT.Files.RegisterAssemblyResolve(System.String,System.String,System.String[])">
      <summary>
            Registers an assembly to resolve.
            </summary>
      <param name="resourceName">Name of the file in the resources to be extracted.</param>
      <param name="extractedName">Name of the file with extension after extraction.</param>
      <param name="assemblyNamesToResolve">List of resolve paths that cause this file to be extracted.  If <c>null</c> assumes same name as resourceName.  Full names can be
            used such as "TestClassLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" or just the first name part.</param>
    </member>
    <member name="M:MAT.Files.RegisterZipAssemblyResolve(System.String,System.String,System.String,System.String[])">
      <summary>
            Registers an assembly to resolve.
            </summary>
      <param name="resourceName">Name of the file in the resources to be extracted.</param>
      <param name="extractedName">Name of the file with extension after extraction.</param>
      <param name="unzipSubFolder">The unzip sub folder.</param>
      <param name="assemblyNamesToResolve">List of resolve paths that cause this file to be extracted and unzipped.  If <c>null</c> assumes same name as resourceName.  Full names can be
            used such as "TestClassLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" or just the first name part.</param>
    </member>
    <member name="M:MAT.Files.DeleteFileWithRetries(System.String)">
      <summary>
            Deletes the file with retries.
            </summary>
      <param name="file">The file.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Files.WriteFileWithRetries(System.String,System.Byte[])">
      <summary>
            Write the file with retries.
            </summary>
      <param name="file">The file.</param>
      <param name="fileBytes">File to write.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Files.DeleteFolderWithRetries(System.String)">
      <summary>
            Deletes the folder with retries.
            </summary>
      <param name="folder">The folder.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.Files.CommonStorePath">
      <summary>
            Gets the common store path that resources are stored (%APPDATA%/MAT)
            </summary>
      <value>The common store path.</value>
    </member>
    <member name="T:MAT.HttpAnalysis.Response">
      <summary>
            Encapsulates response information object from log entry
            </summary>
    </member>
    <member name="M:MAT.HttpAnalysis.Response.#ctor(HTTPAnalyzer.IResponse,HTTPAnalyzer.IResponseContent)">
      <summary>
            Saves wrapped object received as parameter
            </summary>
      <param name="baseResponse">Response object</param>
      <param name="baseContent">Response content object</param>
    </member>
    <member name="P:MAT.HttpAnalysis.Response.Content">
      <summary>
            Returns response binary data
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Response.IsCached">
      <summary>
            Indicates if content came from cache
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Response.IsCompressed">
      <summary>
            Indicates if content was compressed from the server
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Response.Headers">
      <summary>
            Holds a collection of response headers
            </summary>
    </member>
    <member name="P:MAT.HttpAnalysis.Response.Cookies">
      <summary>
            Holds a collection of response cookies
            </summary>
    </member>
    <member name="T:MAT.Data.CsvReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only
            access to Csv data.
            </summary>
      <remarks>Assumptions about the Csv File Format:
            1.  Each Csv record is seaprated by \r or \n or \r\n.
            2.  Csv fields are separated by a comma.
            3.  Leading and trailing space-characters (space and tab) adjacent to 
                comma field separators are ignored.
            4.  Fields with embedded commas must be delimited with double-quote character.
            5.  Fields that contain double quote characters must be surrounded by double-quotes,
                and the embedded double-quotes must each be represented by a pair of consecutive
                double quotes.
            6.  A field that contains embedded line-breaks must be surrounded by double-quotes.
            7.  Fields with leading or trailing spaces must be delimited with double quote characters.
            8.  Fields may always be delimited with double quotes.
            9.  A comment line is ignored. Comment line should have a # in front. # in the middle of
                the line is considered a normal character.</remarks>
    </member>
    <member name="F:MAT.Data.CsvReader._parseQuotedFields">
      <summary>
            Whether to treat quoted fields specially
            </summary>
    </member>
    <member name="F:MAT.Data.CsvReader.m_reader">
      <summary>
            The reader.
            </summary>
    </member>
    <member name="M:MAT.Data.CsvReader.#ctor(System.String)">
      <summary>
            Initializes a new instance of the CsvReader class
            with the specified file
            </summary>
      <param name="fileName">The path for the file containing Csv data</param>
    </member>
    <member name="M:MAT.Data.CsvReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the CsvReader class
            with the specified TextReader.  PLEASE NOTE: if you are using a
            network stream, you must wrap it with a BufferedStream before passing
            it in, or parsing will fail due to their implementation of Peek().
            </summary>
      <param name="reader">The TextReader containing the Csv data</param>
    </member>
    <member name="M:MAT.Data.CsvReader.ReadRecordHash">
      <summary>
            Reads the next Csv record from the reader as a Hashtable        
            </summary>
      <returns>Hashtable that represents a Csv record</returns>
      <remarks>If Fields property is not set this method 
            will throw an exception</remarks>
      <exception cref="T:MAT.Data.CsvReaderException">If Field property is not set
            or number of Fields in the record are not as same as in Field property</exception>
    </member>
    <member name="M:MAT.Data.CsvReader.ParseLine(System.String)">
      <summary>
            Parses the specified Csv line and returns a single record
            This static method can be used to quickly parse a Csv line
            instead of creating a class
            </summary>
      <param name="line">The Csv line that is to be parsed</param>
      <returns>The record that represets parsed Csv line</returns>
    </member>
    <member name="M:MAT.Data.CsvReader.ReadRecord">
      <summary>
            Reads the next Csv record from the reader as a string array
            </summary>
      <returns>The record that represents parsed Csv</returns>
      <exception cref="T:MAT.Data.CsvReaderException">If a quoted field is not terminated,
             or if there is data after terminal quotes</exception>
    </member>
    <member name="M:MAT.Data.CsvReader.Close">
      <summary>
            Closes the CsvReader and releases any system resources 
            associated with the CsvReader
            </summary>
    </member>
    <member name="M:MAT.Data.CsvReader.ParseCommentLine">
      <summary>
            Parses comment lines. # is the comment character
            </summary>
      <remarks>Should be overriden if need to parse comments in a different way.</remarks>
    </member>
    <member name="M:MAT.Data.CsvReader.Dispose">
      <summary>
            Implements Dispose method 
            </summary>
    </member>
    <member name="M:MAT.Data.CsvReader.Finalize">
      <summary>
            Finalize method
            </summary>
    </member>
    <member name="M:MAT.Data.CsvReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:MAT.Data.CsvReader.ParseQuotedFields">
      <summary>
            Gets or sets a value indicating whether to treat quoted fields specially.
            </summary>
      <value>
        <c>true</c> if parse quoted fields; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Data.CsvReader.Fields">
      <summary>
            The fields for the Csv data
            </summary>
    </member>
    <member name="T:MAT.Data.CsvReaderException">
      <summary>
            Represents CsvReader exceptions
            </summary>
    </member>
    <member name="M:MAT.Data.CsvReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Data.CsvReaderException" /> class.
            </summary>
    </member>
    <member name="M:MAT.Data.CsvReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Data.CsvReaderException" /> class.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:MAT.Data.CsvReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Data.CsvReaderException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:MAT.Data.CsvReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Data.CsvReaderException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="T:MAT.Data.CsvWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of 
            generating streams or files containing Csv data 
            </summary>
    </member>
    <member name="M:MAT.Data.CsvWriter.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the CsvWriter class
            using the specified file
            </summary>
      <param name="fileName">The path for the file to write to</param>
      <param name="quoteFields">Specifies if quoted fields are allowed</param>
    </member>
    <member name="M:MAT.Data.CsvWriter.#ctor(System.IO.TextWriter,System.Boolean)">
      <summary>
            Initializes a new instance of the CsvWriter class
            using the specified TextWriter
            </summary>
      <param name="writer">The TextWriter to write to</param>
      <param name="quoteFields">Specifies if quoted fields are allowed</param>
    </member>
    <member name="M:MAT.Data.CsvWriter.WriteRecord(System.Collections.IDictionary)">
      <summary>
            Writes out a Csv line to the writer based on the 
            Hash record.
            </summary>
      <param name="record">The hash record that represents Csv data for a line</param>
      <exception cref="T:MAT.Data.CsvWriterException">If Fields property is not defined or
            if number of Fields do not match</exception>
    </member>
    <member name="M:MAT.Data.CsvWriter.WriteComment(System.String)">
      <summary>
            Writes out a Csv comment line to the writer.
            </summary>
      <param name="comment">The hash record that represents Csv data for a line</param>
    </member>
    <member name="M:MAT.Data.CsvWriter.WriteRecord(System.Collections.IEnumerable)">
      <summary>
            Writes out a Csv line to the writer based on the 
            string array record.
            </summary>
      <param name="fields">The string array record that represents Csv data 
            for a line</param>
    </member>
    <member name="M:MAT.Data.CsvWriter.Join(System.Collections.IEnumerable,System.Boolean)">
      <summary>
            Joins the specified fields.
            </summary>
      <param name="fields">The fields.</param>
      <param name="allowQuotes">if set to <c>true</c> allow quotes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Data.CsvWriter.Close">
      <summary>
            Closes the CsvWriter and releases any system resources 
            associated with the CsvReader
            </summary>
    </member>
    <member name="M:MAT.Data.CsvWriter.Flush">
      <summary>
            Flushes this instance.
            </summary>
    </member>
    <member name="M:MAT.Data.CsvWriter.Dispose">
      <summary>
            Implements Dispose method 
            </summary>
    </member>
    <member name="M:MAT.Data.CsvWriter.Finalize">
      <summary>
            Finalize method
            </summary>
    </member>
    <member name="M:MAT.Data.CsvWriter.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:MAT.Data.CsvWriter.Fields">
      <summary>
            The Fields for the Csv data
            </summary>
    </member>
    <member name="P:MAT.Data.CsvWriter.Writer">
      <summary>
            The TextWriter to write to
            </summary>
    </member>
    <member name="T:MAT.Data.CsvWriterException">
      <summary>
            Represents CsvWriter exceptions
            </summary>
    </member>
    <member name="M:MAT.Data.CsvWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Data.CsvReaderException" /> class.
            </summary>
    </member>
    <member name="M:MAT.Data.CsvWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Data.CsvReaderException" /> class.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:MAT.Data.CsvWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Data.CsvReaderException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:MAT.Data.CsvWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Data.CsvReaderException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="T:MAT.Verify.AssertEx">
      <summary>
            This class provides extended Assertion functionality, specifically dateTime comparisons to a specific tolerance and null parity
            </summary>
    </member>
    <member name="T:MAT.Verify.AssertEx.ThrowsDelegate">
      <summary>
            Used by the Throws and DoesNotThrow methods.
            </summary>
    </member>
    <member name="T:MAT.Verify.AssertEx.ThrowsDelegateWithReturn">
      <summary>
            Used by the Throws and DoesNotThrow methods.
            </summary>
    </member>
    <member name="M:MAT.Verify.AssertEx.AreEqual(System.DateTime,System.DateTime,System.String)">
      <summary>
            Compares two dates with zero tolerance
            </summary>
      <param name="expected">Expected object</param>
      <param name="actual">Actual object</param>
      <param name="context">The name of the calling method and/or the field or parameter being verified</param>
    </member>
    <member name="M:MAT.Verify.AssertEx.AreEqual(System.DateTime,System.DateTime,System.TimeSpan,System.String)">
      <summary>
            Compares two dates are similar to plus or minus a specified tolerance
            </summary>
      <param name="expected">Expected object</param>
      <param name="actual">Actual object</param>
      <param name="tolerance">The time difference allowed. For example, 1 minute allows ranges in t+1 minute and t-1 minute</param>
      <param name="context">The name of the calling method and/or the field or parameter being verified</param>
    </member>
    <member name="M:MAT.Verify.AssertEx.DateTimesAreClose(System.DateTime,System.DateTime,System.TimeSpan,System.String)">
      <summary>
            Compares two dates are similar to plus or minus a specified tolerance, returns a bool
            </summary>
      <param name="expected">Expected object</param>
      <param name="actual">Actual object</param>
      <param name="tolerance">The time difference allowed. For example, 1 minute allows ranges in t+1 minute and t-1 minute</param>
      <param name="context">The name of the calling method and/or the field or parameter being verified</param>
    </member>
    <member name="M:MAT.Verify.AssertEx.GetFullDateString(System.DateTime)">
      <summary>
            Returns the full date string to full precision
            </summary>
      <param name="date">The date.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Verify.AssertEx.ArraysAreVerifiable(System.Array,System.Array,System.String)">
      <summary>
            Checks to make sure arrays are the same length
            </summary>
      <param name="expected">The expected.</param>
      <param name="actual">The actual.</param>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Verify.AssertEx.VerifyNullParity(System.Object,System.Object,System.String)">
      <summary>
            Makes sure actual and expected are both null or both non-null.
            </summary>
      <param name="expected">
      </param>
      <param name="actual">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:MAT.Verify.AssertEx.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Verifies that a collection contains a given object.
            </summary>
      <typeparam name="T">The type of the object to be verified</typeparam>
      <param name="expected">The object expected to be in the collection</param>
      <param name="collection">The collection to be inspected</param>
      <exception cref="T:MAT.Verify.ContainsException">Thrown when the object is not present in the collection</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that a collection contains a given object, using an equality comparer.
            </summary>
      <typeparam name="T">The type of the object to be verified</typeparam>
      <param name="expected">The object expected to be in the collection</param>
      <param name="collection">The collection to be inspected</param>
      <param name="comparer">The comparer used to equate objects in the collection with the expected object</param>
      <exception cref="T:MAT.Verify.ContainsException">Thrown when the object is not present in the collection</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Contains(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparer)">
      <summary>
            Verifies that a collection contains a given string, using a string comparer.
            </summary>
      <param name="expected">The string expected to be in the collection</param>
      <param name="collection">The collection to be inspected</param>
      <param name="comparer">The comparer used to equate objects in the collection with the expected string</param>
      <exception cref="T:MAT.Verify.ContainsException">Thrown when the string is not present in the collection</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Contains(System.String,System.String)">
      <summary>
            Verifies that a string contains a given sub-string, using the current culture.
            </summary>
      <param name="expectedSubString">The sub-string expected to be in the string</param>
      <param name="actualString">The string to be inspected</param>
      <exception cref="T:MAT.Verify.ContainsException">Thrown when the sub-string is not present inside the string</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Contains(System.String,System.String,System.StringComparison)">
      <summary>
            Verifies that a string contains a given sub-string, using the given comparison type.
            </summary>
      <param name="expectedSubString">The sub-string expected to be in the string</param>
      <param name="actualString">The string to be inspected</param>
      <param name="comparisonType">The type of string comparison to perform</param>
      <exception cref="T:MAT.Verify.ContainsException">Thrown when the sub-string is not present inside the string</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Verifies that a collection does not contain a given object.
            </summary>
      <typeparam name="T">The type of the object to be compared</typeparam>
      <param name="expected">The object that is expected not to be in the collection</param>
      <param name="collection">The collection to be inspected</param>
      <exception cref="T:MAT.Verify.DoesNotContainException">Thrown when the object is present inside the container</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that a collection does not contain a given object, using an equality comparer.
            </summary>
      <typeparam name="T">The type of the object to be compared</typeparam>
      <param name="expected">The object that is expected not to be in the collection</param>
      <param name="collection">The collection to be inspected</param>
      <param name="comparer">The comparer used to equate objects in the collection with the expected object</param>
      <exception cref="T:MAT.Verify.DoesNotContainException">Thrown when the object is present inside the container</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.DoesNotContain(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparer)">
      <summary>
            Verifies that a collection does not contain a given string, using a string comparer.
            </summary>
      <param name="expected">The string that is expected not to be in the collection</param>
      <param name="collection">The collection to be inspected</param>
      <param name="comparer">The comparer used to equate strings in the collection with the expected string</param>
      <exception cref="T:MAT.Verify.DoesNotContainException">Thrown when the string is present inside the container</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.DoesNotContain(System.String,System.String)">
      <summary>
            Verifies that a string does not contain a given sub-string, using the current culture.
            </summary>
      <param name="expectedSubString">The sub-string which is expected not to be in the string</param>
      <param name="actualString">The string to be inspected</param>
      <exception cref="T:MAT.Verify.DoesNotContainException">Thrown when the sub-string is present inside the string</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.DoesNotContain(System.String,System.String,System.StringComparison)">
      <summary>
            Verifies that a string does not contain a given sub-string, using the current culture.
            </summary>
      <param name="expectedSubString">The sub-string which is expected not to be in the string</param>
      <param name="actualString">The string to be inspected</param>
      <param name="comparisonType">The type of string comparison to perform</param>
      <exception cref="T:MAT.Verify.DoesNotContainException">Thrown when the sub-string is present inside the given string</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.DoesNotThrow(MAT.Verify.AssertEx.ThrowsDelegate)">
      <summary>
            Verifies that a block of code does not throw any exceptions.
            </summary>
      <param name="testCode">A delegate to the code to be tested</param>
    </member>
    <member name="M:MAT.Verify.AssertEx.Empty(System.Collections.IEnumerable)">
      <summary>
            Verifies that a collection is empty.
            </summary>
      <param name="collection">The collection to be inspected</param>
      <exception cref="T:System.ArgumentNullException">Thrown when the collection is null</exception>
      <exception cref="T:MAT.Verify.EmptyException">Thrown when the collection is not empty</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Equal``1(``0,``0)">
      <summary>
            Verifies that two objects are equal, using a default comparer.
            </summary>
      <typeparam name="T">The type of the objects to be compared</typeparam>
      <param name="expected">The expected value</param>
      <param name="actual">The value to be compared against</param>
      <exception cref="T:MAT.Verify.EqualException">Thrown when the objects are not equal</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that two objects are equal, using a custom equatable comparer.
            </summary>
      <typeparam name="T">The type of the objects to be compared</typeparam>
      <param name="expected">The expected value</param>
      <param name="actual">The value to be compared against</param>
      <param name="comparer">The comparer used to compare the two objects</param>
      <exception cref="T:MAT.Verify.EqualException">Thrown when the objects are not equal</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Equal(System.String,System.String,System.StringComparer)">
      <summary>
            Verifies that two strings are equal, using the given string comparer.
            </summary>
      <param name="expected">The expected value</param>
      <param name="actual">The value to be compared against</param>
      <param name="comparer">The comparer used to compare the two strings</param>
      <exception cref="T:MAT.Verify.EqualException">Thrown when the strings are not equal</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Equals(System.Object,System.Object)">
      <summary>Do not call this method.</summary>
    </member>
    <member name="M:MAT.Verify.AssertEx.False(System.Boolean)">
      <summary>
            Verifies that the condition is false.
            </summary>
      <param name="condition">The condition to be tested</param>
      <exception cref="T:MAT.Verify.FalseException">Thrown if the condition is not false</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.False(System.Boolean,System.String)">
      <summary>
            Verifies that the condition is false.
            </summary>
      <param name="condition">The condition to be tested</param>
      <param name="userMessage">The message to show when the condition is not false</param>
      <exception cref="T:MAT.Verify.FalseException">Thrown if the condition is not false</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.InRange``1(``0,``0,``0)">
      <summary>
            Verifies that a value is within a given range.
            </summary>
      <typeparam name="T">The type of the value to be compared</typeparam>
      <param name="actual">The actual value to be evaluated</param>
      <param name="low">The (inclusive) low value of the range</param>
      <param name="high">The (inclusive) high value of the range</param>
      <exception cref="T:MAT.Verify.InRangeException">Thrown when the value is not in the given range</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.InRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Verifies that a value is within a given range, using a comparer.
            </summary>
      <typeparam name="T">The type of the value to be compared</typeparam>
      <param name="actual">The actual value to be evaluated</param>
      <param name="low">The (inclusive) low value of the range</param>
      <param name="high">The (inclusive) high value of the range</param>
      <param name="comparer">The comparer used to evaluate the value's range</param>
      <exception cref="T:MAT.Verify.InRangeException">Thrown when the value is not in the given range</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.IsAssignableFrom``1(System.Object)">
      <summary>
            Verifies that an object is of the given type or a derived type.
            </summary>
      <typeparam name="T">The type the object should be</typeparam>
      <param name="object">The object to be evaluated</param>
      <returns>The object, casted to type T when successful</returns>
      <exception cref="T:MAT.Verify.IsAssignableFromException">Thrown when the object is not the given type</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.IsAssignableFrom(System.Type,System.Object)">
      <summary>
            Verifies that an object is of the given type or a derived type.
            </summary>
      <param name="expectedType">The type the object should be</param>
      <param name="object">The object to be evaluated</param>
      <exception cref="T:MAT.Verify.IsAssignableFromException">Thrown when the object is not the given type</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.IsNotType``1(System.Object)">
      <summary>
            Verifies that an object is not exactly the given type.
            </summary>
      <typeparam name="T">The type the object should not be</typeparam>
      <param name="object">The object to be evaluated</param>
      <exception cref="T:MAT.Verify.IsNotTypeException">Thrown when the object is the given type</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.IsNotType(System.Type,System.Object)">
      <summary>
            Verifies that an object is not exactly the given type.
            </summary>
      <param name="expectedType">The type the object should not be</param>
      <param name="object">The object to be evaluated</param>
      <exception cref="T:MAT.Verify.IsNotTypeException">Thrown when the object is the given type</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.IsType``1(System.Object)">
      <summary>
            Verifies that an object is exactly the given type (and not a derived type).
            </summary>
      <typeparam name="T">The type the object should be</typeparam>
      <param name="object">The object to be evaluated</param>
      <returns>The object, casted to type T when successful</returns>
      <exception cref="T:MAT.Verify.IsTypeException">Thrown when the object is not the given type</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.IsType(System.Type,System.Object)">
      <summary>
            Verifies that an object is exactly the given type (and not a derived type).
            </summary>
      <param name="expectedType">The type the object should be</param>
      <param name="object">The object to be evaluated</param>
      <exception cref="T:MAT.Verify.IsTypeException">Thrown when the object is not the given type</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.NotEmpty(System.Collections.IEnumerable)">
      <summary>
            Verifies that a collection is not empty.
            </summary>
      <param name="collection">The collection to be inspected</param>
      <exception cref="T:System.ArgumentNullException">Thrown when a null collection is passed</exception>
      <exception cref="T:MAT.Verify.NotEmptyException">Thrown when the collection is empty</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.NotEqual``1(``0,``0)">
      <summary>
            Verifies that two objects are not equal, using a default comparer.
            </summary>
      <typeparam name="T">The type of the objects to be compared</typeparam>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <exception cref="T:MAT.Verify.NotEqualException">Thrown when the objects are equal</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that two objects are not equal, using a custom equality comparer.
            </summary>
      <typeparam name="T">The type of the objects to be compared</typeparam>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="comparer">The comparer used to examine the objects</param>
      <exception cref="T:MAT.Verify.NotEqualException">Thrown when the objects are equal</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.NotEqual(System.String,System.String,System.StringComparer)">
      <summary>
            Verifies that two strings are not equal, using the given string comparer.
            </summary>
      <param name="expected">The expected string</param>
      <param name="actual">The actual string</param>
      <param name="comparer">The comparer used to examine the strings</param>
      <exception cref="T:MAT.Verify.NotEqualException">Thrown when the strings are equal</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.NotInRange``1(``0,``0,``0)">
      <summary>
            Verifies that a value is not within a given range, using the default comparer.
            </summary>
      <typeparam name="T">The type of the value to be compared</typeparam>
      <param name="actual">The actual value to be evaluated</param>
      <param name="low">The (inclusive) low value of the range</param>
      <param name="high">The (inclusive) high value of the range</param>
      <exception cref="T:MAT.Verify.NotInRangeException">Thrown when the value is in the given range</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.NotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Verifies that a value is not within a given range, using a comparer.
            </summary>
      <typeparam name="T">The type of the value to be compared</typeparam>
      <param name="actual">The actual value to be evaluated</param>
      <param name="low">The (inclusive) low value of the range</param>
      <param name="high">The (inclusive) high value of the range</param>
      <param name="comparer">The comparer used to evaluate the value's range</param>
      <exception cref="T:MAT.Verify.NotInRangeException">Thrown when the value is in the given range</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.NotNull(System.Object)">
      <summary>
            Verifies that an object reference is not null.
            </summary>
      <param name="object">The object to be validated</param>
      <exception cref="T:MAT.Verify.NotNullException">Thrown when the object is not null</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.NotSame(System.Object,System.Object)">
      <summary>
            Verifies that two objects are not the same instance.
            </summary>
      <param name="expected">The expected object instance</param>
      <param name="actual">The actual object instance</param>
      <exception cref="T:MAT.Verify.NotSameException">Thrown when the objects are the same instance</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Null(System.Object)">
      <summary>
            Verifies that an object reference is null.
            </summary>
      <param name="object">The object to be inspected</param>
      <exception cref="T:MAT.Verify.NullException">Thrown when the object reference is not null</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Same(System.Object,System.Object)">
      <summary>
            Verifies that two objects are the same instance.
            </summary>
      <param name="expected">The expected object instance</param>
      <param name="actual">The actual object instance</param>
      <exception cref="T:MAT.Verify.SameException">Thrown when the objects are not the same instance</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Single(System.Collections.IEnumerable)">
      <summary>
            Verifies that the given collection contains only a single
            element of the given type.
            </summary>
      <param name="collection">The collection.</param>
      <returns>The single item in the collection.</returns>
      <exception cref="T:MAT.Verify.SingleException">Thrown when the collection does not contain
            exactly one element.</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Verifies that the given collection contains only a single
            element of the given type.
            </summary>
      <typeparam name="T">The collection type.</typeparam>
      <param name="collection">The collection.</param>
      <returns>The single item in the collection.</returns>
      <exception cref="T:MAT.Verify.SingleException">Thrown when the collection does not contain
            exactly one element.</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>
            Verifies that the given collection contains only a single
            element of the given type which matches the given predicate.
            </summary>
      <typeparam name="T">The collection type.</typeparam>
      <param name="collection">The collection.</param>
      <param name="predicate">The item matching predicate.</param>
      <returns>The single item in the filtered collection.</returns>
      <exception cref="T:MAT.Verify.SingleException">Thrown when the filtered collection does
            not contain exactly one element.</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Throws``1(MAT.Verify.AssertEx.ThrowsDelegate)">
      <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            </summary>
      <typeparam name="T">The type of the exception expected to be thrown</typeparam>
      <param name="testCode">A delegate to the code to be tested</param>
      <returns>The exception that was thrown, when successful</returns>
      <exception cref="T:MAT.Verify.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Throws``1(MAT.Verify.AssertEx.ThrowsDelegateWithReturn)">
      <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            Generally used to test property accessors.
            </summary>
      <typeparam name="T">The type of the exception expected to be thrown</typeparam>
      <param name="testCode">A delegate to the code to be tested</param>
      <returns>The exception that was thrown, when successful</returns>
      <exception cref="T:MAT.Verify.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Throws(System.Type,MAT.Verify.AssertEx.ThrowsDelegate)">
      <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            </summary>
      <param name="exceptionType">The type of the exception expected to be thrown</param>
      <param name="testCode">A delegate to the code to be tested</param>
      <returns>The exception that was thrown, when successful</returns>
      <exception cref="T:MAT.Verify.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.Throws(System.Type,MAT.Verify.AssertEx.ThrowsDelegateWithReturn)">
      <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            Generally used to test property assessors.
            </summary>
      <param name="exceptionType">The type of the exception expected to be thrown</param>
      <param name="testCode">A delegate to the code to be tested</param>
      <returns>The exception that was thrown, when successful</returns>
      <exception cref="T:MAT.Verify.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.True(System.Boolean)">
      <summary>
            Verifies that an expression is true.
            </summary>
      <param name="condition">The condition to be inspected</param>
      <exception cref="T:MAT.Verify.TrueException">Thrown when the condition is false</exception>
    </member>
    <member name="M:MAT.Verify.AssertEx.True(System.Boolean,System.String)">
      <summary>
            Verifies that an expression is true.
            </summary>
      <param name="condition">The condition to be inspected</param>
      <param name="userMessage">The message to be shown when the condition is false</param>
      <exception cref="T:MAT.Verify.TrueException">Thrown when the condition is false</exception>
    </member>
    <member name="T:MAT.DataCompare.Core.SchemaCompareObject">
      <summary>
            Schema compare object
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareObject.SourceTable">
      <summary>
            Gets or sets the source table.
            </summary>
      <value>The source table.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareObject.DestinationTable">
      <summary>
            Gets or sets the destination table.
            </summary>
      <value>The destination table.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.SchemaCompareObject.ExcludeColumns">
      <summary>
            Gets or sets the exclude columns.
            </summary>
      <value>The exclude columns.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewSchemaCompareObject.SourceView">
      <summary>
            Gets or sets the source view.
            </summary>
      <value>The source view.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewSchemaCompareObject.DestinationView">
      <summary>
            Gets or sets the destination view.
            </summary>
      <value>The destination view.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewSchemaCompareObject.ExcludeColumns">
      <summary>
            Gets or sets the exclude columns.
            </summary>
      <value>The exclude columns.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.FunctionSchemaCompareObject.SourceFunction">
      <summary>
            Gets or sets the source function.
            </summary>
      <value>The source function.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.FunctionSchemaCompareObject.DestinationFunction">
      <summary>
            Gets or sets the destination function.
            </summary>
      <value>The destination function.</value>
    </member>
    <member name="T:MAT.DataCompare.Core.StoredProcedureSchemaCompareObject">
      <summary>
            Store proc comparision object
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.StoredProcedureSchemaCompareObject.SourceStoreProcedure">
      <summary>
            Gets or sets the source store procedure.
            </summary>
      <value>The source store procedure.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.StoredProcedureSchemaCompareObject.DestinationStoreProcedure">
      <summary>
            Gets or sets the destination store procedure.
            </summary>
      <value>The destination store procedure.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewTableSchemaCompareObject.SourceView">
      <summary>
            Gets or sets the source view.
            </summary>
      <value>The source view.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewTableSchemaCompareObject.DestinationTable">
      <summary>
            Gets or sets the destination table.
            </summary>
      <value>The destination table.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ViewTableSchemaCompareObject.ExcludeColumns">
      <summary>
            Gets or sets the exclude columns.
            </summary>
      <value>The exclude columns.</value>
    </member>
    <member name="M:MAT.DataCompare.Core.ParameterCompareResults.#ctor(MAT.DataCompare.Core.Parameter,MAT.DataCompare.Core.Parameter)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataCompare.Core.TableCompareResults" /> class.
            </summary>
      <param name="sourceParam">The source column.</param>
      <param name="destParam">The dest column.</param>
    </member>
    <member name="M:MAT.DataCompare.Core.ParameterCompareResults.CompareParamDifferences">
      <summary>
            Compares the column differences.
            </summary>
    </member>
    <member name="P:MAT.DataCompare.Core.ParameterCompareResults.SourceParameter">
      <summary>
            Gets the source parameter.
            </summary>
      <value>The source parameter.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ParameterCompareResults.DestinationParameter">
      <summary>
            Gets the destination parameter.
            </summary>
      <value>The destination parameter.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ParameterCompareResults.DiffStatus">
      <summary>
            Gets or sets the diff status.
            </summary>
      <value>The diff status.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ParameterCompareResults.SourceEntityName">
      <summary>
            Gets the name of the source entity.
            </summary>
      <value>The name of the source entity.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ParameterCompareResults.SourceColumnImage">
      <summary>
            Gets the source column image.
            </summary>
      <value>The source column image.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ParameterCompareResults.DestinationEntityName">
      <summary>
            Gets the name of the destination entity.
            </summary>
      <value>The name of the destination entity.</value>
    </member>
    <member name="P:MAT.DataCompare.Core.ParameterCompareResults.DestinationColumnImage">
      <summary>
            Gets the destination column image.
            </summary>
      <value>The destination column image.</value>
    </member>
    <member name="T:MAT.DataCompare.Core.DiffStatusEnum">
      <summary>
            Used to mark the column object with diff status
            </summary>
    </member>
    <member name="T:MAT.Verify.ContainsException">
      <summary>
            Exception thrown when a collection unexpectedly does not contain the expected value.
            </summary>
    </member>
    <member name="M:MAT.Verify.ContainsException.#ctor(System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.ContainsException" /> class.
            </summary>
      <param name="expected">The expected object value</param>
    </member>
    <member name="T:MAT.RunOnHomeThread">
      <summary>
            Creates a new STA thread to run a on.
            </summary>
    </member>
    <member name="F:MAT.RunOnHomeThread.TypeMissing">
      <summary>
            .Invoke() methods treat Type.Missing as a special case and attempt to use that type's default.  Special handling is used in the Trident layer to fix this 
            </summary>
    </member>
    <member name="M:MAT.RunOnHomeThread.Invoke(System.Delegate,System.Object[])">
      <summary>
            Invokes the specified target delegate.
            </summary>
      <param name="targetDelegate">The target delegate.</param>
      <param name="parameters">The parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.CommandLineParser.CustomValidator">
      <summary>
            Custom validator delegate
            </summary>
    </member>
    <member name="T:MAT.CommandLineParser.CustomValidatorParameters">
      <summary>
            Custom validator parameters
            </summary>
    </member>
    <member name="P:MAT.CommandLineParser.CustomValidatorParameters.SwitchName">
      <summary>
            Gets the name of the current switch.
            </summary>
      <value>The name of the switch.</value>
    </member>
    <member name="P:MAT.CommandLineParser.CustomValidatorParameters.SwitchValue">
      <summary>
            Gets the current switch value.
            </summary>
      <value>the current switch value.</value>
    </member>
    <member name="P:MAT.CommandLineParser.CustomValidatorParameters.SwitchProperty">
      <summary>
            Gets the current switch property.
            </summary>
      <value>The current switch property.</value>
    </member>
    <member name="P:MAT.CommandLineParser.CustomValidatorParameters.IsOptional">
      <summary>
            Gets a value indicating whether the current switch is optional.
            </summary>
      <value>
        <c>true</c> if this instance is optional; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:MAT.CommandLineParser.CustomValidatorParameters.IsDefined">
      <summary>
            Gets a value indicating whether the current switch is defined.
            </summary>
      <value>
        <c>true</c> if this instance is defined; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:MAT.CommandLineParser.CustomValidatorParameters.ExtendedState">
      <summary>
            Gets information about all other switches.
            </summary>
      <value>The state of all other switches.</value>
    </member>
    <member name="T:MAT.CommandLineParser.ExtendedSwitchParameters">
      <summary>
            Extended Switch Parameters
            </summary>
    </member>
    <member name="P:MAT.CommandLineParser.ExtendedSwitchParameters.GlobalSwitchState">
      <summary>
            Gets or sets the state of the global switch.
            </summary>
      <value>The state of the global switch.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ExtendedSwitchParameters.InputArguments">
      <summary>
            Gets or sets the input arguments.
            </summary>
      <value>The input arguments.</value>
    </member>
    <member name="P:MAT.CommandLineParser.ExtendedSwitchParameters.DefinedSwitches">
      <summary>
            Gets or sets the defined switches.
            </summary>
      <value>The defined switches.</value>
    </member>
    <member name="T:MAT.CommandLineParser.ValidForTypesAttribute">
      <summary>
            Instructs the validator engine to only pass if the property is one of the valid types.
            </summary>
    </member>
    <member name="M:MAT.CommandLineParser.ValidForTypesAttribute.#ctor(System.Type[])">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.CommandLineParser.ValidForTypesAttribute" /> class.
            </summary>
      <param name="validTypes">Types for which this validator is valid.</param>
    </member>
    <member name="P:MAT.CommandLineParser.ValidForTypesAttribute.ValidTypes">
      <summary>
            Gets or sets the valid types.
            </summary>
      <value>The valid types.</value>
    </member>
    <member name="T:MAT.StringParser">
      <summary>
            The StringParser class contains a set of utility functions for parsing of modifying strings specifically aimed towards HTML page results
            although XMLEncode is also included.
            </summary>
    </member>
    <member name="M:MAT.StringParser.GetTextBetween(System.String,System.String,System.String)">
      <summary>Returns the text between two parts of a string.</summary>
      <remarks>This code
            <code>GetTextBetween("This sentence is short.","sentence","short")</code> would return " is ".  
            Use nulls for beginning or end.  This <code>GetTextBetween("This sentence is short.", null, "sentence")</code>
            would return "This ".
            If the start and end Delimiters are not in the source then String.Empty is returned.
            </remarks>
      <param name="source">Content to search</param>
      <param name="startDelimiter">left side of search; null for beginning of source</param>
      <param name="endDelimiter">right side of search; null for end of source</param>
      <returns>Content between start and end or String.Empty if not found.</returns>
    </member>
    <member name="M:MAT.StringParser.GetTextBetween(System.String,System.String,System.String,System.Int32)">
      <summary>Returns the text between two parts of a string.</summary>
      <remarks>This code
            <code>GetTextBetween("This sentence is short.","sentence","short")</code> would return " is ".  
            Use nulls for beginning or end.  This <code>GetTextBetween("This sentence is short.", null, "sentence")</code>
            would return "This ".
            If the start and end Delimiters are not in the source then String.Empty is returned.
            </remarks>
      <param name="source">Content to search</param>
      <param name="startDelimiter">left side of search; null for beginning of source</param>
      <param name="endDelimiter">right side of search; null for end of source</param>
      <param name="startIndex">First character to start search at</param>
      <returns>Content between start and end or String.Empty if not found.</returns>
    </member>
    <member name="M:MAT.StringParser.GetTextBetween(System.String,System.String,System.String,System.Int32,System.Int32@)">
      <summary>Returns the text between two parts of a string.</summary>
      <remarks>This code
            <code>GetTextBetween("This sentence is short.","sentence","short")</code> would return " is ".  
            Use nulls for beginning or end.  This <code>GetTextBetween("This sentence is short.", null, "sentence")</code>
            would return "This ".
            If the start and end Delimiters are not in the source then String.Empty is returned.
            </remarks>
      <param name="source">Content to search</param>
      <param name="startDelimiter">left side of search; null for beginning of source</param>
      <param name="endDelimiter">right side of search; null for end of source</param>
      <param name="startIndex">First character to start search at</param>
      <param name="endIndex">(out) Index of last character of return (0 if not found)</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.StringParser.StripComments(System.String)">
      <summary>
            Removes comments from HTML text and any text between
            &lt;!-- is a comment --&gt;
            </summary>
      <param name="pageText">HTML text to parse</param>
      <returns>pageText without comments</returns>
    </member>
    <member name="M:MAT.StringParser.RemoveHtmlTags(System.String)">
      <summary>
            Removes any HTML tags and attribute text from the source content.
            Leaves text between tags.
            </summary>
      <param name="source">HTML source to strip</param>
      <returns>Plain text</returns>
    </member>
    <member name="M:MAT.StringParser.XmlEncode(System.String)">
      <summary>
            Encodes characters in a string that may be used as XML encodings.
            </summary>
      <param name="source">String to encode</param>
      <returns>Encoded string</returns>
    </member>
    <member name="T:MAT.Server.SqlJobExtensions">
      <summary>
            Extension class for Microsoft.SqlServer.Management.Smo.Agent.Job 
            </summary>
    </member>
    <member name="M:MAT.Server.SqlJobExtensions.RunJobNTimes(MAT.Server.SqlJob,System.Int32)">
      <summary>
            Run the job N number of times
            </summary>
      <param name="job">Name of the Sql Job</param>
      <param name="n">Number of times to run</param>
      <returns>If job ran status is succeeded for all the runs then returns true</returns>
    </member>
    <member name="M:MAT.Server.SqlJobExtensions.WaitForIdleJob(MAT.Server.SqlJob)">
      <summary>
            Wait for idle job.
            </summary>
      <param name="jobUnderTest">Name of the Sql Job</param>
    </member>
    <member name="M:MAT.Server.SqlJobExtensions.InvokeAndGetOutCome(MAT.Server.SqlJob)">
      <summary>
            Runs the referenced job and returns the outcome of the run .
            </summary>
    </member>
    <member name="T:MAT.Server.SqlEnterprise">
      <summary>
            Advanced class for SQL interaction
            </summary>
    </member>
    <member name="T:MAT.Server.SqlEnterprise.SqlConnectionOwnership">
      <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
      <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
      <param name="command">The command to which the parameters will be added</param>
      <param name="commandParameters">An array of SqlParameters to be added to command</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
      <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
      <param name="commandParameters">Array of SqlParameters to be assigned values</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
      <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
      <param name="commandParameters">Array of SqlParameters to be assigned values</param>
      <param name="parameterValues">Array of objects holding the values to be assigned</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
      <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
      <param name="command">The SqlCommand to be prepared</param>
      <param name="connection">A valid SqlConnection, on which to execute this command</param>
      <param name="transaction">A valid SqlTransaction, or 'null'</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
      <param name="mustCloseConnection">
        <c>true</c> if the connection was opened by the method, otherwose is false.</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
      <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
      <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQuery(System.String,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored prcedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
      <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
      <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDataset(System.String,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],MAT.Server.SqlEnterprise.SqlConnectionOwnership)">
      <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
      <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
      <param name="connection">A valid SqlConnection, on which to execute this command</param>
      <param name="transaction">A valid SqlTransaction, or 'null'</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
      <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
      <returns>SqlDataReader containing the results of the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.String,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.String,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
      <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
      <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalar(System.String,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
      <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
      <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
      <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
      <returns>An XmlReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>An XmlReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>An XmlReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
      <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
      <returns>An XmlReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <returns>An XmlReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
      <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
      <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
      <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
      <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="transaction">A valid SqlTransaction</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
      <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
      <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
      <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
      <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
      <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
      <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
      <param name="dataSet">The DataSet used to update the data source</param>
      <param name="tableName">The DataTable used to update the data source.</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
      <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
      <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
      <returns>A valid SqlCommand object</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
      <param name="transaction">A valid SqlTransaction object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>An int representing the number of rows affected by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
      <param name="transaction">A valid SqlTransaction object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>A dataset containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <param name="transaction">A valid SqlTransaction object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>A SqlDataReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <param name="transaction">A valid SqlTransaction object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>An XmlReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <param name="transaction">A valid SqlTransaction object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
      <returns>An XmlReader containing the resultset generated by the command</returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteSMONonQuery(System.String,System.String,System.Boolean)">
      <summary>
            This method executes a Sql file against a sql server as if you were running using a Sql Server Management studio.
            This method will only returns int as how many batch were run .
            This method does not allow any access to modify the connection/server settings.
            </summary>
      <param name="fileOrContent">The file or content to execute.</param>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteSMOReader(System.String,System.String,System.Boolean)">
      <summary>
            This method executes a Sql file against a sql server as if you were running using a Sql Server Management studio.
            This method will only returns a data reader. It assumes that the Sql File will only retuen a single result set.
            This method does not allow any access to modify the connection/server settings.
            </summary>
      <param name="fileOrContent">The file or content to execute.</param>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteSMOScalar``1(System.String,System.String,System.Boolean)">
      <summary>
            This method executes a Sql file against a sql server as if you were running using a Sql Server Management studio.
            This method will only returns a scalar.
            This method does not allow any access to modify the connection/server settings.
            </summary>
      <param name="fileOrContent">The file or content to execute.</param>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.ExecuteSMODataSet(System.String,System.String,System.Boolean)">
      <summary>
            This method executes a Sql file against a sql server as if you were running using a Sql Server Management studio.
            This method will return a data set and can handle mutiple results sets.
            This method does not allow any access to modify the connection/server settings.
            </summary>
      <param name="fileOrContent">The file or content to execute.</param>
      <param name="connectionString">The connection string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlEnterprise.IsObjectExist(System.String,MAT.Server.SqlEnterprise.DatabaseObjectType,System.String)">
      <summary>
            Determines the existence of basic objects in a sql server.
            </summary>
      <param name="connection">The connection string.</param>
      <param name="objectName">Name of DB, Table or StoreProc to search for</param>
      <param name="objectType">Type of object to search for</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.Server.SqlHelperParameterCache">
      <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
    </member>
    <member name="M:MAT.Server.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
      <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
      <returns>The parameter array discovered.</returns>
    </member>
    <member name="M:MAT.Server.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
      <summary>
            Deep copy of cached SqlParameter array
            </summary>
      <param name="originalParameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Server.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Add parameter array to the cache
            </summary>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters to be cached</param>
    </member>
    <member name="M:MAT.Server.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
      <summary>
            Retrieve a parameter array from the cache
            </summary>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <returns>An array of SqlParamters</returns>
    </member>
    <member name="M:MAT.Server.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
      <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
      <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <returns>An array of SqlParameters</returns>
    </member>
    <member name="M:MAT.Server.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
      <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
      <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
      <returns>An array of SqlParameters</returns>
    </member>
    <member name="M:MAT.Server.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
      <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
      <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <returns>An array of SqlParameters</returns>
    </member>
    <member name="M:MAT.Server.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
      <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
      <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
      <returns>An array of SqlParameters</returns>
    </member>
    <member name="M:MAT.Server.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
      <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
      <param name="connection">A valid SqlConnection object</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
      <returns>An array of SqlParameters</returns>
    </member>
    <member name="T:MAT.Security.Permissions">
      <summary>
            This class contains a list of functions useful in determining and modifying certain security group permissions
            </summary>
    </member>
    <member name="M:MAT.Security.Permissions.UserHasRunAsBatchPermissions(System.String)">
      <summary>
            Determines if the user can run batch files from a scheduled tasks.  By default these groups have the correct permissions: "Backup Operators", "Administrators", "ASPNET", "Performance Log Users"
            </summary>
      <param name="userNameAndDomain">Domain (ie REDMOND) \ UserName</param>
    </member>
    <member name="M:MAT.Security.Permissions.UserHasRunAsBatchPermissions(System.String,System.String)">
      <summary>
            Determines if the user can run batch files from a scheduled tasks.  By default these groups have the correct permissions: "Backup Operators", "Administrators", "ASPNET", "Performance Log Users"
            </summary>
      <param name="domain">Domain (ie REDMOND)</param>
      <param name="userName">User Name</param>
    </member>
    <member name="M:MAT.Security.Permissions.UserHasRunAsBatchPermissions(System.String,System.String,System.String)">
      <summary>
            Determines if the user can run batch files from a scheduled tasks.  By default these groups have the correct permissions: "Backup Operators", "Administrators", "ASPNET", "Performance Log Users"
            </summary>
      <param name="machine">Machine to verify permissions on.</param>
      <param name="domain">Domain (ie REDMOND)</param>
      <param name="userName">User Name</param>
    </member>
    <member name="M:MAT.Security.Permissions.UserExistsInLocalGroup(System.String,System.String,System.String[])">
      <summary>
            Dertermines if a user belongs to a local security group.
            </summary>
      <param name="domain">Domain (ie REDMOND)</param>
      <param name="userName">User Name</param>
      <param name="groupNames">List of groups to search for permissions in.</param>
    </member>
    <member name="M:MAT.Security.Permissions.UserExistsInLocalGroup(System.String,System.String,System.String,System.String[])">
      <summary>
            Dertermines if a user belongs to a local security group.
            </summary>
      <param name="machine">Machine to verify permissions on.</param>
      <param name="domain">Domain (ie REDMOND)</param>
      <param name="userName">User Name</param>
      <param name="groupNames">List of groups to search for permissions in.</param>
    </member>
    <member name="M:MAT.Security.Permissions.AddUserToLocalGroup(System.String,System.String[])">
      <summary>
            Adds a user to security groups if they exist.
            </summary>
      <param name="userNameAndDomain">Domain (ie REDMOND) \ UserName</param>
      <param name="groupNames">List of groups to add permissions in.</param>
    </member>
    <member name="M:MAT.Security.Permissions.AddUserToLocalGroup(System.String,System.String,System.String[])">
      <summary>
            Adds a user to security groups if they exist.
            </summary>
      <param name="domain">Domain (ie REDMOND)</param>
      <param name="userName">User Name</param>
      <param name="groupNames">List of groups to add permissions in.</param>
    </member>
    <member name="M:MAT.Security.Permissions.AddUserToLocalGroup(System.String,System.String,System.String,System.String[])">
      <summary>
            Adds a user to security groups if they exist.
            </summary>
      <param name="machine">Machine to add to.</param>
      <param name="domain">Domain (ie REDMOND)</param>
      <param name="userName">User Name</param>
      <param name="groupNames">List of groups to add permissions in.</param>
    </member>
    <member name="M:MAT.Security.Permissions.RemoveUserFromLocalGroup(System.String,System.String,System.String[])">
      <summary>
            Removes a user to security groups if they exist.
            </summary>
      <param name="domain">Domain (ie REDMOND)</param>
      <param name="userName">User Name</param>
      <param name="groupNames">List of groups to remove permissions in.</param>
    </member>
    <member name="M:MAT.Security.Permissions.RemoveUserFromLocalGroup(System.String,System.String,System.String,System.String[])">
      <summary>
            Removes a user to security groups if they exist.
            </summary>
      <param name="machine">Machine to remove from.</param>
      <param name="domain">Domain (ie REDMOND)</param>
      <param name="userName">User Name</param>
      <param name="groupNames">List of groups to remove permissions in.</param>
    </member>
    <member name="M:MAT.Security.Permissions.IsMemberOfSecurityGroup(System.String,System.String)">
      <summary>
            Determines whether user is a member of the specified security group.
            </summary>
      <param name="securityGroup">The security group. Can be in format Name, DOMAIN\Name, DOMAIN\ACCNT</param>
      <param name="userAccount">The user (assumes current user if null or missing).  If added expected DOMAIN\USER format.  Will assume REDMOND is domain is not given.</param>
      <returns>
        <c>true</c> if is member of the specified security group; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentException">This error is thrown if the security group specified is not a security group (possibly a DL only group), or a known name (not existing)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">This error is thrown if user == null and the user is not an authenticated NTACCOUNT.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if securityGroup is null or empty</exception>
    </member>
    <member name="M:MAT.Security.Permissions.IsServiceAccount(System.String)">
      <summary>
            Determines whether the user account belongs to [DOMAIN]\All Service Accounts in [DOMAIN]
            </summary>
      <param name="userAccount">The service account in DOMAIN\\alias format.</param>
      <returns>
        <c>true</c> if not a member of service accounts group; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:MAT.Security.Permissions.GetSecurityGroups(System.String)">
      <summary>
            Gets a list of security groups user account belongs to (in SamAccount format [domain\alias]).
            </summary>
      <param name="userAccount">The user (assumes current user if null or missing).  If added expected DOMAIN\USER format.  Will assume REDMOND is domain is not given.</param>
      <returns>
        <c>true</c> if is member of the specified security group; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentException">This error is thrown if the security group specified is not a security group (possibly a DL only group), or a known name (not existing)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">This error is thrown if user == null and the user is not an authenticated NTACCOUNT.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if securityGroup is null or empty</exception>
    </member>
    <member name="M:MAT.Security.Permissions.GetDistributionLists(System.String)">
      <summary>
            Gets a list of security groups user account belongs to (returns aliases).
            </summary>
      <param name="userAccount">The user (assumes current user if null or missing).  If added expected DOMAIN\USER format.  Will assume REDMOND is domain is not given.</param>
      <returns>
        <c>true</c> if is member of the specified security group; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentException">This error is thrown if the security group specified is not a security group (possibly a DL only group), or a known name (not existing)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">This error is thrown if user == null and the user is not an authenticated NTACCOUNT.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if securityGroup is null or empty</exception>
    </member>
    <member name="M:MAT.Security.Permissions.IsExtendedPasswordResetServiceAccount(System.String)">
      <summary>
            Determines whether [is extended password reset service account] [the specified user account].
            </summary>
      <param name="userAccount">The user account.</param>
      <returns>
        <c>true</c> if [is extended password reset service account] [the specified user account]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:MAT.Security.Permissions.IsSecurityGroup(System.String)">
      <summary>
            Determines whether string is a security group.
            </summary>
      <param name="securityGroup">The security group (DOMAIN\\alias, DOMAIN\name, name@domain, and Distinguished name formats accepted).</param>
      <returns>
        <c>true</c> if the specified string is a security group; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if securityGroup is null or empty</exception>
    </member>
    <member name="M:MAT.Security.Permissions.IsValidUserAccount(System.String)">
      <summary>
            Determines whether string is a valid user account.
            </summary>
      <param name="userAccount">The user account. Must be in SAMM Account name. ex: 'REDMOND\testacct' vs display name or 'Test Account'</param>
      <returns>
        <c>true</c> if the specified string is a user account; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if userAccount is null or empty</exception>
      <exception cref="T:System.ArgumentException">User account must be in DOMAIN\\alias format.</exception>
    </member>
    <member name="M:MAT.Security.Permissions.IsValidUserAccountPattern(System.String)">
      <summary>
            Determines whether account string is valid user account pattern.
            </summary>
      <param name="userAccount">The user account.</param>
    </member>
    <member name="M:MAT.Security.Permissions.IsValidCredentials(System.String,System.String)">
      <summary>
            Determines whether these are valid credentials.
            </summary>
      <param name="userAccount">The user account (DOMAIN\\alias).</param>
      <param name="password">The password.</param>
      <returns>
        <c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">All arguments must not be null or empty.</exception>
      <exception cref="T:System.ArgumentException">User account must be in a valid DOMAIN\\alias format.</exception>
    </member>
    <member name="M:MAT.Security.Permissions.IsValidCredentials(System.String,System.Security.SecureString)">
      <summary>
            Determines whether these are valid credentials.
            </summary>
      <param name="userAccount">The user account.</param>
      <param name="password">The password.</param>
      <returns>
        <c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">All arguments must not be null or empty.</exception>
    </member>
    <member name="M:MAT.Security.Permissions.GetDaysUntilPasswordExpires(System.String)">
      <summary>
            Find Days left until password expires.
            </summary>
      <remarks>Uses the standard password reset length for the user account DOMAIN unless the account is a member of security group FGPPSAGroup and then 380 days is used.</remarks>
      <param name="userAccount">The user account (in DOMAIN\\alias format).</param>
      <returns>Days until the password expires.  If already expired returns 0.</returns>
      <exception cref="T:System.ArgumentNullException">All arguments must not be null or empty.</exception>
      <exception cref="T:System.ArgumentException">User account must be in DOMAIN\\alias format.</exception>
    </member>
    <member name="M:MAT.Security.Permissions.GetUserEmail(System.String)">
      <summary>
            Gets the users email.  Null if not an email account.
            </summary>
      <param name="userAccount">The user account (in DOMAIN\\alias format).</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">All arguments must not be null or empty.</exception>
      <exception cref="T:System.ArgumentException">User account must be in DOMAIN\\alias format.</exception>
    </member>
    <member name="M:MAT.Security.Permissions.GetDisplayName(System.String)">
      <summary>
            Gets the users outlook display name.  Null if not an email account.
            </summary>
      <param name="userAccount">The user account (in DOMAIN\\alias format).</param>
      <returns>Display name</returns>
      <exception cref="T:System.ArgumentNullException">All arguments must not be null or empty.</exception>
      <exception cref="T:System.ArgumentException">User account must be in DOMAIN\\alias format.</exception>
    </member>
    <member name="M:MAT.Security.Permissions.GetNameFromDN(System.String)">
      <summary>
            Gets the users DOMAIN\Alias based off a distinguished name (i.e. CN=Ryan Farber,OU=UserAccounts,DC=redmond,DC=corp,DC=microsoft,DC=com)
            </summary>
      <param name="distinguishedName">The user account (in DOMAIN\\alias format).</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">All arguments must not be null or empty.</exception>
      <exception cref="T:System.ArgumentException">User account must be in DOMAIN\\alias format.</exception>
    </member>
    <member name="M:MAT.Security.Permissions.GetDirectoryProperty(System.String,System.String,System.String[])">
      <summary>
            Gets the directory property results from 
            </summary>
      <param name="domain">User domain</param>
      <param name="filterOrSamAccountOrName">User alias</param>
      <param name="properties">The properties to retrieve. (memberof, mail, displayname, manager, telephonenumber, thumbnailphoto, title, department, physicaldeliveryofficename)</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Security.Permissions.GetStandardDomainMaxPasswordAge(System.String)">
      <summary>
            Returns the standard server reset time.  The time can be overridden for example when a user belongs to the 
            service accounts group the age is 380 versus the current microsoft default age of 70.
            </summary>
    </member>
    <member name="M:MAT.Security.Permissions.ChangePassword(System.String,System.String,System.String)">
      <summary>
            Changes the password.
            </summary>
      <param name="userAccount">The user account.</param>
      <param name="oldPassword">The old password.</param>
      <param name="newPassword">The new password.</param>
      <remarks>Create a password that uses a minimum of 15 characters and contains at least one upper case letter, lower case letter, special character, and number. For example, 4sc0re@nd7y3arSag0 is a qualified password.</remarks>
      <exception cref="T:System.Runtime.InteropServices.COMException">Unknown user or bad password.</exception>
      <exception cref="T:System.ArgumentException">UserAccount and Password are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">userAccount, oldPassword or newPassword is null or empty.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Bad password in new or old.</exception>
    </member>
    <member name="M:MAT.Security.Permissions.GetFileSecurityAccounts(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
      <summary>
            Gets the accounts that have the specified permissions for the given file.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="rights">The rights.</param>
      <param name="controlType">Type of the control.</param>
      <returns>List of accounts.</returns>
      <exception cref="T:System.IO.FileNotFoundException">
      </exception>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:MAT.Security.Permissions.AddSecurityRuleToFile(System.String,System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
      <summary>
            Adds the rule.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="account">The account.</param>
      <param name="rights">The rights.</param>
      <param name="controlType">Type of the control.</param>
      <exception cref="T:System.IO.FileNotFoundException">
      </exception>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:MAT.Security.Permissions.SetSecurityRuleOnFile(System.String,System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
      <summary>
            Sets the rule.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="account">The account.</param>
      <param name="rights">The rights.</param>
      <param name="controlType">Type of the control.</param>
      <exception cref="T:System.IO.FileNotFoundException">
      </exception>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:MAT.Security.Permissions.RemoveSecurityRuleFromFile(System.String,System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
      <summary>
            Removes the rule.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="account">The account.</param>
      <param name="rights">The rights.</param>
      <param name="controlType">Type of the control.</param>
      <exception cref="T:System.IO.FileNotFoundException">
      </exception>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.ArgumentException">
      </exception>
    </member>
    <member name="M:MAT.Security.Permissions.RemoveAllSecurityRulesFromFile(System.String,System.String)">
      <summary>
            Removes all rules.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="account">The account.</param>
      <exception cref="T:System.IO.FileNotFoundException">
      </exception>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="T:MAT.DataCompare.Core.LogicalOperator">
      <summary>
            Logical operator for filter settings
            </summary>
    </member>
    <member name="T:MAT.Verify.TrueException">
      <summary>
            Exception thrown when a value is unexpectedly false.
            </summary>
    </member>
    <member name="M:MAT.Verify.TrueException.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:MAT.Verify.TrueException" /> class.
            </summary>
      <param name="userMessage">The user message to be displayed, or null for the default message</param>
    </member>
    <member name="T:MAT.Deployment.Core.ServiceVerifier">
      <summary>
            Encapsulates service attributes on a computer. Calls are made using WMI
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.ServiceVerifier.#ctor(System.String,System.String)">
      <summary>
            Creates an object encapsulating service data inquiry
            </summary>
      <param name="computerName">Computer Name</param>
      <param name="serviceName">Unique identifier for Service</param>
    </member>
    <member name="T:MAT.Deployment.Services.ICommand">
      <summary>
            Classes extending DeploymentVerification services must implement this interface
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.ServiceCommand">
      <summary>
            Encapsulates service verification command processing
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.ServiceCommand.State">
      <summary>
            Available service states
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.ServiceCommand.StartMode">
      <summary>
            Avalable service start modes
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.ServiceCommand.#ctor">
      <summary>
            Parameterless constructor, required for interface use
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.ServiceCommand.Create(System.Xml.Linq.XElement,MAT.Deployment.Services.DeploymentVerifier)">
      <summary>
            Creates a ServiceCommand object by reading XML structure
            </summary>
      <param name="node">XML node</param>
      <param name="parent">DeploymentVerifier Instance</param>
    </member>
    <member name="M:MAT.Deployment.Services.ServiceCommand.SetServers(System.String[])">
      <summary>
            Allows Verifier to set servers to check if no explicit list was defined
            </summary>
      <param name="verifyServers">List of server names to check</param>
    </member>
    <member name="M:MAT.Deployment.Services.ServiceCommand.Verify">
      <summary>
            Perform the service verification
            </summary>
      <returns>Verification success of failure</returns>
    </member>
    <member name="P:MAT.Deployment.Services.ServiceCommand.VerificationLog">
      <summary>
            Log for verification results
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.RegistryCommand">
      <summary>
            Encapsulates registry verification command processing
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.RegistryCommand.Tree">
      <summary>
            Available Tree Roots
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.RegistryCommand.ValueType">
      <summary>
            Avalable registry value types
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.RegistryCommand.#ctor">
      <summary>
            Parameterless constructor, required for interface use
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.RegistryCommand.Create(System.Xml.Linq.XElement,MAT.Deployment.Services.DeploymentVerifier)">
      <summary>
            Creates a RegistryCommand object by reading XML structure
            </summary>
      <param name="node">XML node</param>
      <param name="parent">DeploymentVerifier Instance</param>
    </member>
    <member name="M:MAT.Deployment.Services.RegistryCommand.SetServers(System.String[])">
      <summary>
            Allows Verifier to set servers to check if no explicit list was defined
            </summary>
      <param name="verifyServers">List of server names to check</param>
    </member>
    <member name="M:MAT.Deployment.Services.RegistryCommand.Verify">
      <summary>
            Perform the service verification
            </summary>
      <returns>Verification success of failure</returns>
    </member>
    <member name="P:MAT.Deployment.Services.RegistryCommand.VerificationLog">
      <summary>
            Log for verification results
            </summary>
    </member>
    <member name="T:MAT.Deployment.Core.GACVerifier">
      <summary>
            Class to verify an assembly is found in a local or remote GAC. Uses WMI to get remote System Path, and network access to query for files
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.GACVerifier.#ctor(System.String)">
      <summary>
            Constructor for local GAC search
            </summary>
      <param name="computerName">Remote computer name</param>
    </member>
    <member name="M:MAT.Deployment.Core.GACVerifier.VerifyAssemblyByPartialVersion(System.String,System.String,System.String,System.String)">
      <summary>
            Finds an assembly in computer based in one or more parameters. Use null for unknown values
            </summary>
      <param name="name">Assembly name</param>
      <param name="version">Assembly version</param>
      <param name="publicKeyToken">Assembly Public Key Token</param>
      <param name="locale">Assembly locale/culture</param>
      <returns>True if assembly was found</returns>
    </member>
    <member name="T:MAT.Deployment.Services.DeploymentVerifier">
      <summary>
            Main class for Deployment Verification using a manifest and/or commands
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.#ctor(System.String)">
      <summary>
            Loads a manifest file
            </summary>
      <param name="configPath">Full path for manifest file</param>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.#ctor(System.Xml.Linq.XDocument)">
      <summary>
            Creates a verifier object based on an in-memory manifest
            </summary>
      <param name="manifest">manifest to use</param>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.#ctor(System.String[])">
      <summary>
            Creates a verifier object based on an empty manifest
            </summary>
      <param name="serversToVerify">serversToVerify</param>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.Initialize">
      <summary>
            Initialize lists
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.LoadManifest">
      <summary>
            Load sections and commands contained in manifest
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.LoadSettings">
      <summary>
            Load Settings values contained in the manifest
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.LoadServers">
      <summary>
            Load Servers values contained in the manifest
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.LoadCommands(System.String,System.String,System.Type)">
      <summary>
            Read from manifest commands matching the specified scope
            </summary>
      <param name="parentNodeName">Parent element name</param>
      <param name="nodeName">Element name</param>
      <param name="commandType">Type implementing the ICommand interface</param>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.LoadCustomFileVerifier(System.String,System.Type)">
      <summary>
            Allows extending File verification functionalities via reading extra attributes in "File" element 
            </summary>
      <param name="attributeName">Attribute to read at File element in manifest</param>
      <param name="fileVerifierType">Class implementing the file verification</param>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.AddCommand(MAT.Deployment.Services.ICommand)">
      <summary>
            Add a command object to verification, outside of XML scope
            </summary>
      <param name="command">Command object</param>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.AddVariable(System.String,System.String)">
      <summary>
            Adds a user defined variable to list
            </summary>
      <param name="name">Variable Name. It should start and end with *</param>
      <param name="value">Variable value</param>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.ReplaceValue(System.String)">
      <summary>
            Replace a command value according with defined variables 
            </summary>
      <param name="literalValue">value to search</param>
      <returns>replaced value</returns>
    </member>
    <member name="M:MAT.Deployment.Services.DeploymentVerifier.RunVerification(System.Boolean)">
      <summary>
            Performs each verification command and returns result and log
            </summary>
      <param name="logOnlyFailures">If false then both success and failure entries are reported</param>
      <returns>Verification overall result. False if any of the commands failed</returns>
    </member>
    <member name="P:MAT.Deployment.Services.DeploymentVerifier.RunAs">
      <summary>
            Performs verification using specific credentials (current user if null)
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.Variable">
      <summary>
            Encapsulates variable replacement in commands
            </summary>
    </member>
    <member name="T:MAT.Deployment.Core.DeployFolder">
      <summary>
            Encapsulates Folder verification logic
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFolder.#ctor(MAT.Deployment.Core.DeployFolder,System.String,System.Boolean,MAT.Deployment.Core.DeployFolder.FolderType)">
      <summary>
            Initializes folder object
            </summary>
      <param name="parent">Parent folder object</param>
      <param name="folderName">Directory name</param>
      <param name="shouldExist">Existence Check</param>
      <param name="type">Indicates if provided directory name is relative or absolute. It's expected to be absolute only for first level folders</param>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFolder.#ctor(MAT.Deployment.Core.SharedString,System.String,System.Boolean)">
      <summary>
            Initializes a first level folder object
            </summary>
      <param name="computerName">Computer Name reference from FS root object, i.e.: \\server1\</param>
      <param name="folderName">Directory name</param>
      <param name="shouldExist">Existence Check</param>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFolder.AddSubfolder(System.String,System.Boolean)">
      <summary>
            Adds a subdirectory into verification list for this folder
            </summary>
      <param name="relativeFolderName">Directory name without path</param>
      <param name="shouldExist">Existence check</param>
      <returns>DeployFolder object created. Use this object to add subfolders/files to verify</returns>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFolder.AddFile(System.String,System.Boolean)">
      <summary>
            Adds a file into verification list for this folder
            </summary>
      <param name="fileName">FileName without path</param>
      <param name="shouldExists">Existence check</param>
      <returns>DeployFile object created. Use this object to add custom verification tasks</returns>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFolder.ClearVerification">
      <summary>
            Reset verification status
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFolder.Verify">
      <summary>
            Executes verification for each requested file/folder, plus generate lists of extra items
            </summary>
      <returns>True is verification for folder and contained items was successful</returns>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFolder.AbsoluteName">
      <summary>
            Encapsulates relative and absolute path complexity
            </summary>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFolder.ExtraFolders">
      <summary>
            List of extra folders found inside this folder
            </summary>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFolder.Status">
      <summary>
            Verification status
            </summary>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFolder.AllowExtraItems">
      <summary>
            Instructs if verification passes when extra files/folders are found
            </summary>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFolder.ExtraFiles">
      <summary>
            List of extra files found inside this folder
            </summary>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFolder.Files">
      <summary>
            Gets a collection containing DeployFile objects related to the folder
            </summary>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFolder.Folders">
      <summary>
            Gets a collection containing DeployFolder objects related to the folder
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.SqlCommand">
      <summary>
            Encapsulates SqlServer objects verification command processing
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SqlCommand.#ctor">
      <summary>
            Parameterless constructor, required for interface use
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SqlCommand.Create(System.Xml.Linq.XElement,MAT.Deployment.Services.DeploymentVerifier)">
      <summary>
            Creates a SqlCommand object by reading XML structure
            </summary>
      <param name="node">XML node</param>
      <param name="parent">DeploymentVerifier Instance</param>
    </member>
    <member name="M:MAT.Deployment.Services.SqlCommand.AddObjectToVerify(System.String,MAT.Deployment.Services.SqlObjectVerifier.ObjectType,System.Boolean)">
      <summary>
            Add an object(db,table,sp,view,job) to the verification list
            </summary>
      <param name="objName">Object name</param>
      <param name="type">Object type</param>
      <param name="shouldExist">True for queries or if the object should exists in DB</param>
      <returns>A reference to the added object to allow adding fields validators</returns>
    </member>
    <member name="M:MAT.Deployment.Services.SqlCommand.AddTriggerToVerify(System.String,System.String,System.Boolean)">
      <summary>
            Add a trigger to the verification list
            </summary>
      <param name="triggerName">Trigger Name</param>
      <param name="tableName">Table associated to the trigger</param>
      <param name="shouldExist">True if the object should exists in DB</param>
      <returns>A reference to the added object to allow adding fields validators</returns>
    </member>
    <member name="M:MAT.Deployment.Services.SqlCommand.GetConnections">
      <summary>
            Generates an array of DB connection strings, based on servers list and provided connection string
            </summary>
      <returns>An array containing the DB connections to use</returns>
    </member>
    <member name="M:MAT.Deployment.Services.SqlCommand.SetServers(System.String[])">
      <summary>
            Allows Verifier to set servers to check if no explicit list was defined
            </summary>
      <param name="verifyServers">List of server names to check</param>
    </member>
    <member name="M:MAT.Deployment.Services.SqlCommand.Verify">
      <summary>
            Perform the SQL objects verification
            </summary>
      <returns>Verification success of failure</returns>
    </member>
    <member name="P:MAT.Deployment.Services.SqlCommand.VerificationLog">
      <summary>
            Log for verification results
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.FieldValidator">
      <summary>
            Implements the logic for to compare a result set field value with an expected one 
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.FieldValidator.#ctor(System.String,MAT.Deployment.Services.FieldValidator.EvaluationOperator,System.Object,System.Boolean)">
      <summary>
            Constructor. Generates a new object specifying the evaluation expression
            </summary>
      <param name="fieldName">Result set field name to look for</param>
      <param name="comparison">Comparison operation to perform</param>
      <param name="expectedValue">Value to compare with</param>
      <param name="stringComparison">True if values should be converted as string before comparison</param>
    </member>
    <member name="M:MAT.Deployment.Services.FieldValidator.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},System.String@)">
      <summary>
            Compares the defined expression with the result set
            </summary>
      <param name="resultSet">Dictionary containing fieldname/value pairs</param>
      <param name="errorMessage">Output string to store the error message, if any</param>
      <returns>True if expression is matched</returns>
    </member>
    <member name="M:MAT.Deployment.Services.FieldValidator.CompareAsString(System.String)">
      <summary>
            Performs an string comparison
            </summary>
      <param name="value">Current value to compare with the expected one</param>
      <returns>True is comparison has the expected result</returns>
    </member>
    <member name="M:MAT.Deployment.Services.FieldValidator.ParseOperator(System.String)">
      <summary>
            This method is used during XML parsing. This uses an string to look for the associated operator in enum
            </summary>
      <param name="operation">String containing the operator</param>
      <returns>The operator, if found</returns>
    </member>
    <member name="T:MAT.Deployment.Services.SqlObjectVerifier">
      <summary>
            Encapsulates the logic for a single sql object verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SqlObjectVerifier.#ctor(System.String,MAT.Deployment.Services.SqlObjectVerifier.ObjectType,System.Boolean)">
      <summary>
            Defines a new sql object to verify
            </summary>
      <param name="objName">Object Name</param>
      <param name="type">Object Type</param>
      <param name="shouldExist">True if object is expected to exist in the database</param>
    </member>
    <member name="M:MAT.Deployment.Services.SqlObjectVerifier.AddValidator(System.String,MAT.Deployment.Services.FieldValidator.EvaluationOperator,System.Object,System.Boolean)">
      <summary>
            Add a field evaluation expression for the object
            </summary>
      <param name="fieldName">Result set field to look for</param>
      <param name="comparison">Comparison operator</param>
      <param name="expectedValue">Expected value to have for the field</param>
      <param name="stringComparison">True if values should be converted to string before comparison</param>
    </member>
    <member name="M:MAT.Deployment.Services.SqlObjectVerifier.Evaluate(System.String,System.String@)">
      <summary>
            Looks for the object in the DB/server using the connection string. It also performs the associated field validations
            </summary>
      <param name="connectionString">SQL Connection string</param>
      <param name="errorMessage">Output error message, if any</param>
      <returns>True if the object existence was according with what expected and the field validators succeded</returns>
    </member>
    <member name="M:MAT.Deployment.Services.SqlObjectVerifier.ExecuteFieldValidators(System.Collections.Generic.Dictionary{System.String,System.Object},System.String@)">
      <summary>
            Execute the list of associated field validators
            </summary>
      <param name="resultSet">Dictionary containing field name/value </param>
      <param name="errorMessage">Output error message, if any</param>
      <returns>True if all the validators were passed</returns>
    </member>
    <member name="P:MAT.Deployment.Services.SqlObjectVerifier.Name">
      <summary>
            Object name
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.SqlTriggerVerifier">
      <summary>
            Extends SqlObjectVerifier to allow the table name for the trigger verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SqlTriggerVerifier.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Creates a trigger verification object
            </summary>
      <param name="tableName">Table containing the trigger</param>
      <param name="triggerName">Trigger Name</param>
      <param name="shouldExist">True if object is expected to exist in DB</param>
    </member>
    <member name="M:MAT.Deployment.Services.SqlTriggerVerifier.Evaluate(System.String,System.String@)">
      <summary>
            Looks for the trigger in the DB using the connection string. It also performs the associated field validations
            </summary>
      <param name="connectionString">SQL Connection string</param>
      <param name="errorMessage">Output error message, if any</param>
      <returns>True if the object existence was according with what expected and the field validators succeded</returns>
    </member>
    <member name="T:MAT.Deployment.Core.ICustomFileVerifier">
      <summary>
            Encapsulates custom file verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.ICustomFileVerifier.Create(System.String)">
      <summary>
            Allows to pass verification specific information
            </summary>
      <param name="value">Verification parameter. When used in FileSystemCommand this parameter contains the attribute value for the item</param>
    </member>
    <member name="M:MAT.Deployment.Core.ICustomFileVerifier.Verify(System.String,System.String@)">
      <summary>
            Call defined functionality to perform verification
            </summary>
      <param name="fileName">File to verify</param>
      <param name="output">Log describing verification result</param>
      <returns>Result returned by function</returns>
    </member>
    <member name="T:MAT.Deployment.Services.FileXPathVerifier">
      <summary>
            Implements XPath expressions search verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.FileXPathVerifier.#ctor(MAT.Deployment.Core.XPathData[])">
      <summary>
            Creates a FileXPathVerifier object
            </summary>
      <param name="xPaths">Expressions to search for</param>
    </member>
    <member name="M:MAT.Deployment.Services.FileXPathVerifier.Create(System.String)">
      <summary>
            Not implemented
            </summary>
      <param name="value">Not implemented</param>
    </member>
    <member name="T:MAT.Deployment.Services.FileChecksumVerifier">
      <summary>
            Implements file checksum verification
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.FileChecksumVerifier.CheckType">
      <summary>
            Enumerates File verification types (used during construction)
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.FileChecksumVerifier.#ctor(System.String,MAT.Deployment.Services.FileChecksumVerifier.CheckType)">
      <summary>
            Creates a FileVersionVerifier object
            </summary>
      <param name="source">Verification source to compare with</param>
      <param name="type">source type</param>
    </member>
    <member name="M:MAT.Deployment.Services.FileChecksumVerifier.Create(System.String)">
      <summary>
            Not implemented
            </summary>
      <param name="value">Not implemented</param>
    </member>
    <member name="T:MAT.Deployment.Services.FileVersionVerifier">
      <summary>
            Implements file version verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.FileVersionVerifier.#ctor(System.String)">
      <summary>
            Creates a FileVersionVerifier object
            </summary>
      <param name="version">Expected file version</param>
    </member>
    <member name="M:MAT.Deployment.Services.FileVersionVerifier.Create(System.String)">
      <summary>
            Not implemented
            </summary>
      <param name="value">Not implemented</param>
    </member>
    <member name="T:MAT.Deployment.Services.FileSizeVerifier">
      <summary>
            Implements file size verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.FileSizeVerifier.#ctor(System.UInt32)">
      <summary>
            Creates a FileSizeVerifier object
            </summary>
      <param name="size">Expected file size</param>
    </member>
    <member name="M:MAT.Deployment.Services.FileSizeVerifier.Create(System.String)">
      <summary>
            Not implemented
            </summary>
      <param name="value">Not implemented</param>
    </member>
    <member name="T:MAT.Deployment.Services.FileXSDVerifier">
      <summary>
            Implements xml XSD verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.FileXSDVerifier.#ctor(System.String)">
      <summary>
            Creates a FileXSDVerifier object
            </summary>
      <param name="path">XSD file path</param>
    </member>
    <member name="M:MAT.Deployment.Services.FileXSDVerifier.Create(System.String)">
      <summary>
            Not implemented
            </summary>
      <param name="value">Not implemented</param>
    </member>
    <member name="T:MAT.Deployment.Services.IISCommand">
      <summary>
            Encapsulates IIS verification command processing
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.IISCommand.#ctor">
      <summary>
            Parameterless constructor, required for interface use
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.IISCommand.Create(System.Xml.Linq.XElement,MAT.Deployment.Services.DeploymentVerifier)">
      <summary>
            Creates a IISCommand object by reading XML structure
            </summary>
      <param name="node">XML node</param>
      <param name="parent">DeploymentVerifier Instance</param>
    </member>
    <member name="M:MAT.Deployment.Services.IISCommand.AddSiteToVerify(System.String,System.Boolean)">
      <summary>
            Add a Site to the verification list
            </summary>
      <param name="siteName">Site Name</param>
      <param name="shouldExist">True if the object should exists in server</param>
      <returns>A reference to the added object to allow adding inside objects validation</returns>
    </member>
    <member name="M:MAT.Deployment.Services.IISCommand.AddSiteToVerify(MAT.Deployment.Services.DeploymentVerifier,System.String,System.Boolean)">
      <summary>
            Add a Site to the verification list
            </summary>
      <param name="verifier">Verifier object to replace variables values</param>
      <param name="siteName">Site Name</param>
      <param name="shouldExist">True if the object should exists in server</param>
      <returns>A reference to the added object to allow adding inside objects validation</returns>
    </member>
    <member name="M:MAT.Deployment.Services.IISCommand.SetServers(System.String[])">
      <summary>
            Allows Verifier to set servers to check if no explicit list was defined
            </summary>
      <param name="verifyServers">List of server names to check</param>
    </member>
    <member name="M:MAT.Deployment.Services.IISCommand.Verify">
      <summary>
            Perform the SharePoint objects verification
            </summary>
      <returns>Verification success of failure</returns>
    </member>
    <member name="P:MAT.Deployment.Services.IISCommand.Servers">
      <summary>
            Overrides list of servers to verify
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.IISCommand.VerificationLog">
      <summary>
            Log for verification results
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.IISObjectVerifier">
      <summary>
            Defines common properties for IIS objects verification
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.IISObjectVerifier.Name">
      <summary>
            Object Name
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.IISObjectVerifier.Path">
      <summary>
            Object Name
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.IISObjectVerifier.ShouldExist">
      <summary>
            If true then object should exist
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.IISSiteVerifier">
      <summary>
            Implements IIS sites verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.IISSiteVerifier.#ctor(MAT.Deployment.Services.DeploymentVerifier)">
      <summary>
            Links the Site verification with a DeploymentVerifier object to use
            </summary>
      <param name="verifier">Verifier object to perform variables replacement</param>
    </member>
    <member name="M:MAT.Deployment.Services.IISSiteVerifier.AddVroot(System.String,System.Boolean)">
      <summary>
            Adds a vroot to verify
            </summary>
      <param name="name">vroot Name</param>
      <param name="shouldExist">If true then vroot existence is verified</param>
      <returns>Vroot verification object</returns>
    </member>
    <member name="M:MAT.Deployment.Services.IISSiteVerifier.AddApplication(System.String,System.Boolean)">
      <summary>
            Adds an application to verify
            </summary>
      <param name="name">application Name</param>
      <param name="shouldExist">If true then application existence is verified</param>
      <returns>Application verification object</returns>
    </member>
    <member name="M:MAT.Deployment.Services.IISSiteVerifier.Verify(System.String,System.String@)">
      <summary>
            Performs verification for the site and descendant objects defined
            </summary>
      <param name="server">Server to perform the verification into</param>
      <param name="errorMessage">Errors during verificaiton</param>
      <returns>True if verification is successful</returns>
    </member>
    <member name="P:MAT.Deployment.Services.IISSiteVerifier.VrootsToVerify">
      <summary>
            Vroots to verify inside site
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.IISSiteVerifier.ApplicationsToVerify">
      <summary>
            Applications to verify inside site
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.IISVrootVerifier">
      <summary>
            Implements Vroot verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.IISVrootVerifier.#ctor(MAT.Deployment.Services.DeploymentVerifier,MAT.Deployment.Services.IISSiteVerifier)">
      <summary>
            Links the vroot verification with a DeploymentVerifier object to use
            </summary>
      <param name="verifier">Verifier object to perform variables replacement</param>
      <param name="parent">Container site</param>
    </member>
    <member name="M:MAT.Deployment.Services.IISVrootVerifier.Verify(System.String@)">
      <summary>
            Performs verification for the vroot
            </summary>
      <param name="errorMessage">Errors during verification</param>
      <returns>True if verification is successful</returns>
    </member>
    <member name="T:MAT.Deployment.Services.IISApplicationVerifier">
      <summary>
            Implements IIS Application verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.IISApplicationVerifier.#ctor(MAT.Deployment.Services.DeploymentVerifier,MAT.Deployment.Services.IISSiteVerifier)">
      <summary>
            Links the application verification with a DeploymentVerifier object to use
            </summary>
      <param name="verifier">Verifier object to perform variables replacement</param>
      <param name="parent">Container site</param>
    </member>
    <member name="M:MAT.Deployment.Services.IISApplicationVerifier.Verify(System.String@)">
      <summary>
            Performs verification for the application
            </summary>
      <param name="errorMessage">Errors during verification</param>
      <returns>True if verification is successful</returns>
    </member>
    <member name="T:MAT.Deployment.Core.RegistryVerifier">
      <summary>
            Encapsulates Registry verification on a computer. Calls are made using WMI
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.RegistryVerifier.#ctor(System.String)">
      <summary>
            Creates an object encapsulating Registry data inquiry
            </summary>
      <param name="computerName">Computer Name</param>
    </member>
    <member name="M:MAT.Deployment.Core.RegistryVerifier.KeyExists(MAT.Deployment.Core.RegistryVerifier.Tree,System.String)">
      <summary>
            Verifies if a Key exists in the specified root tree
            </summary>
      <param name="root">Root Tree</param>
      <param name="keyPath">Path and Key to look for</param>
      <returns>True if the key exists. Exception is thrown if insufficient rights</returns>
    </member>
    <member name="M:MAT.Deployment.Core.RegistryVerifier.GetRegistryValue(MAT.Deployment.Core.RegistryVerifier.Tree,System.String,System.String,MAT.Deployment.Core.RegistryVerifier.ValueType,System.Boolean@)">
      <summary>
            Get value for a supplied registry Key path and Value
            </summary>
      <param name="root">Root Tree</param>
      <param name="keyPath">Path for the Key where the value is</param>
      <param name="valueName">Value Name</param>
      <param name="type">Value type</param>
      <param name="found">True if variable was not found</param>
      <returns>String representation for the value. Empty if value is not found. Exception is thrown if insufficient rights</returns>
    </member>
    <member name="M:MAT.Deployment.Core.RegistryVerifier.GetRegistryValue(MAT.Deployment.Core.RegistryVerifier.Tree,System.String,System.String,MAT.Deployment.Core.RegistryVerifier.ValueType)">
      <summary>
            Get value for a supplied registry Key path and Value
            </summary>
      <param name="root">Root Tree</param>
      <param name="keyPath">Path for the Key where the value is</param>
      <param name="valueName">Value Name</param>
      <param name="type">Value type</param>
      <returns>String representation for the value. Empty if value is not found. Exception is thrown if insufficient rights</returns>
    </member>
    <member name="T:MAT.Deployment.Core.XPathData">
      <summary>
            Encapsulates XPath expressions (internally used)
            </summary>
    </member>
    <member name="T:MAT.Deployment.Core.FileVerifier">
      <summary>
            Class containing core functions for file custom verification (size, checksum, etc.)
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.FileVerifier.CheckConfigFile(System.String,MAT.Deployment.Core.XPathData[],System.String[]@)">
      <summary>
            Looks into the passed in file whether a particular xpath exists, returns bool indicating result
            </summary>
      <param name="filePath">
      </param>
      <param name="xPaths">
      </param>
      <param name="output">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Deployment.Core.FileVerifier.ReadAssemblyContent(System.String)">
      <summary>
            Load the assembly in memory instead of from file
            </summary>
      <param name="fullPath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Deployment.Core.FileVerifier.CompareVersions(System.String,System.String)">
      <summary>
            Compares assemblies versions
            </summary>
      <param name="filePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Deployment.Core.FileVerifier.GetAssemblyVersion(System.String)">
      <summary>
            Calculate the file version
            </summary>
      <param name="filePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Deployment.Core.FileVerifier.CompareChecksums(System.String,System.String)">
      <summary>
            This function compares the check sums of file passed in to a predefined value 
            </summary>
      <param name="filePath">
      </param>
      <param name="fileChecksum">
      </param>
      <returns>True if checksums are equal</returns>
    </member>
    <member name="M:MAT.Deployment.Core.FileVerifier.CalculateChecksum(System.String)">
      <summary>
            This function calculates the check sum of a file
            </summary>
      <param name="filePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.Deployment.Core.DeployFile">
      <summary>
            Encapsulates file existence verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFile.#ctor(MAT.Deployment.Core.DeployFolder,System.String,System.Boolean)">
      <summary>
            Creates a new file object to verify
            </summary>
      <param name="parent">Parent folder object</param>
      <param name="fileName">file name without path</param>
      <param name="shouldExist">Existence check</param>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFile.Verify">
      <summary>
            Executes verification for the file
            </summary>
      <returns>True if file exists</returns>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFile.ClearVerification">
      <summary>
            Reset verification status
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.DeployFile.AddCustomVerification(MAT.Deployment.Core.ICustomFileVerifier)">
      <summary>
            Add a custom verification call for the file
            </summary>
      <param name="verifier">Object encapsulating verification</param>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFile.Status">
      <summary>
            Verification status
            </summary>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFile.Exists">
      <summary>
            Returns true if file exists
            </summary>
    </member>
    <member name="P:MAT.Deployment.Core.DeployFile.AbsoluteFileName">
      <summary>
            File name including path
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.GACCommand">
      <summary>
            Encapsulates Assembly in GAC verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.GACCommand.#ctor">
      <summary>
            Parameterless constructor, required for interface use
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.GACCommand.Create(System.Xml.Linq.XElement,MAT.Deployment.Services.DeploymentVerifier)">
      <summary>
            Creates a GACCommand object by reading XML structure
            </summary>
      <param name="node">XML node</param>
      <param name="parent">DeploymentVerifier Instance</param>
    </member>
    <member name="M:MAT.Deployment.Services.GACCommand.SetServers(System.String[])">
      <summary>
            Allows Verifier to set servers to check if no explicit list was defined
            </summary>
      <param name="verifyServers">List of server names to check</param>
    </member>
    <member name="M:MAT.Deployment.Services.GACCommand.Verify">
      <summary>
            Perform the GAC verification
            </summary>
      <returns>Verification success of failure</returns>
    </member>
    <member name="P:MAT.Deployment.Services.GACCommand.VerificationLog">
      <summary>
            Log for verification results
            </summary>
    </member>
    <member name="T:MAT.Deployment.Core.Status">
      <summary>
            Describes File/Verification result
            </summary>
    </member>
    <member name="T:MAT.Deployment.Core.FileSystemVerifier">
      <summary>
            Encapsulates File and Folders existence verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.FileSystemVerifier.#ctor">
      <summary>
            Initializes Verifier
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.FileSystemVerifier.AddFolder(System.String,System.Boolean)">
      <summary>
            Adds a first level folder in verification
            </summary>
      <param name="folderName">Absolute path to verify</param>
      <param name="shouldExist">Existence check</param>
      <returns>DeployFolder object created. Use this object to add subfolders/files to verify</returns>
    </member>
    <member name="M:MAT.Deployment.Core.FileSystemVerifier.AddFile(System.String,System.Boolean)">
      <summary>
            Add a first level file to verification
            </summary>
      <param name="fileName">Absolute file name to verify</param>
      <param name="shouldExist">Existence check</param>
    </member>
    <member name="M:MAT.Deployment.Core.FileSystemVerifier.ClearVerification">
      <summary>
            Reset verification status
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.FileSystemVerifier.Verify">
      <summary>
            Verify each of the folder objects found in collection
            </summary>
    </member>
    <member name="P:MAT.Deployment.Core.FileSystemVerifier.ComputerName">
      <summary>
            Get/Set the computer name where to perform the verification
            </summary>
    </member>
    <member name="T:MAT.Deployment.Core.SQLVerifier">
      <summary>
            Encapsulates SQL Objects verification on a computer. Calls are made using OLEDB
            </summary>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.#ctor(System.String)">
      <summary>
            Creates an object encapsulating SQL objects query
            </summary>
      <param name="connectionString">SQL Connection string. Initial catalog should point to DB to use</param>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.GetDBInfo(System.String)">
      <summary>
            Returns information about the DB
            </summary>
      <param name="dbName">Database Name</param>
      <returns>Dictionary containing DB attribute/value pairs returned by sp_helpdb first result set</returns>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.GetTableInfo(System.String)">
      <summary>
            Returns information about the Table
            </summary>
      <param name="tableName">Table Name</param>
      <returns>Dictionary containing Table attribute/value pairs returned by sp_help first result set</returns>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.GetViewInfo(System.String)">
      <summary>
            Returns information about the View
            </summary>
      <param name="viewName">View Name</param>
      <returns>Dictionary containing View attribute/value pairs returned by sp_help first result set</returns>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.GetSPInfo(System.String)">
      <summary>
            Returns information about the SP
            </summary>
      <param name="spName">SP Name</param>
      <returns>Dictionary containing SP attribute/value pairs returned by sp_help first result set</returns>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.GetTriggerInfo(System.String,System.String)">
      <summary>
            Returns information about the Trigger
            </summary>
      <param name="tableName">Table Name</param>
      <param name="triggerName">Trigger Name</param>
      <returns>Dictionary containing Trigger attribute/value pairs returned by sp_helptrigger first result set</returns>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.GetJobInfo(System.String)">
      <summary>
            Returns information about the Job
            </summary>
      <param name="jobName">Job Name</param>
      <returns>Dictionary containing Job attribute/value pairs returned by sp_help_job first result set</returns>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.GetQueryFirstRowResults(System.String)">
      <summary>
            Executes a query and returns results first row
            </summary>
      <param name="query">SQL statement</param>
      <returns>Dictionary containing attribute/value pairs returned by query first result set</returns>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.GetGenericObjInfo(System.String)">
      <summary>
            Returns information about the object
            </summary>
      <param name="objName">SQL Object Name</param>
      <returns>Dictionary containing object attribute/value pairs returned by sp_help first result set</returns>
    </member>
    <member name="M:MAT.Deployment.Core.SQLVerifier.GetInfo(System.String,System.String,System.String)">
      <summary>
            Executes a sp_help type SP an returns a collection containing first result set row
            </summary>
      <param name="spName">
      </param>
      <param name="spParamName">
      </param>
      <param name="objName">
      </param>
      <returns>SP first result set as dictionary. Null if SP had no results</returns>
    </member>
    <member name="T:MAT.Deployment.Services.FileSystemCommand">
      <summary>
            Implements folders/files verification. It's used in conjunction with DeploymentVerification class
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.FileSystemCommand.#ctor">
      <summary>
            Parameterless constructor, required for interface use
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.FileSystemCommand.Create(System.Xml.Linq.XElement,MAT.Deployment.Services.DeploymentVerifier)">
      <summary>
            Creates a ServiceCommand object by reading XML structure
            </summary>
      <param name="node">XML node</param>
      <param name="parent">DeploymentVerifier Instance</param>
    </member>
    <member name="M:MAT.Deployment.Services.FileSystemCommand.SetServers(System.String[])">
      <summary>
            Allows Verifier to set servers to check if no explicit list was defined
            </summary>
      <param name="verifyServers">List of server names to check</param>
    </member>
    <member name="M:MAT.Deployment.Services.FileSystemCommand.Verify">
      <summary>
            Perform the service verification
            </summary>
      <returns>Verification success of failure</returns>
    </member>
    <member name="M:MAT.Deployment.Services.FileSystemCommand.TrackInnerVerification(System.Collections.Generic.List{System.String},MAT.Deployment.Core.DeployFolder)">
      <summary>
            Collect verification result for nested directories
            </summary>
      <param name="log">Verification log</param>
      <param name="currentFolder">Current level DeployFolder object</param>
      <returns>Verification result</returns>
    </member>
    <member name="M:MAT.Deployment.Services.FileSystemCommand.LogExtraItems(System.Collections.Generic.List{System.String},MAT.Deployment.Core.DeployFolder)">
      <summary>
            Search for extra files/folders reported
            </summary>
      <param name="log">Verification log</param>
      <param name="currentFolder">Current level DeployFolder object</param>
    </member>
    <member name="P:MAT.Deployment.Services.FileSystemCommand.Path">
      <summary>
            Absolute path
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.FileSystemCommand.FileName">
      <summary>
            Relative file name
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.FileSystemCommand.Servers">
      <summary>
            Allow to override global server list
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.FileSystemCommand.ShouldExists">
      <summary>
            If true then verification passes only when file/folder exists
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.FileSystemCommand.AllowExtraItems">
      <summary>
            Instructs if verification passes when extra files/folders are found inside the folder (only valid for folder verification)
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.FileSystemCommand.Folder">
      <summary>
            Get underlining DeployFolder Object
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.FileSystemCommand.VerificationLog">
      <summary>
            Log for verification results
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.SharePointCommand">
      <summary>
            Encapsulates SharePoint verification command processing
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SharePointCommand.#ctor">
      <summary>
            Parameterless constructor, required for interface use
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SharePointCommand.Create(System.Xml.Linq.XElement,MAT.Deployment.Services.DeploymentVerifier)">
      <summary>
            Creates a SharePointCommand object by reading XML structure
            </summary>
      <param name="node">XML node</param>
      <param name="parent">DeploymentVerifier Instance</param>
    </member>
    <member name="M:MAT.Deployment.Services.SharePointCommand.AddSiteToVerify(System.String,System.Boolean)">
      <summary>
            Add a Site to the verification list
            </summary>
      <param name="siteName">Site Name</param>
      <param name="shouldExist">True if the object should exists in server</param>
      <returns>A reference to the added object to allow adding inside objects validation</returns>
    </member>
    <member name="M:MAT.Deployment.Services.SharePointCommand.AddSiteToVerify(MAT.Deployment.Services.DeploymentVerifier,System.String,System.Boolean)">
      <summary>
            Add a Site to the verification list
            </summary>
      <param name="verifier">Verifier object to replace variables values</param>
      <param name="siteName">Site Name</param>
      <param name="shouldExist">True if the object should exists in server</param>
      <returns>A reference to the added object to allow adding inside objects validation</returns>
    </member>
    <member name="M:MAT.Deployment.Services.SharePointCommand.GetServersUrl">
      <summary>
            Generates an array of Urls, based on servers list
            </summary>
      <returns>An array containing the Urls</returns>
    </member>
    <member name="M:MAT.Deployment.Services.SharePointCommand.SetServers(System.String[])">
      <summary>
            Allows Verifier to set servers to check if no explicit list was defined
            </summary>
      <param name="verifyServers">List of server names to check</param>
    </member>
    <member name="M:MAT.Deployment.Services.SharePointCommand.Verify">
      <summary>
            Perform the SharePoint objects verification
            </summary>
      <returns>Verification success of failure</returns>
    </member>
    <member name="P:MAT.Deployment.Services.SharePointCommand.Servers">
      <summary>
            Overrides list of servers to verify
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.SharePointCommand.VerificationLog">
      <summary>
            Log for verification results
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.SPObjectVerifier">
      <summary>
            Defines common properties for SharePoint objects verification
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.SPObjectVerifier.Name">
      <summary>
            Object Name
            </summary>
    </member>
    <member name="P:MAT.Deployment.Services.SPObjectVerifier.ShouldExist">
      <summary>
            If true then object should exist
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.SPSiteVerifier">
      <summary>
            Implements SharePoint sites verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SPSiteVerifier.#ctor(MAT.Deployment.Services.DeploymentVerifier)">
      <summary>
            Links the Site verification with a DeploymentVerifier object to use
            </summary>
      <param name="verifier">Verifier object to perform variables replacement</param>
    </member>
    <member name="M:MAT.Deployment.Services.SPSiteVerifier.AddList(System.String,System.Boolean)">
      <summary>
            Adds a list to verify
            </summary>
      <param name="name">List Name</param>
      <param name="shouldExist">If true then list existence is verifed</param>
      <returns>List verification object</returns>
    </member>
    <member name="M:MAT.Deployment.Services.SPSiteVerifier.Verify(System.String,System.String@)">
      <summary>
            Performs verification for the site and descendant objects defined
            </summary>
      <param name="serverUrl">Server to perform the verification into</param>
      <param name="errorMessage">Errors during verificaiton</param>
      <returns>True if verification is successful</returns>
    </member>
    <member name="P:MAT.Deployment.Services.SPSiteVerifier.ObjsToVerify">
      <summary>
            Lists to verify inside site
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.SPListVerifier">
      <summary>
            Implements SharePoint lists verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SPListVerifier.#ctor(MAT.Deployment.Services.DeploymentVerifier,MAT.Deployment.Services.SPSiteVerifier)">
      <summary>
            Links the List verification with a DeploymentVerifier object to use
            </summary>
      <param name="verifier">Verifier object to perform variables replacement</param>
      <param name="parent">Container site</param>
    </member>
    <member name="M:MAT.Deployment.Services.SPListVerifier.AddField(System.String,System.Boolean)">
      <summary>
            Adds a field to verify
            </summary>
      <param name="name">Field Name</param>
      <param name="shouldExist">If true then field existence is verifed</param>
    </member>
    <member name="M:MAT.Deployment.Services.SPListVerifier.AddItem(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
      <summary>
            Adds a list item to verify
            </summary>
      <param name="values">Attribute Name/Value pairs to compare</param>
      <param name="shouldExist">If true then an item matching the pairs is expected in list</param>
    </member>
    <member name="M:MAT.Deployment.Services.SPListVerifier.Verify(System.String@)">
      <summary>
            Performs verification for the list and descendant objects defined
            </summary>
      <param name="errorMessage">Errors during verification</param>
      <returns>True if verification is successful</returns>
    </member>
    <member name="P:MAT.Deployment.Services.SPListVerifier.FieldsToVerify">
      <summary>
            Fields to verify inside list
            </summary>
    </member>
    <member name="T:MAT.Deployment.Services.SPFieldVerifier">
      <summary>
            Implements SharePoint fields in list verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SPFieldVerifier.#ctor(MAT.Deployment.Services.DeploymentVerifier,MAT.Deployment.Services.SPListVerifier)">
      <summary>
            Links the Field verification with a DeploymentVerifier object to use
            </summary>
      <param name="verifier">Verifier object to perform variables replacement</param>
      <param name="parent">Container list</param>
    </member>
    <member name="M:MAT.Deployment.Services.SPFieldVerifier.Verify(System.String@)">
      <summary>
            Performs verification for the list and descendant objects defined
            </summary>
      <param name="errorMessage">Errors during verification</param>
      <returns>True if verification is successful</returns>
    </member>
    <member name="T:MAT.Deployment.Services.SPListItemVerifier">
      <summary>
            Implements SharePoint items in list verification
            </summary>
    </member>
    <member name="M:MAT.Deployment.Services.SPListItemVerifier.#ctor(MAT.Deployment.Services.DeploymentVerifier,MAT.Deployment.Services.SPListVerifier)">
      <summary>
            Links the List Item verification with a DeploymentVerifier object to use
            </summary>
      <param name="verifier">Verifier object to perform variables replacement</param>
      <param name="parent">Container list</param>
    </member>
    <member name="M:MAT.Deployment.Services.SPListItemVerifier.Verify(System.String@)">
      <summary>
            Performs verification for the list item
            </summary>
      <param name="errorMessage">Errors during verification</param>
      <returns>True if verification is successful</returns>
    </member>
    <member name="T:Rex.RexEngine">
      <summary>
            Provides a member generator for regexes
            </summary>
    </member>
    <member name="M:Rex.RexEngine.#ctor(Rex.CharacterEncoding,System.Int32)">
      <summary>
            Create a regex member generator for the given character encoding and the given random seed
            </summary>
      <param name="encoding">character encoding</param>
      <param name="randomSeed">if -1 then a randomly chosen random seed is used</param>
    </member>
    <member name="M:Rex.RexEngine.GenerateMember(Rex.SFA{Rex.BDD})">
      <summary>
            Generates a random member accepted by fa. 
            Assumes that fa has no dead states, or else termination is not guaranteed.
            </summary>
    </member>
    <member name="M:Rex.RexEngine.GenerateMembers(System.Text.RegularExpressions.RegexOptions,System.Int32,System.String[])">
      <summary>
            Generates k strings that match all the given regexes. Duplicates may occur.
            The enumeration is empty if there are no strings that match all the regexes.
            </summary>
      <param name="options">regular expression options</param>
      <param name="k"> number of members to be generated</param>
      <param name="regexes">given regexes</param>
      <returns>enumeration of strings each of which matches all the regexes</returns>
    </member>
    <member name="M:Rex.RexEngine.GenerateMembers(Rex.RexSettings)">
      <summary>
            Generate strings for the given settings, ignores the file field of settings.
            </summary>
    </member>
    <member name="M:Rex.RexEngine.Escape(System.Char)">
      <summary>
            Make an escaped string from a character
            </summary>
    </member>
    <member name="M:Rex.RexEngine.Escape(System.String)">
      <summary>
            Make an escaped string from a string
            </summary>
    </member>
    <member name="P:Rex.RexEngine.RandomSeed">
      <summary>
            Get or set the random seed of the generator
            </summary>
    </member>
    <member name="T:Rex.RegexToSFAGeneric`1">
      <summary>
            Convert regex expressions to corresponding SFAs
            </summary>
    </member>
    <member name="M:Rex.RegexToSFAGeneric`1.ConvertNodeMulti(System.Text.RegularExpressions.RegexNode,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Sequence of characters in node._str
            </summary>
    </member>
    <member name="M:Rex.RegexToSFAGeneric`1.ConvertNodeNotone(System.Text.RegularExpressions.RegexNode,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Matches chacter any character except node._ch
            </summary>
    </member>
    <member name="M:Rex.RegexToSFAGeneric`1.ConvertNodeOne(System.Text.RegularExpressions.RegexNode,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Matches only node._ch
            </summary>
    </member>
    <member name="M:Rex.RegexToSFAGeneric`1.ToDot(Rex.SFA{`0},System.String,System.String,Rex.RANKDIR,System.Int32)">
      <summary>
            Write the FSA in dot format.
            </summary>
      <param name="fa">the FSA to write</param>
      <param name="faName">the name of the FSA</param>
      <param name="filename">the name of the output file</param>
      <param name="rankdir">the main direction of the arrows</param>
      <param name="fontsize">the size of the font in labels</param>
    </member>
    <member name="M:Rex.RegexToSFAGeneric`1.ToDot(Rex.SFA{`0},System.String,System.IO.TextWriter,Rex.RANKDIR,System.Int32)">
      <summary>
            Write the FSA in dot format.
            </summary>
      <param name="fa">the FSA to write</param>
      <param name="faName">the name of the FSA</param>
      <param name="tw">text writer for the output</param>
      <param name="rankdir">the main direction of the arrows</param>
      <param name="fontsize">the size of the font in labels</param>
    </member>
    <member name="M:Rex.RegexToSFAGeneric`1.Display(Rex.SFA{`0},System.String,Rex.RANKDIR,System.Int32,System.Boolean,System.String)">
      <summary>
            View the given SFA as a graph. Requires that dot.exe is installed.
            Uses dot.exe to create a file name.dot and produces a layout in name.format.
            If showgraph is true, starts a process to view the graph.
            For example if name = "foo" and format = "gif", creates a file 
            foo.dot with the dot output and a file foo.gif as a picture.
            Uses the current working directory.
            </summary>
      <param name="fa">the SFA to be viewed</param>
      <param name="name">name of the file where the graph is stored</param>
      <param name="dir">direction of the arrows</param>
      <param name="fontsize">size of the font in node and edge labels</param>
      <param name="showgraph">id true, the graph is viewed</param>
      <param name="format">format of the figure</param>
    </member>
    <member name="T:Rex.RexException">
      <summary>
            Exeption thrown by the RexEngine
            </summary>
    </member>
    <member name="T:Rex.ConsList`1">
      <summary>
            Linked list of elements of type E. The empty list is null.
            </summary>
    </member>
    <member name="F:Rex.ConsList`1.car">
      <summary>
            The first element in the list
            </summary>
    </member>
    <member name="F:Rex.ConsList`1.cdr">
      <summary>
            The rest of the list (may be null)
            </summary>
    </member>
    <member name="M:Rex.ConsList`1.#ctor(`0,Rex.ConsList{`0})">
      <summary>
            Make a new list whose first element is car and whose rest is cdr (cdr may be null)
            </summary>
    </member>
    <member name="M:Rex.ConsList`1.ToArray">
      <summary>
            Returns the nonempty array of the elements in the cons list.
            Assumes that the list is not circular, or else will not terminate.
            </summary>
    </member>
    <member name="M:Rex.ConsList`1.#ctor(`0)">
      <summary>
            Creates a singleton cons-list.
            </summary>
      <param name="elem">the element of the cons-list</param>
    </member>
    <member name="M:Rex.ConsList`1.Create(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a cons-list of the elements in the enumeration.
            Returns null if the enumeration is empty.
            </summary>
    </member>
    <member name="M:Rex.ConsList`1.RemoveAll(Rex.ConsList{`0},System.Func{`0,System.Boolean})">
      <summary>
            Remove all elements from the list that satsify check.
            Returns the list of remaining elements.
            Returns null if the list becomes empty
            </summary>
      <param name="list">
      </param>
      <param name="check">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Rex.ConsList`1.DeleteAllFromRest(System.Func{`0,System.Boolean})">
      <summary>
            Delete destructively all elements from the rest of the list that satisfy the given check
            </summary>
    </member>
    <member name="M:Rex.ConsList`1.Add(`0)">
      <summary>
            Add elem at the end of the list.
            This is an O(1) operation.
            It is not checked if the resulting list is circular.
            </summary>
    </member>
    <member name="M:Rex.ConsList`1.Append(Rex.ConsList{`0})">
      <summary>
            Append l at the end of the list.
            This is an O(1) operation.
            It is not checked if the resulting list is circular.
            </summary>
    </member>
    <member name="M:Rex.ConsList`1.Reverse">
      <summary>
            Creates a new cons list that is the reverse of this cons list.
            Assumes that this list is not circular, or else will not terminate.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Rex.ConsList`1.Length">
      <summary>
            Returns the number of elements in the list.
            Assumes that the list is not circular, or else will not terminate.
            </summary>
    </member>
    <member name="F:MAT.DataGenerator.Types.FieldTypeBase.UseDefaultGenerators">
      <summary>
            Boolean property to indicate whether to use default generators on the type, set to true by default
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.#ctor(System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for FieldTypeBase
            </summary>
      <param name="name">
      </param>
      <param name="generators">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.#ctor(System.String)">
      <summary>
            ctor for FieldTypeBase
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.#ctor">
      <summary>
            Default ctor for FieldTypeBase class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.AddGenerators(MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            Add multiple generators to the Generators collection of this field
            </summary>
      <param name="generators">Generators to be applied</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.RemoveGenerators(MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            Function to remove generators which are passed in from the generators list 
            </summary>
      <param name="generators">Generators to remove.</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.ClearGenerators">
      <summary>
            Removes all the generators on the object
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.GeneratorExists(MAT.DataGenerator.Generators.IGenerator)">
      <summary>
            Check if the input generator has already been applied on this type
            </summary>
      <param name="generator">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.GetGeneratorById(System.Guid)">
      <summary>
            Get the generator applied on this Field by ID.
            </summary>
      <param name="generatorId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.GetGeneratorByName(System.String)">
      <summary>
            Get the generator applied on this Field by Name.
            </summary>
      <param name="generatorName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.GetGeneratorIdPICTParameters">
      <summary>
            Gets the Generators Ids as a string[] array to be used to generate the PICT combinations
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypeBase.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the member value for the object instance passed in using the data value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.GenericType">
      <summary>
            Type for defining a Field as belonging to the Generic type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.GenericType.#ctor(System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for the GenericType Class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.GenericType.#ctor(System.String)">
      <summary>
            ctor for String Type class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.GenericType.#ctor">
      <summary>
            Default ctor for String Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.GenericType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.EnumType">
      <summary>
            Type for defining a Field as belonging to the Guid type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.EnumType.#ctor(System.String,System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
             ctor for the EnumType Class
            </summary>
      <param name="name">
      </param>
      <param name="sampleValues">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.EnumType.#ctor(System.String)">
      <summary>
            ctor for the EnumType Class
            </summary>
      <param name="name">Name of the FieldType object</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.EnumType.#ctor">
      <summary>
            Default ctor for Enum Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.EnumType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Common.DataFormat">
      <summary>
            Enumeration for Data Format
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Common.ValidationResult">
      <summary>
            Enumeration to store the list of Validation results
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Common.CombinationType">
      <summary>
            Enumeration to store the Combination Type
            </summary>
    </member>
    <member name="T:Rex.UnicodeCategoryRanges">
      <summary>
            Automatically generated by UnicodeCategoryRangesGenerator
            </summary>
    </member>
    <member name="F:Rex.UnicodeCategoryRanges.ASCIIBdd">
      <summary>
            Compact BDD encodings of the categories.
            </summary>
    </member>
    <member name="F:Rex.UnicodeCategoryRanges.ASCIIWhitespaceBdd">
      <summary>
            Compact BDD encoding of the whitespace characters.
            </summary>
    </member>
    <member name="F:Rex.UnicodeCategoryRanges.ASCIIWordCharacterBdd">
      <summary>
            Compact BDD encoding of word characters is the BDD for the union of categories 0,1,2,3,4,8,18
            </summary>
    </member>
    <member name="F:Rex.UnicodeCategoryRanges.CP437Bdd">
      <summary>
            Compact BDD encodings of the categories.
            </summary>
    </member>
    <member name="F:Rex.UnicodeCategoryRanges.CP437WhitespaceBdd">
      <summary>
            Compact BDD encoding of the whitespace characters.
            </summary>
    </member>
    <member name="F:Rex.UnicodeCategoryRanges.CP437WordCharacterBdd">
      <summary>
            Compact BDD encoding of word characters is the BDD for the union of categories 0,1,2,3,4,8,18
            </summary>
    </member>
    <member name="F:Rex.UnicodeCategoryRanges.UnicodeBdd">
      <summary>
            Compact BDD encodings of the categories.
            </summary>
    </member>
    <member name="F:Rex.UnicodeCategoryRanges.UnicodeWhitespaceBdd">
      <summary>
            Compact BDD encoding of the whitespace characters.
            </summary>
    </member>
    <member name="F:Rex.UnicodeCategoryRanges.UnicodeWordCharacterBdd">
      <summary>
            Compact BDD encoding of word characters is the BDD for the union of categories 0,1,2,3,4,8,18
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Types.BaseTypeModel">
      <summary>
            Interface to support external type models
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Generators.IGenerator">
      <summary>
            Interface to define a Generator
            </summary>
    </member>
    <member name="F:MAT.DataGenerator.Generators.IGenerator.Weight">
      <summary>
            Weight used when useWeights is set. (default: 1)
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.IGenerator.Invoke">
      <summary>
            Invokes the generator and generates an object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.IGenerator.Id">
      <summary>
            Member variable for Id of the Generator
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.IGenerator.Name">
      <summary>
            Member variable for Name of the Generator
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.IGenerator.Result">
      <summary>
            Member variable for storing the Validation result on the Generator
            </summary>
      <value>The validation result.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.IGenerator.Seed">
      <summary>
            Member variable for the Seed 
            </summary>
      <value>The seed.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.IGeneratorAttribute">
      <summary>
            Interface to define a Generator attribute, this will be used in adding generators in the form of metadata 
            </summary>
    </member>
    <member name="F:MAT.DataGenerator.Generators.IGeneratorAttribute.Weight">
      <summary>
            Weight for the generator
            </summary>
    </member>
    <member name="T:Rex.ICharacterConstraintSolver`1">
      <summary>
            Interface for solving Boolean combinations of character range constraints.
            Constraints have the type S.
            </summary>
    </member>
    <member name="M:Rex.ICharacterConstraintSolver`1.MkOr(`0,`0)">
      <summary>
            Make a disjunction
            </summary>
    </member>
    <member name="M:Rex.ICharacterConstraintSolver`1.MkAnd(`0,`0)">
      <summary>
            Make a conjunction
            </summary>
    </member>
    <member name="M:Rex.ICharacterConstraintSolver`1.MkNot(`0)">
      <summary>
            Negate the constraint
            </summary>
    </member>
    <member name="M:Rex.ICharacterConstraintSolver`1.MkRangeConstraint(System.Boolean,System.Char,System.Char)">
      <summary>
            Make a constraint as a disjunction of constraints for all characters 
            between lower (inclusive) and upper (inclusive). 
            Add both uppercase and lowercase characters if caseInsensitive is true.
            </summary>
    </member>
    <member name="P:Rex.ICharacterConstraintSolver`1.True">
      <summary>
            Always true
            </summary>
    </member>
    <member name="P:Rex.ICharacterConstraintSolver`1.False">
      <summary>
            Always false
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.BoolType">
      <summary>
            Type for defining a Field as belonging to the Bool type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.BoolType.#ctor(System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for the BoolType Class
            </summary>
      <param name="name">Name of the FieldType object</param>
      <param name="generatorsList">List of Generators</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.BoolType.#ctor(System.String)">
      <summary>
            ctor for the BoolType Class
            </summary>
      <param name="name">Name of the FieldType object</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.BoolType.#ctor">
      <summary>
            Default .ctor for BoolType class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.BoolType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="M:Rex.BddBuilder.#ctor(System.Int32)">
      <summary>
            BDD builder for k bits using the default oder that MSB is least
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.#ctor(System.Int32,System.Int32)">
      <summary>
            BDD builder for k bits using the default oder that MSB is least
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkOr(Rex.BDD,Rex.BDD)">
      <summary>
            Make the BDD for a|b
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkAnd(Rex.BDD,Rex.BDD)">
      <summary>
            Make the BDD for 'a' and 'b'
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkNot(Rex.BDD)">
      <summary>
            Negate the BDD
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkAnd(System.Collections.Generic.IEnumerable{Rex.BDD})">
      <summary>
            Make a conjunction of all the BDDs in the enumeration
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkOr(System.Collections.Generic.IEnumerable{Rex.BDD})">
      <summary>
            Make a disjunction of all the BDDs in the enumeration
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkBddForInt(System.Int32)">
      <summary>
            Make a BDD encoding k least significant bits of the given integer n.
            In this encoding MSB is considered as bit 0.
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkCharConstraint(System.Boolean,System.Char)">
      <summary>
            Make a BDD encoding k least significant bits of the given character c.
            In this encoding MSB is considered as bit 0.
            If c is a lower case or upper case character and ignoreCase is true
            then add both the upper case and the lower case versions
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkBddForIntRange(System.Int32,System.Int32)">
      <summary>
            Make a BDD encoding k least significant bits of all the integers in the interval from m to n
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkRangeConstraint(System.Boolean,System.Char,System.Char)">
      <summary>
            Make a BDD encoding k least significant bits of all the characters in the interval from c to d.
            If ignoreCase is true ignore cases for upper and lower case characters by including both versions.
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkBddForIntRanges(System.Collections.Generic.IEnumerable{System.Int32[]})">
      <summary>
            Make a BDD encoding of k least significant bits of all the integers in the ranges
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.MkRangesConstraint(System.Boolean,System.Collections.Generic.IEnumerable{System.Char[]})">
      <summary>
            Make a BDD encoding of k least significant bits of all the characters in the character ranges.
            If ignoreCase is true ignore cases for upper and lower case characters by including both versions.
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.GenerateMember(Rex.Chooser,Rex.BDD)">
      <summary>
            Generate a character that is a member of the bdd
            Assumes that the bdd is not BDD.False.
            Uses chooser to randomize member generation.
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.Serialize(Rex.BDD)">
      <summary>
            Enumerate the bdd arcs as integer tuple [x, sourceNode, trueNode, falseNode]
            The root node of the BDD is the sourceNode of the first triplet.
            False node has id 0 and True node has id 1.
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.SerializeCompact(Rex.BDD)">
      <summary>
            Represent the bdd as and integer array
            the element at index 0 is the false node
            the element at index 1 is the true node 
            and entry at index i&gt;1 is node i and has the structure 
            (ordinal trueNode falseNode)
            where ordinal uses 4 bits and trueNode and falseNode each use 14 bits
            Assumes that the bdd has less than 2^14 nodes and at most 16 variables.
            BDD.False is represented by int[]{0}.
            BDD.True is represented by int[]{0,0}.
            The root of the BDD (Other than True or False) is node 2
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.Deserialize(System.Collections.Generic.IEnumerable{System.Int32[]})">
      <summary>
            Assumes that labels in the arcs are less than k and that the arcs indeed represent a BDD.
            Each arc must have the form [x, sourceNode, trueNode, falseNode] with x as the bit nr.
            If the enumeration is empty then Bdd.True is returned.
            The source of the first arc is assumed to be the root node.
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.DeserializeCompact(System.Int32[])">
      <summary>
            Recreates a BDD from an int array that has been created using SerializeCompact
            </summary>
    </member>
    <member name="M:Rex.BddBuilder.Display(Rex.BDD,System.String,Rex.RANKDIR,System.Int32,System.Boolean,System.String)">
      <summary>
            View the given BDD as a graph. Requires that dot.exe is installed.
            Uses dot.exe to create a file name.dot and produces a layout in name.format.
            If showgraph is true, starts a process to view the graph.
            For example if name = "foo" and format = "gif", creates a file 
            foo.dot with the dot output and a file foo.gif as a picture.
            Uses the current working directory.
            </summary>
      <param name="bdd">the BDD to be viewed</param>
      <param name="name">name of the file where the graph is stored</param>
      <param name="dir">direction of the arrows</param>
      <param name="fontsize">size of the font in node and edge labels</param>
      <param name="showgraph">id true, the graph is viewed</param>
      <param name="format">format of the figure</param>
    </member>
    <member name="M:Rex.BddBuilder.ToDot(Rex.BDD,System.String,System.String,Rex.RANKDIR,System.Int32)">
      <summary>
            Store the BDD in dot format
            </summary>
      <param name="bdd">
      </param>
      <param name="bddName">
      </param>
      <param name="filename">
      </param>
      <param name="rankdir">
      </param>
      <param name="fontsize">
      </param>
    </member>
    <member name="P:Rex.BddBuilder.NrOfBits">
      <summary>
            Number of bits in the BDDs
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Common.HelperFunctions.GetTypeFromAssembly(System.Reflection.Assembly,System.String)">
      <summary>
            Gets the type from an assembly passed into it
            </summary>
      <param name="assembly">
      </param>
      <param name="typeName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Data.FieldGroup">
      <summary>
            Class to store definition of a group of Fields in the Data Model
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Data.FieldGroup.#ctor(System.String)">
      <summary>
            .ctor for FieldGroup Class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Data.FieldGroup.#ctor">
      <summary>
            Default .ctor for FieldGroup
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Data.FieldGroup.AddFields(MAT.DataGenerator.Types.FieldTypeBase[])">
      <summary>
            Method to add multiple fields to the FieldGroup
            </summary>
      <param name="fields">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.FieldGroup.RemoveFields(MAT.DataGenerator.Types.FieldTypeBase[])">
      <summary>
            Remove the Field object passed in.
            </summary>
      <param name="fields">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.FieldGroup.RemoveFieldsByName(System.String[])">
      <summary>
            Remove the Field object for the names of the fields passed in
            </summary>
      <param name="fieldNames">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.FieldGroup.FieldExists(System.String)">
      <summary>
            Method to check whether the Field Group contains a Field with a particular name
            </summary>
      <param name="fieldName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.FieldGroup.GetFieldByName(System.String)">
      <summary>
            Method to retrieve the FieldGroup object by its name
            </summary>
      <param name="fieldName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.FieldGroup.GetFields(System.String)">
      <summary>
            Method to retrieve the Fields except the field that is passed in
            </summary>
      <param name="exceptFieldId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.ULongType">
      <summary>
            Type for defining a Field as beulonging to the String type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ULongType.#ctor(System.String,System.String,System.UInt64,System.UInt64,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for the StringType Class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ULongType.#ctor(System.String)">
      <summary>
            ctor for ULongType
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ULongType.#ctor">
      <summary>
            Default ctor for ULong Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ULongType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.UIntType">
      <summary>
            Type for defining a Field as belonging to the String type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.UIntType.#ctor(System.String,System.String,System.UInt32,System.UInt32,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for the StringType Class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.UIntType.#ctor(System.String)">
      <summary>
            ctor for UIntType
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.UIntType.#ctor">
      <summary>
            Default ctor for UInt Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.UIntType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Generators.IGeneratorsListAttribute">
      <summary>
            Interface to define a Generator attribute, this will be used in adding generators in the form of metadata 
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnGeneratorListAttribute">
      <summary>
            List of results of one column from a Sql Query.  This list is used when producing pairwise testing.  Use SqlDataGenerator for simple runs.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnGeneratorListAttribute.#ctor(System.String,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, "GetOrders");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnGeneratorListAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnGeneratorListAttribute.ColumnName">
      <summary>
            Column to read data from
            </summary>
      <value>The name of the column.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnGeneratorListAttribute.ReadFromAppSettings">
      <summary>
            Gets or sets a value indicating whether the connection string and command text are keys to be read from the config file.
            </summary>
      <value>
        <c>true</c> if [use settings]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGenerator">
      <summary>
            SqlDataGenerator used for a simple query of random data.  Use the SqlDataGeneratorList if you need to do pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGenerator.#ctor(System.String,System.Data.CommandType,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="columnName">Column to read data from</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGenerator.#ctor(System.String,System.String,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, "GetOrders", 24, 36);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="columnName">Column to read data from</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGenerator.#ctor(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = SqlDataGenerator(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="columnName">Column to read data from</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGenerator.#ctor(System.Data.SqlClient.SqlConnection,System.String,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = SqlDataGenerator(conn, "GetOrders", 24, 36);
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="columnName">Column to read data from</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGenerator.Invoke">
      <summary>
            Returns a single random result.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGenerator.GetValues">
      <summary>
            Gets the values list for the specific column in DataResults first table.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGenerator.DataSetResults">
      <summary>
            Gets or sets the fullly returned dataset.
            </summary>
      <value>The results.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGenerator.ColumnName">
      <summary>
            Gets or sets the name of name of the column used in the first table of the dataset.
            </summary>
      <value>The name of the column.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGeneratorAttribute">
      <summary>
            SqlDataGeneratorAttribute used for a simple query of random data.  Use the SqlDataGeneratorListAttribute if you need to do pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGeneratorAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (StoredProcedure, TableDirect, Text)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="columnName">Column to read data from</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGeneratorAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, "GetOrders", 24, 36);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="columnName">Column to read data from</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.SqlGenerators.SqlColumnDataGeneratorAttribute.ReadFromAppSettings">
      <summary>
            Gets or sets a value indicating whether the connection string and command text are keys to be read from the config file.
            </summary>
      <value>
        <c>true</c> if [use settings]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGenerator">
      <summary>
            SqlRowDataGenerator used for a simple query of random data.  Use the SqlRowGeneratorListAttribute if you need to do pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGenerator.#ctor(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGenerator.#ctor(System.String,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, "GetOrders", 24, 36);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGenerator.#ctor(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = SqlDataGenerator(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
      <param name="commandParameters">An array of SqlParamters used to execute the command</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGenerator.#ctor(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = SqlDataGenerator(conn, "GetOrders", 24, 36);
            </remarks>
      <param name="connection">A valid SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
      <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGenerator.Invoke">
      <summary>
            Returns a single random result.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGenerator.GetValues">
      <summary>
            Gets the list of rows.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGenerator.DataSetResults">
      <summary>
            Gets or sets the fullly returned dataset.
            </summary>
      <value>The results.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorAttribute">
      <summary>
            SqlRowDataGeneratorAttribute used for a simple query of random data.  Use the SqlRowGeneratorListAttribute if you need to do pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (StoredProcedure, TableDirect, Text)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorAttribute.#ctor(System.String,System.String)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, "GetOrders", 24, 36);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorAttribute.ReadFromAppSettings">
      <summary>
            Gets or sets a value indicating whether the connection string and command text are keys to be read from the config file.
            </summary>
      <value>
        <c>true</c> if [use settings]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorListAttribute">
      <summary>
            SqlRowDataGeneratorAttribute used for a simple query of random data.  Use the SqlRowGeneratorListAttribute if you need to do pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorListAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
      <remarks>
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="commandType">The CommandType (StoredProcedure, TableDirect, Text)</param>
      <param name="commandText">The stored procedure name or T-SQL command</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorListAttribute.#ctor(System.String,System.String)">
      <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
      <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = SqlDataGenerator(connString, "GetOrders", 24, 36);
            </remarks>
      <param name="connectionString">A valid connection string for a SqlConnection</param>
      <param name="spName">The name of the stored procedure</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorListAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.SqlGenerators.SqlRowDataGeneratorListAttribute.ReadFromAppSettings">
      <summary>
            Gets or sets a value indicating whether the connection string and command text are keys to be read from the config file.
            </summary>
      <value>
        <c>true</c> if [use settings]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorListAttribute">
      <summary>
            List of results of file paths from a directory.  This list is used when producing pairwise testing.  Use non list for simple runs.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorListAttribute.#ctor(System.String)">
      <summary>
            List of Random file path from a directory.  Use the ListAttribute for pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorListAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorListAttribute.SearchPattern">
      <summary>
            The search string to match against the names of files in path. Wildcards * and ? are allowed. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorListAttribute.IncludeSubFolders">
      <summary>
            Gets or sets a value indicating whether to include sub-folders in the file list.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorListAttribute.Path">
      <summary>
            The directory to search
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorListAttribute.ReadFromAppSettings">
      <summary>
            Gets or sets a value indicating whether the connection string and command text are keys to be read from the config file.
            </summary>
      <value>
        <c>true</c> if [use settings]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGenerator">
      <summary>
            Random file path from a directory.  Use the ListAttribute for pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGenerator.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Random file path from a directory.  Use the ListAttribute for pairwise testing.
            </summary>
      <param name="path">The directory to search</param>
      <param name="searchPattern">The search string to match against the names of files in path. Wildcards * and ? are allowed. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.</param>
      <param name="includeSubFolders">if set to <c>true</c> includes sub folders.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGenerator.Invoke">
      <summary>
            Returns a single random result.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGenerator.PathResults">
      <summary>
            Gets or sets the list of paths.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGenerator.SearchPattern">
      <summary>
            The search string to match against the names of files in path. Wildcards * and ? are allowed. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGenerator.IncludeSubFolders">
      <summary>
            Gets or sets a value indicating whether to include sub-folders in the file list.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGenerator.Path">
      <summary>
            The directory to search
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorAttribute">
      <summary>
            Random file path from a directory.  Use the ListAttribute for pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorAttribute.#ctor(System.String)">
      <summary>
            Random file path from a directory.  Use the ListAttribute for pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorAttribute.PathResults">
      <summary>
            Gets or sets the list of paths.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorAttribute.SearchPattern">
      <summary>
            The search string to match against the names of files in path. Wildcards * and ? are allowed. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorAttribute.IncludeSubFolders">
      <summary>
            Gets or sets a value indicating whether to include sub-folders in the file list.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorAttribute.Path">
      <summary>
            The directory to search
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.FilePathGeneratorAttribute.ReadFromAppSettings">
      <summary>
            Gets or sets a value indicating whether the connection string and command text are keys to be read from the config file.
            </summary>
      <value>
        <c>true</c> if [use settings]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorListAttribute">
      <summary>
            List of results of rows from a file.  This list is used when producing pairwise testing.  Use non list for simple runs.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorListAttribute.#ctor(System.String)">
      <summary>
            List of Random file rows from a file.  Use the ListAttribute for pairwise testing.
            </summary>
      <param name="filePath">The file path.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorListAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorListAttribute.Index">
      <summary>
            Each row gets split by the Separator (default null), Index is what column to return (Default 0)
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorListAttribute.Separator">
      <summary>
            Gets or sets the value used to determine columns.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorListAttribute.FilePath">
      <summary>
            The file to read
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorListAttribute.IncludeEmptyRows">
      <summary>
            Include rows that contain no data or only whitespace
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorListAttribute.ExcludeRegExString">
      <summary>
            Anything that matches this regex will be excluded
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorListAttribute.ReadFromAppSettings">
      <summary>
            Gets or sets a value indicating whether the connection string and command text are keys to be read from the config file.
            </summary>
      <value>
        <c>true</c> if [use settings]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGenerator">
      <summary>
            Random file path from a directory.  Use the ListAttribute for pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGenerator.#ctor(System.String,System.Char,System.Int32,System.Boolean,System.String)">
      <summary>
            Random file path from a directory.  Use the ListAttribute for pairwise testing.
            </summary>
      <param name="filePath">The file to read.</param>
      <param name="separator">Gets or sets the value used to determine columns.</param>
      <param name="index">Each row gets split by the Separator (default null), Index is what column to return (Default 0)</param>
      <param name="includeEmptyRows">Include rows that contain no data or only whitespace</param>
      <param name="excludeRegExString">Anything that matches this regex will be excluded</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGenerator.Invoke">
      <summary>
            Returns a single random result.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGenerator.Rows">
      <summary>
            Gets or sets the list of rows from file.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGenerator.Index">
      <summary>
            Each row gets split by the Separator (default null), Index is what column to return (Default 0)
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGenerator.Separator">
      <summary>
            Gets or sets the value used to determine columns.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGenerator.FilePath">
      <summary>
            The file to read.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGenerator.IncludeEmptyRows">
      <summary>
            Include rows that contain no data or only whitespace
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGenerator.ExcludeRegExString">
      <summary>
            Anything that matches this regex will be excluded
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorAttribute">
      <summary>
            Random file path from a directory.  Use the ListAttribute for pairwise testing.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorAttribute.#ctor(System.String)">
      <summary>
            Random file path from a directory.  Use the ListAttribute for pairwise testing.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorAttribute.PathResults">
      <summary>
            Gets or sets the list of paths.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorAttribute.SearchPattern">
      <summary>
            The search string to match against the names of files in path. Wildcards * and ? are allowed. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorAttribute.IncludeSubFolders">
      <summary>
            Gets or sets a value indicating whether to include sub-folders in the file list.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorAttribute.Path">
      <summary>
            The directory to search
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.FileSystemGenerators.TextFileRowGeneratorAttribute.ReadFromAppSettings">
      <summary>
            Gets or sets a value indicating whether the connection string and command text are keys to be read from the config file.
            </summary>
      <value>
        <c>true</c> if [use settings]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BooleanGenerators.TrueValueGenerator">
      <summary>
            Returns True.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BooleanGenerators.TrueValueGenerator.Invoke">
      <summary>
            Returns True.
            </summary>
      <returns>True</returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BooleanGenerators.TrueValueGeneratorAttribute">
      <summary>
            Returns True.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BooleanGenerators.TrueValueGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BooleanGenerators.FalseValueGenerator">
      <summary>
            Returns False.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BooleanGenerators.FalseValueGenerator.Invoke">
      <summary>
            Returns False.
            </summary>
      <returns>False</returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BooleanGenerators.FalseValueGeneratorAttribute">
      <summary>
            Returns False.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BooleanGenerators.FalseValueGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BooleanGenerators.RandomBooleanGenerator">
      <summary>
            Returns True or False.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BooleanGenerators.RandomBooleanGenerator.Invoke">
      <summary>
            Returns True or False.
            </summary>
      <returns>True or False.</returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BooleanGenerators.RandomBooleanGeneratorAttribute">
      <summary>
            Returns True or False.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BooleanGenerators.RandomBooleanGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.GeneratorsNs.DefaultGenerators">
      <summary>
            Class definition for Default Type Generators
            </summary>
    </member>
    <member name="F:MAT.DataGenerator.Generators.GeneratorsNs.DefaultGenerators.DefaultGeneratorsList">
      <summary>
            Dictionary for storing the default generators list per type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.BitGeneratorsHelper.GenerateRandomBit(System.Int32)">
      <summary>
            Generates the random bit.
            </summary>
      <param name="seed">The seed.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.LongType">
      <summary>
            Type for defining a Field as belonging to the Long/Int64 type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.LongType.#ctor(System.String,System.String,System.Int64,System.Int64,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for the StringType Class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.LongType.#ctor(System.String)">
      <summary>
            ctor for LongType
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.LongType.#ctor">
      <summary>
            Default ctor for Long Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.LongType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.ByteArrayType">
      <summary>
            Type for defining a Field as belonging to the Byte type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ByteArrayType.#ctor(System.String,System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
             ctor for the ByteArrayType Class
            </summary>
      <param name="name">
      </param>
      <param name="sampleValues">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ByteArrayType.#ctor(System.String)">
      <summary>
            ctor for the ByteArrayType Class
            </summary>
      <param name="name">Name of the FieldType object</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ByteArrayType.#ctor">
      <summary>
            Default ctor for Byte Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ByteArrayType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper">
      <summary>
            String generator helper
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.RandomStringType">
      <summary>
            RandomStringType
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.GenerateSystemString(MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.RandomStringType,System.Int32)">
      <summary>
            Generate a random string
            </summary>
      <param name="length">the length of the generated string</param>
      <param name="stringtype">the string type you want</param>
      <returns>a random string</returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.GenerateEmail(System.Int32,System.Int32)">
      <summary>
            Generate an e-mail address
            </summary>
      <param name="minLength">Minimum length for address.</param>
      <param name="maxLength">Maximum length for address.</param>
      <returns>e-mail address</returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.GenerateString(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Generate String data
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.GetRandomChar">
      <summary>
            Generate a random character
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.GetFixedLengthString(System.Int32)">
      <summary>
            Gets a fixed length string of length passed in as input
            </summary>
      <param name="maxLength">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.RndXmlCharacters(System.Int32,System.Int32)">
      <summary>
            AnyXmlSupportedCharacters method will return valid and invalid characters
            </summary>
      <param name="maxSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.RndValidXmlCharaters(System.Int32,System.Int32)">
      <summary>
            XmlValidCharaters method only return only valid xml characters
            </summary>
      <param name="maxSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.RndAscii(System.Int32,System.Int32)">
      <summary>
            Get any Ascii characters between 0 to 255
            </summary>
      <param name="maxSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.RndAsciiAndUnicode(System.Int32,System.Int32)">
      <summary>
            Get any Ascii and Unicode character
            </summary>
      <param name="minSize">
      </param>
      <param name="maxSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.RandomUnicodeString(System.Int32,System.Int32)">
      <summary>
            Get any Unicode character
            </summary>
      <param name="minSize">
      </param>
      <param name="maxSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.RandomMSID">
      <summary>
            Return 32 character of a Guid without the dash '-'
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.RandomAlphaNumeric(System.Int32,System.Int32)">
      <summary>
            Get Alpha Numeric character
            </summary>
      <param name="minSize">Size of the min.</param>
      <param name="maxSize">Size of the max.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.StringGeneratorsHelper.GetMixedString(System.Int32)">
      <summary>
            Gets the mixed string.
            </summary>
      <param name="maxSize">Size of the max.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.IntGeneratorsHelper.GenerateInt32(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Generate int data
            </summary>
      <param name="type">type</param>
      <param name="minValue">minValue</param>
      <param name="maxValue">maxValue</param>
      <param name="seed">seed</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.GuidGeneratorsHelper.GenerateGuid(System.String)">
      <summary>
            Generate Guid data
            </summary>
      <param name="type">type</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.DoubleGeneratorsHelper.GenerateDouble(System.Double,System.Double,System.Int32)">
      <summary>
            Generate random Double data
            </summary>
      <param name="minValue">minValue</param>
      <param name="maxValue">maxValue</param>
      <param name="seed">seed</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.ObjectGeneratorsHelper.GenerateObject(System.Type,System.Int32)">
      <summary>
            Generate an object instance of this type
            </summary>
      <param name="objectType">
      </param>
      <param name="seed">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.DataDriven.GenerationType">
      <summary>
            ie: [DataSource(DataDriven.Provider, GenerationType.Random, "DataGen.InputRow;Count;Seed", DataAccessMethod.Sequential]
            </summary>
    </member>
    <member name="T:Rex.ArgumentType">
      <summary>
            Used to control parsing of command line arguments.
            </summary>
    </member>
    <member name="F:Rex.ArgumentType.Required">
      <summary>
            Indicates that this field is required. An error will be displayed
            if it is not present when parsing arguments.
            </summary>
    </member>
    <member name="F:Rex.ArgumentType.Unique">
      <summary>
            Only valid in conjunction with Multiple.
            Duplicate values will result in an error.
            </summary>
    </member>
    <member name="F:Rex.ArgumentType.Multiple">
      <summary>
            Inidicates that the argument may be specified more than once.
            Only valid if the argument is a collection
            </summary>
    </member>
    <member name="F:Rex.ArgumentType.AtMostOnce">
      <summary>
            The default type for non-collection arguments.
            The argument is not required, but an error will be reported if it is specified more than once.
            </summary>
    </member>
    <member name="F:Rex.ArgumentType.LastOccurenceWins">
      <summary>
            For non-collection arguments, when the argument is specified more than
            once no error is reported and the value of the argument is the last
            value which occurs in the argument list.
            </summary>
    </member>
    <member name="F:Rex.ArgumentType.MultipleUnique">
      <summary>
            The default type for collection arguments.
            The argument is permitted to occur multiple times, but duplicate 
            values will cause an error to be reported.
            </summary>
    </member>
    <member name="F:Rex.ArgumentType.AtLeastOnce">
      <summary>
            The default type for non-collection arguments.
            The argument is not required, but an error will be reported if it is specified more than once.
            </summary>
    </member>
    <member name="T:Rex.ArgumentAttribute">
      <summary>
            Allows control of command line parsing.
            Attach this attribute to instance fields of types used
            as the destination of command line argument parsing.
            </summary>
    </member>
    <member name="M:Rex.ArgumentAttribute.#ctor(Rex.ArgumentType)">
      <summary>
            Allows control of command line parsing.
            </summary>
      <param name="type"> Specifies the error checking to be done on the argument. </param>
    </member>
    <member name="P:Rex.ArgumentAttribute.Type">
      <summary>
            The error checking to be done on the argument.
            </summary>
    </member>
    <member name="P:Rex.ArgumentAttribute.DefaultShortName">
      <summary>
            Returns true if the argument did not have an explicit short name specified.
            </summary>
    </member>
    <member name="P:Rex.ArgumentAttribute.ShortName">
      <summary>
            The short name of the argument.
            Set to null means use the default short name if it does not
            conflict with any other parameter name.
            Set to String.Empty for no short name.
            This property should not be set for DefaultArgumentAttributes.
            </summary>
    </member>
    <member name="P:Rex.ArgumentAttribute.DefaultLongName">
      <summary>
            Returns true if the argument did not have an explicit long name specified.
            </summary>
    </member>
    <member name="P:Rex.ArgumentAttribute.LongName">
      <summary>
            The long name of the argument.
            Set to null means use the default long name.
            The long name for every argument must be unique.
            It is an error to specify a long name of String.Empty.
            </summary>
    </member>
    <member name="P:Rex.ArgumentAttribute.DefaultValue">
      <summary>
            The default value of the argument.
            </summary>
    </member>
    <member name="P:Rex.ArgumentAttribute.HasDefaultValue">
      <summary>
            Returns true if the argument has a default value.
            </summary>
    </member>
    <member name="P:Rex.ArgumentAttribute.HasHelpText">
      <summary>
            Returns true if the argument has help text specified.
            </summary>
    </member>
    <member name="P:Rex.ArgumentAttribute.HelpText">
      <summary>
            The help text for the argument.
            </summary>
    </member>
    <member name="T:Rex.DefaultArgumentAttribute">
      <summary>
            Indicates that this argument is the default argument.
            '/' or '-' prefix only the argument value is specified.
            The ShortName property should not be set for DefaultArgumentAttribute
            instances. The LongName property is used for usage text only and
            does not affect the usage of the argument.
            </summary>
    </member>
    <member name="M:Rex.DefaultArgumentAttribute.#ctor(Rex.ArgumentType)">
      <summary>
            Indicates that this argument is the default argument.
            </summary>
      <param name="type"> Specifies the error checking to be done on the argument. </param>
    </member>
    <member name="T:Rex.ErrorReporter">
      <summary>
            A delegate used in error reporting.
            </summary>
    </member>
    <member name="T:Rex.CommandLineParser">
      <summary>
             Parser for command line arguments.
            
             The parser specification is infered from the instance fields of the object
             specified as the destination of the parse.
             Valid argument types are: int, uint, string, bool, enums
             Also argument types of Array of the above types are also valid.
             
             Error checking options can be controlled by adding a ArgumentAttribute
             to the instance fields of the destination object.
            
             At most one field may be marked with the DefaultArgumentAttribute
             indicating that arguments without a '-' or '/' prefix will be parsed as that argument.
            
             If not specified then the parser will infer default options for parsing each
             instance field. The default long name of the argument is the field name. The
             default short name is the first character of the long name. Long names and explicitly
             specified short names must be unique. Default short names will be used provided that
             the default short name does not conflict with a long name or an explicitly
             specified short name.
            
             Arguments which are array types are collection arguments. Collection
             arguments can be specified multiple times.
             </summary>
    </member>
    <member name="F:Rex.CommandLineParser.NewLine">
      <summary>
            The System Defined new line string.
            </summary>
    </member>
    <member name="M:Rex.CommandLineParser.ParseArgumentsWithUsage(System.String[],System.Object)">
      <summary>
            Parses Command Line Arguments. Displays usage message to Console.Out
            if /?, /help or invalid arguments are encounterd.
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
      <param name="arguments"> The actual arguments. </param>
      <param name="destination"> The resulting parsed arguments. </param>
      <returns> true if no errors were detected. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.ParseArgumentsWithUsage(System.String[],System.Type)">
      <summary>
            Parses Command Line Arguments. Displays usage message to Console.Out
            if /?, /help or invalid arguments are encounterd.
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
      <param name="arguments"> The actual arguments. </param>
      <param name="destination"> The resulting parsed arguments. </param>
      <returns> true if no errors were detected. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.ParseArguments(System.String[],System.Object)">
      <summary>
            Parses Command Line Arguments. 
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
      <param name="arguments"> The actual arguments. </param>
      <param name="destination"> The resulting parsed arguments. </param>
      <returns> true if no errors were detected. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.ParseArguments(System.String[],System.Type)">
      <summary>
            Parses Command Line Arguments. 
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
      <param name="arguments"> The actual arguments. </param>
      <param name="destination"> The resulting parsed arguments. </param>
      <returns> true if no errors were detected. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.ParseArguments(System.String[],System.Object,Rex.ErrorReporter)">
      <summary>
            Parses Command Line Arguments. 
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
      <param name="arguments"> The actual arguments. </param>
      <param name="destination"> The resulting parsed arguments. </param>
      <param name="reporter"> The destination for parse errors. </param>
      <returns> true if no errors were detected. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.ParseArguments(System.String[],System.Type,Rex.ErrorReporter)">
      <summary>
            Parses Command Line Arguments. 
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
      <param name="arguments"> The actual arguments. </param>
      <param name="destination"> The resulting parsed arguments. </param>
      <param name="reporter"> The destination for parse errors. </param>
      <returns> true if no errors were detected. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.ParseHelp(System.String[])">
      <summary>
            Checks if a set of arguments asks for help.
            </summary>
      <param name="args"> Args to check for help. </param>
      <returns> Returns true if args contains /? or /help. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.ArgumentsUsage(System.Type)">
      <summary>
            Returns a Usage string for command line argument parsing.
            Use ArgumentAttributes to control parsing behaviour.
            Formats the output to the width of the current console window.
            </summary>
      <param name="argumentType"> The type of the arguments to display usage for. </param>
      <returns> Printable string containing a user friendly description of command line arguments. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.ArgumentsUsage(System.Type,System.Int32)">
      <summary>
            Returns a Usage string for command line argument parsing.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
      <param name="argumentType"> The type of the arguments to display usage for. </param>
      <param name="columns"> The number of columns to format the output to. </param>
      <returns> Printable string containing a user friendly description of command line arguments. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.IndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
      <summary>
            Searches a StringBuilder for a character
            </summary>
      <param name="text"> The text to search. </param>
      <param name="value"> The character value to search for. </param>
      <param name="startIndex"> The index to stat searching at. </param>
      <returns> The index of the first occurence of value or -1 if it is not found. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.LastIndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
      <summary>
            Searches a StringBuilder for a character in reverse
            </summary>
      <param name="text"> The text to search. </param>
      <param name="value"> The character to search for. </param>
      <param name="startIndex"> The index to start the search at. </param>
      <returns>The index of the last occurence of value in text or -1 if it is not found. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.#ctor(System.Type,Rex.ErrorReporter)">
      <summary>
            Creates a new command line argument parser.
            </summary>
      <param name="argumentSpecification"> The type of object to  parse. </param>
      <param name="reporter"> The destination for parse errors. </param>
    </member>
    <member name="M:Rex.CommandLineParser.ParseArgumentList(System.String[],System.Object)">
      <summary>
            Parses an argument list into an object
            </summary>
      <param name="args">
      </param>
      <param name="destination">
      </param>
      <returns> true if an error occurred </returns>
    </member>
    <member name="M:Rex.CommandLineParser.Parse(System.String[],System.Object)">
      <summary>
            Parses an argument list.
            </summary>
      <param name="args"> The arguments to parse. </param>
      <param name="destination"> The destination of the parsed arguments. </param>
      <returns> true if no parse errors were encountered. </returns>
    </member>
    <member name="M:Rex.CommandLineParser.GetUsageString(System.Int32)">
      <summary>
            A user firendly usage string describing the command line argument syntax.
            </summary>
    </member>
    <member name="P:Rex.CommandLineParser.HasDefaultArgument">
      <summary>
            Does this parser have a default argument.
            </summary>
      <value> Does this parser have a default argument. </value>
    </member>
    <member name="T:Rex.RANKDIR">
      <summary>
            Used for saving automata as graphs in dot format.
            Provides the direction of the graph.
            </summary>
    </member>
    <member name="T:Rex.Chooser">
      <summary>
            Random number chooser
            </summary>
    </member>
    <member name="M:Rex.Chooser.Choose(System.Int32)">
      <summary>
            Choose a random number between 0 and n-1
            </summary>
    </member>
    <member name="M:Rex.Chooser.ChooseTrueOrFalse">
      <summary>
            Choose true or false randomly
            </summary>
    </member>
    <member name="P:Rex.Chooser.RandomSeed">
      <summary>
            Get or set the random seed of the chooser
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.StringType">
      <summary>
            Type for defining a Field as belonging to the String type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.StringType.#ctor(System.String)">
      <summary>
            ctor for String Type class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.StringType.#ctor">
      <summary>
            Default ctor for String Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.StringType.#ctor(System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for String Type class
            </summary>
      <param name="name">
      </param>
      <param name="generatorsList">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.StringType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.ByteType">
      <summary>
            Type for defining a Field as belonging to the Byte type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ByteType.#ctor(System.String,System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
             ctor for the ByteType Class
            </summary>
      <param name="name">
      </param>
      <param name="sampleValues">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ByteType.#ctor(System.String)">
      <summary>
            ctor for the ByteType Class
            </summary>
      <param name="name">Name of the FieldType object</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ByteType.#ctor">
      <summary>
            Default ctor for Byte Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ByteType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.SetDataModel(MAT.DataGenerator.Data.DataModelClass)">
      <summary>
            Method to set Data model on the Data Manager if user wants to precreate a Data Model and pass it in
            </summary>
      <param name="dataModel">The DataModel.</param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.ExportDataModel(MAT.DataGenerator.Data.DataModelClass,System.String)">
      <summary>
            Save the data model in file format.
            </summary>
      <param name="dataModel">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.ExportDataModel(System.String)">
      <summary>
            Export the Data model to a local file
            </summary>
      <param name="filePath">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.ImportDataModel(System.String)">
      <summary>
            Save the data model in file format.
            </summary>
      <param name="filePath">File to save model as.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.SetDefaultGenerators(MAT.DataGenerator.Generators.GeneratorsNs.DefaultGenerators)">
      <summary>
            Set the default list of generators
            </summary>
      <param name="DefaultGeneratorsList">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.SaveValidations">
      <summary>
            Save validations
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.SaveValidations(System.Collections.Generic.List{MAT.DataGenerator.Data.FieldGroup})">
      <summary>
            Save validations
            </summary>
      <param name="fieldGroups">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.RetrieveField(System.String,System.Guid@,System.String@,System.String@,System.Collections.Generic.List{MAT.DataGenerator.Generators.IGenerator}@)">
      <summary>
            Retrieve Field Info
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GenerateData(MAT.DataGenerator.Common.DataFormat,System.String)">
      <summary>
            Overloaded method for GenerateData, writes the generated data to the output file passed in as the parameter. 
            </summary>
      <param name="dataformat">
      </param>
      <param name="outputFilePath">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GenerateData(MAT.DataGenerator.Common.DataFormat,System.String,System.Int64)">
      <summary>
            Generate the data
            </summary>
      <param name="dataformat">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.ConvertToCSV(System.Xml.XmlDocument,System.String)">
      <summary>
            Convert the data generated to CSV format
            </summary>
      <param name="DataDoc">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.ConvertStringToByteArray(System.String)">
      <summary>
            Convert string to byte array
            </summary>
      <param name="stringToConvert">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GenerateData(MAT.DataGenerator.Common.DataFormat,System.String,System.String)">
      <summary>
            Generate data for which the metadata file has been passed
            </summary>
      <param name="metadataFilePath">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.InitializeMetaData(System.String)">
      <summary>
            Initialize field meta data from file
            </summary>
      <param name="metadataFilePath">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext``1(MAT.DataGenerator.Data.FieldGroup,System.Int64,``0)">
      <summary>
            Get the next object list
            </summary>
      <typeparam name="T">Type of object to fill with random data</typeparam>
      <param name="fieldGroup">Information of type of class to create and data to fill in</param>
      <param name="count">Number of objects to return</param>
      <param name="type">Type of object to return</param>
      <returns>List of T objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext``1(MAT.DataGenerator.Data.FieldGroup,System.Int64)">
      <summary>
            Get the next object list
            </summary>
      <typeparam name="T">Type of object to fill with random data</typeparam>
      <param name="fieldGroup">Information of type of class to create and data to fill in</param>
      <param name="count">Number of objects to return</param>
      <returns>List of T objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext(MAT.DataGenerator.Data.FieldGroup,System.Int64)">
      <summary>
            Get the next object list
            </summary>
      <param name="fieldGroup">Information of type of class to create and data to fill in</param>
      <param name="count">Number of objects to return</param>
      <returns>List of objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext``1(MAT.DataGenerator.Data.FieldGroup,``0)">
      <summary>
            Get next object list
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="fieldGroup">
      </param>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext``1(MAT.DataGenerator.Data.FieldGroup,System.Int32,``0)">
      <summary>
            Get next object list
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="fieldGroup">
      </param>
      <param name="count">
      </param>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext``1(MAT.DataGenerator.Data.FieldGroup)">
      <summary>
            Get the next object list
            </summary>
      <typeparam name="T">Type of object to fill with random data</typeparam>
      <param name="fieldGroup">Information of type of class to create and data to fill in</param>
      <returns>Object with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext(MAT.DataGenerator.Data.FieldGroup)">
      <summary>
            Get the next object list
            </summary>
      <param name="fieldGroup">Information of type of class to create and data to fill in</param>
      <returns>Object with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext(MAT.DataGenerator.Data.FieldGroup,System.Int32)">
      <summary>
            Get the next object list
            </summary>
      <param name="count">Number of objects to return</param>
      <param name="fieldGroup">Information of type of class to create and data to fill in</param>
      <returns>List of objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNextAsArray(MAT.DataGenerator.Data.FieldGroup,System.Int32)">
      <summary>
            Returns object list as an array
            </summary>
      <param name="fieldGroup">
      </param>
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext``1(MAT.DataGenerator.Data.FieldGroup,System.Int32)">
      <summary>
            Get the next object list
            </summary>
      <typeparam name="T">Type of object to fill with random data</typeparam>
      <param name="count">Number of objects to return</param>
      <param name="fieldGroup">Information of type of class to create and data to fill in</param>
      <returns>List of objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext(System.Type)">
      <summary>
            Gets the next object based on the type passed in. This method infers the FieldGroup from the type passed in and adds the FieldGroup to the data model if not already present.
            </summary>
      <param name="type">Type of object to fill with random data</param>
      <returns>Object with random data filled in</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext``1">
      <summary>
            Gets the next object based on the type passed in. This method infers the FieldGroup from the type passed in and adds the FieldGroup to the data model if not already present.
            </summary>
      <typeparam name="T">Type of object to fill with random data</typeparam>
      <returns>T with random data filled in</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetLast``1">
      <summary>
            Retrieve the last generated object
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetAll``1(MAT.DataGenerator.Common.CombinationType)">
      <summary>
            Gets all the object combinations based on combination type passed in
            </summary>
      <param name="combinationType">Exhuastive or Pairwise</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetAll``1(MAT.DataGenerator.Data.FieldGroup,MAT.DataGenerator.Common.CombinationType,``0)">
      <summary>
            Get all the 
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="fieldGroupItem">
      </param>
      <param name="combinationType">
      </param>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetAll``1(MAT.DataGenerator.Data.FieldGroup,MAT.DataGenerator.Common.CombinationType)">
      <summary>
            Gets the next object based on the type passed in. This method infers the FieldGroup from the type passed in and adds the FieldGroup to the data model if not already present.
            </summary>
      <param name="fieldGroupItem">Information of type of class to create and data to fill in</param>
      <param name="combinationType">Exhuastive or Pairwise</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetAll(System.Type,MAT.DataGenerator.Common.CombinationType)">
      <summary>
            Gets the next object based on the type passed in. This method infers the FieldGroup from the type passed in and adds the FieldGroup to the data model if not already present.
            </summary>
      <param name="combinationType">Exhuastive or Pairwise</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetAll(MAT.DataGenerator.Data.FieldGroup,MAT.DataGenerator.Common.CombinationType)">
      <summary>
            Gets all the object combinations based on FieldGroup and combination type passed in.
            </summary>
      <param name="fieldGroupItem">Information of type of class to create and data to fill in</param>
      <param name="combinationType">Exhuastive or Pairwise</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext(System.Type,System.Int32)">
      <summary>
            Gets the next object based on the type passed in. This method infers the FieldGroup from the type passed in and adds the FieldGroup to the data model if not already present.
            </summary>
      <param name="type">Type of object to fill with random data</param>
      <param name="count">Number of objects to return</param>
      <returns>List of objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext``1(System.Int32)">
      <summary>
            Gets the next object based on the type passed in. This method infers the FieldGroup from the type passed in and adds the FieldGroup to the data model if not already present.
            </summary>
      <typeparam name="T">Type of object to fill with random data</typeparam>
      <param name="count">Number of objects to return</param>
      <returns>List of T objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNext``1(System.Type,System.Int32)">
      <summary>
            Gets the next object based on the type passed in. This method infers the FieldGroup from the type passed in and adds the FieldGroup to the data model if not already present.
            </summary>
      <typeparam name="T">Type of object to fill with random data</typeparam>
      <param name="type">Type of object to fill with random data</param>
      <returns>List of objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNextInternal(MAT.DataGenerator.Data.FieldGroup,System.Int64,System.Boolean)">
      <summary>
            Generate the data main method
            </summary>
      <param name="fieldGroupItem">Information of type of class to create and data to fill in</param>
      <param name="count">Number of objects to return</param>
      <param name="refreshData">
      </param>
      <returns>List of objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNextInternal``1(MAT.DataGenerator.Data.FieldGroup,System.Int64,System.Boolean)">
      <summary>
            Generate the data main method
            </summary>
      <typeparam name="T">Type of object to fill with random data</typeparam>
      <param name="fieldGroupItem">Information of type of class to create and data to fill in</param>
      <param name="count">Number of objects to return</param>
      <param name="refreshData">
      </param>
      <returns>List of T objects with random data filled in"/&gt;</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetRowCount(MAT.DataGenerator.Data.FieldGroup)">
      <summary>
            Get row count for each Field Group
            </summary>
      <param name="fieldGroup">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNextList``1(System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
      <summary>
            Gets the next list.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="count">The count.</param>
      <returns>List of T generated data</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNextList(MAT.DataGenerator.Data.FieldGroup,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
      <summary>
            Gets the next list.
            </summary>
      <param name="fieldGroup">The field group.</param>
      <param name="count">The count.</param>
      <returns>List of objects generated data</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetNextItem``1(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
      <summary>
            Gets the next item.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="seed">The seed.</param>
      <param name="useWeights">if set to <c>true</c> [use weights].</param>
      <param name="useDefaultGenerators">if set to <c>true</c> [use default generators].</param>
      <returns>List of T generated data</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetAllPairwise``1(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
      <summary>
            Gets all pairwise.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="seed">The seed.</param>
      <param name="useWeights">if set to <c>true</c> [use weights].</param>
      <param name="useDefaultGenerators">if set to <c>true</c> [use default generators].</param>
      <returns>List of T generated data</returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataManager.GetAllExhaustive``1(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
      <summary>
            Gets all exhaustive.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="seed">The seed.</param>
      <param name="useWeights">if set to <c>true</c> [use weights].</param>
      <param name="useDefaultGenerators">if set to <c>true</c> [use default generators].</param>
      <returns>List of T generated data</returns>
    </member>
    <member name="M:Rex.UnicodeCategoryRangesGenerator.Generate(System.String,System.String,System.String)">
      <summary>
            Create a file classname.cs in the directory path.
            The file contains the static class with name classname and has namespace namespacename.
            The class has static fields that map unicode categories to their character ranges
            and provide whitespace ranges.
            The fields are for the ASCII case (7 bits), CP437 case (8 bits) and for UTF16 (16 bits).
            Overwrites an existing file, even if the existing file is write protected.
            </summary>
      <param name="namespacename">namespace for the class</param>
      <param name="classname">name of the class</param>
      <param name="path">path where the file is written</param>
    </member>
    <member name="T:Rex.Pair`2">
      <summary>
            Pair of elements of type S and type T.
            This is a value class: two pairs are equal iff their 
            first elements are equal and their second elements are equal.
            </summary>
      <typeparam name="S">type of the first element</typeparam>
      <typeparam name="T">type of the secod element</typeparam>
    </member>
    <member name="F:Rex.Pair`2.First">
      <summary>
            The first element of the pair.
            </summary>
    </member>
    <member name="F:Rex.Pair`2.Second">
      <summary>
            The second element of the pair.
            </summary>
    </member>
    <member name="T:Rex.CharacterEncoding">
      <summary>
            Supported character encodings
            </summary>
    </member>
    <member name="F:Rex.CharacterEncoding.ASCII">
      <summary>
            7 bit ASCII encoding
            </summary>
    </member>
    <member name="F:Rex.CharacterEncoding.CP437">
      <summary>
            8 bit Extended ASCII encoding
            </summary>
    </member>
    <member name="F:Rex.CharacterEncoding.Unicode">
      <summary>
            16 bit UTF-16 encoding
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.GuidType">
      <summary>
            Type for defining a Field as belonging to the Guid type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.GuidType.#ctor(System.String)">
      <summary>
            ctor for the GuidType Class
            </summary>
      <param name="name">Name of the FieldType object</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.GuidType.#ctor(System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for GuidType class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.GuidType.#ctor">
      <summary>
            Default ctor for GuidType
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.GuidType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.DateTimeType">
      <summary>
            Type for defining a Field as belonging to the DateTime type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.DateTimeType.#ctor(System.String)">
      <summary>
            ctor for DateTimeType class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.DateTimeType.#ctor">
      <summary>
            Default ctor for DateTime Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.DateTimeType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.BitType">
      <summary>
            Type for defining a Field as belonging to the Bit type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.BitType.#ctor(System.String,System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
             ctor for the BitType Class
            </summary>
      <param name="name">
      </param>
      <param name="sampleValues">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.BitType.#ctor(System.String)">
      <summary>
            ctor for the BitType Class
            </summary>
      <param name="name">Name of the FieldType object</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.BitType.#ctor">
      <summary>
            Default ctor for Bit Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.BitType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:Rex.Program">
      <summary>
            Commandline tool entry point for Rex
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Types.TypeModel">
      <summary>
            Main Class which models the definition of the Types to be loaded along with each of the 
            Types Generators Implements interface ITypeModel
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.TypeModel.#ctor">
      <summary>
            ctor for TypeModel class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.TypeModel.FieldTypeExists(System.String)">
      <summary>
            Method to check whether the Field Types list contains a Field Type with a particular name
            </summary>
      <param name="FieldTypeName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Types.TypeModel.GetFieldTypeByName(System.String)">
      <summary>
            Method to retrieve the FieldType object by its name
            </summary>
      <param name="FieldTypeName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.ObjectDataBuilder.SetMemberValue(System.Object@,System.String,System.Object,MAT.DataGenerator.Types.FieldTypeBase)">
      <summary>
            Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.IntType">
      <summary>
            Type for defining a Field as belonging to the String type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.IntType.#ctor(System.String,System.String,System.Int32,System.Int32,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for the StringType Class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.IntType.#ctor(System.String)">
      <summary>
            ctor for IntType
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.IntType.#ctor">
      <summary>
            Default ctor for Int Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.IntType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.CharType">
      <summary>
            Type for defining a Field as belonging to the String type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.CharType.#ctor(System.String)">
      <summary>
            ctor for String Type class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.CharType.#ctor">
      <summary>
            Default ctor for String Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.CharType.#ctor(System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for String Type class
            </summary>
      <param name="name">
      </param>
      <param name="generatorsList">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.CharType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGenerator">
      <summary>
            Generate a valid date before today going back up to X days.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGenerator.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGenerator" /> class.
            </summary>
      <param name="daysBehind">The days behind.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGenerator.Invoke">
      <summary>
            Get date
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGenerator.DaysBehind">
      <summary>
            Gets or sets the days behind.
            </summary>
      <value>The days behind.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGenerator.IncludeRandomTime">
      <summary>
            Gets or sets a value indicating whether include random time or set it to midnight.
            </summary>
      <value>
        <c>true</c> if include random time; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGeneratorAttribute">
      <summary>
            Generate a valid date before today going back up to X days.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGeneratorAttribute.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGeneratorAttribute" /> class.
            </summary>
      <param name="daysBehind">The days behind.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGeneratorAttribute.DaysBehind">
      <summary>
            Gets or sets the days behind.
            </summary>
      <value>The days behind.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidPastDateGeneratorAttribute.IncludeRandomTime">
      <summary>
            Gets or sets a value indicating whether include random time or set it to midnight.
            </summary>
      <value>
        <c>true</c> if include random time; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGenerator">
      <summary>
             Generate a valid date before today going back up to X days, X months, X years.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGenerator.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGenerator" /> class.
            </summary>
      <param name="daysAhead">The days ahead.</param>
      <param name="monthsAhead">The months ahead.</param>
      <param name="yearsAhead">The years ahead.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGenerator.Invoke">
      <summary>
            Gets date
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGenerator.DaysAhead">
      <summary>
            Gets or sets the days ahead.
            </summary>
      <value>The days ahead.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGenerator.MonthsAhead">
      <summary>
            Gets or sets the months ahead.
            </summary>
      <value>The months ahead.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGenerator.YearsAhead">
      <summary>
            Gets or sets the years ahead.
            </summary>
      <value>The years ahead.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGenerator.IncludeRandomTime">
      <summary>
            Gets or sets a value indicating whether include random time or set it to midnight.
            </summary>
      <value>
        <c>true</c> if include random time; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGeneratorAttribute">
      <summary>
             Generate a valid date before today going back up to X days, X months, X years.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGeneratorAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGeneratorAttribute" /> class.
            </summary>
      <param name="daysAhead">The days ahead.</param>
      <param name="monthsAhead">The months ahead.</param>
      <param name="yearsAhead">The years ahead.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGeneratorAttribute.DaysAhead">
      <summary>
            Gets or sets the days ahead.
            </summary>
      <value>The days ahead.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGeneratorAttribute.MonthsAhead">
      <summary>
            Gets or sets the months ahead.
            </summary>
      <value>The months ahead.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGeneratorAttribute.YearsAhead">
      <summary>
            Gets or sets the years ahead.
            </summary>
      <value>The years ahead.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.ValidFutureDateGeneratorAttribute.IncludeRandomTime">
      <summary>
            Gets or sets a value indicating whether include random time or set it to midnight.
            </summary>
      <value>
        <c>true</c> if include random time; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGenerator">
      <summary>
            Return current date
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGenerator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGenerator" /> class.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGenerator.Invoke">
      <summary>
            Get current date
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGenerator.IncludeTime">
      <summary>
            Gets or sets a value indicating whether include time or set it to midnight.
            </summary>
      <value>
        <c>true</c> if include random time; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGeneratorAttribute">
      <summary>
            Get current date
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGeneratorAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGeneratorAttribute" /> class.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.CurrentDateGeneratorAttribute.IncludeTime">
      <summary>
            Gets or sets a value indicating whether include time or set it to midnight.
            </summary>
      <value>
        <c>true</c> if include random time; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGenerator">
      <summary>
            Retrieve a random date.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGenerator.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGenerator" /> class.
            </summary>
      <param name="daysBehind">The days behind.</param>
      <param name="daysAhead">The days ahead.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGenerator.Invoke">
      <summary>
            Returns a random date
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGenerator.DaysBehind">
      <summary>
            Gets or sets the days behind.
            </summary>
      <value>The days behind.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGenerator.DaysAhead">
      <summary>
            Gets or sets the days ahead.
            </summary>
      <value>The days ahead.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGenerator.IncludeRandomTime">
      <summary>
            Gets or sets a value indicating whether include random time or set it to midnight.
            </summary>
      <value>
        <c>true</c> if include random time; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGeneratorAttribute">
      <summary>
            Create a random date
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGeneratorAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGeneratorAttribute" /> class.
            </summary>
      <param name="daysBehind">The days behind.</param>
      <param name="daysAhead">The days ahead.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGeneratorAttribute.DaysBehind">
      <summary>
            Gets or sets the days behind.
            </summary>
      <value>The days behind.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGeneratorAttribute.DaysAhead">
      <summary>
            Gets or sets the days ahead.
            </summary>
      <value>The days ahead.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.DateTimeGenerators.RandomDateGeneratorAttribute.IncludeRandomTime">
      <summary>
            Gets or sets a value indicating whether include random time or set it to midnight.
            </summary>
      <value>
        <c>true</c> if include random time; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BitGenerators.OneOnlyGenerator">
      <summary>
            Returns number 1.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BitGenerators.OneOnlyGenerator.Invoke">
      <summary>
            Returns number 1.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BitGenerators.OneOnlyGeneratorAttribute">
      <summary>
            Returns number 1.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BitGenerators.OneOnlyGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BitGenerators.ZeroOnlyGenerator">
      <summary>
            Returns the number 0.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BitGenerators.ZeroOnlyGenerator.Invoke">
      <summary>
            Returns the number 0.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BitGenerators.ZeroOnlyGeneratorAttribute">
      <summary>
            Returns the number 0.
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BitGenerators.ZeroOnlyGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BitGenerators.RandomBitGenerator">
      <summary>
            Returns a random bit (0 or 1)
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BitGenerators.RandomBitGenerator.Invoke">
      <summary>
            Returns a random bit (0 or 1)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Generators.BitGenerators.RandomBitGeneratorAttribute">
      <summary>
            Returns a random bit (0 or 1)
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.BitGenerators.RandomBitGeneratorAttribute.GetGenerator">
      <summary>
            Gets the generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.Data.DataModelClass">
      <summary>
            Main Class which models the layout of the data to be generated
            </summary>
    </member>
    <member name="F:MAT.DataGenerator.Data.DataModelClass.FieldGroups">
            Member variable for storing the field groups list
        </member>
    <member name="F:MAT.DataGenerator.Data.DataModelClass.UseWeights">
      <summary>
            Boolean property for indicating whether to use Weights when applying generators..
            </summary>
    </member>
    <member name="F:MAT.DataGenerator.Data.DataModelClass.UseDefaultGenerators">
      <summary>
            Boolean property for indicating whether to use default generators..
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataModelClass.#ctor">
      <summary>
            .ctor for DataModel class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataModelClass.FieldGroupExists(System.String)">
      <summary>
            Method to check whether the Field Groups list contains a Field Group with a particular name
            </summary>
      <param name="fieldGroupName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataModelClass.InferFieldGroup(System.Type)">
      <summary>
            This method can be used to infer the FieldGroup based on a type
            </summary>
      <param name="fieldGroupType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataModelClass.InferFieldGroup(System.Object)">
      <summary>
            Infer field group from anonymous types
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Data.DataModelClass.GetFieldGroupByName(System.String)">
      <summary>
            Method to retrieve the FieldGroup object by its name
            </summary>
      <param name="fieldGroupName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Data.DataModelClass.Seed">
      <summary>
            Seed for the random generators to regenerate data
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Data.DataModelClass.PreviousSeed">
      <summary>
            Read only property
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Data.DataModelClass.NextSeed">
      <summary>
            Read only property
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Data.DataModelClass.Item(System.String)">
      <summary>
            Retrieve the Field group using its name
            </summary>
      <param name="fieldGroupName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Rex.RegexToSFA`1">
      <summary>
            Convert regex expressions to corresponding SFAs
            </summary>
    </member>
    <member name="M:Rex.RegexToSFA`1.ConvertNodeMulti(System.Text.RegularExpressions.RegexNode,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Sequence of characters in node._str
            </summary>
    </member>
    <member name="M:Rex.RegexToSFA`1.ConvertNodeNotone(System.Text.RegularExpressions.RegexNode,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Matches chacter any character except node._ch
            </summary>
    </member>
    <member name="M:Rex.RegexToSFA`1.ConvertNodeOne(System.Text.RegularExpressions.RegexNode,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Matches only node._ch
            </summary>
    </member>
    <member name="M:Rex.RegexToSFA`1.ToDot(Rex.SFA{`0},System.String,System.String,Rex.RANKDIR,System.Int32)">
      <summary>
            Write the FSA in dot format.
            </summary>
      <param name="fa">the FSA to write</param>
      <param name="faName">the name of the FSA</param>
      <param name="filename">the name of the output file</param>
      <param name="rankdir">the main direction of the arrows</param>
      <param name="fontsize">the size of the font in labels</param>
    </member>
    <member name="M:Rex.RegexToSFA`1.ToDot(Rex.SFA{`0},System.String,System.IO.TextWriter,Rex.RANKDIR,System.Int32)">
      <summary>
            Write the FSA in dot format.
            </summary>
      <param name="fa">the FSA to write</param>
      <param name="faName">the name of the FSA</param>
      <param name="tw">text writer for the output</param>
      <param name="rankdir">the main direction of the arrows</param>
      <param name="fontsize">the size of the font in labels</param>
    </member>
    <member name="M:Rex.RegexToSFA`1.Display(Rex.SFA{`0},System.String,Rex.RANKDIR,System.Int32,System.Boolean,System.String)">
      <summary>
            View the given SFA as a graph. Requires that dot.exe is installed.
            Uses dot.exe to create a file name.dot and produces a layout in name.format.
            If showgraph is true, starts a process to view the graph.
            For example if name = "foo" and format = "gif", creates a file 
            foo.dot with the dot output and a file foo.gif as a picture.
            Uses the current working directory.
            </summary>
      <param name="fa">the SFA to be viewed</param>
      <param name="name">name of the file where the graph is stored</param>
      <param name="dir">direction of the arrows</param>
      <param name="fontsize">size of the font in node and edge labels</param>
      <param name="showgraph">id true, the graph is viewed</param>
      <param name="format">format of the figure</param>
    </member>
    <member name="T:MAT.DataGenerator.Types.TypeManager">
      <summary>
            Class definition for managing the Types supported by the Data generator application
            Maintains the list of types supported in the form of a list
            Uses a Type Model object to handle interaction with the Types
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.TypeManager.SetTypeModel(MAT.DataGenerator.Types.TypeModel)">
      <summary>
            Method to set TypeModel on the Type Manager if user wants to precreate a Type Model to load their own types with its generators
            and pass it in
            </summary>
      <param name="typeModel">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.TypeManager.ExtendTypeModel(MAT.DataGenerator.Types.FieldTypeBase[])">
      <summary>
            Extend an existing Type Model with user defined types. pass in the instance of FieldTypeBase objects for they to be added to the Typemodel type list
            </summary>
      <param name="types">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.ShortType">
      <summary>
            Type for defining a Field as belonging to the String type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ShortType.#ctor(System.String,System.String,System.Int16,System.Int16,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for the StringType Class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ShortType.#ctor(System.String)">
      <summary>
            ctor for ShortType
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ShortType.#ctor">
      <summary>
            Default ctor for Short Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.ShortType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.UShortType">
      <summary>
            Type for defining a Field as belonging to the String type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.UShortType.#ctor(System.String,System.String,System.UInt16,System.UInt16,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for the StringType Class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.UShortType.#ctor(System.String)">
      <summary>
            ctor for UShortType
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.UShortType.#ctor">
      <summary>
            Default ctor for UShort Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.UShortType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.DoubleType">
      <summary>
            Type for defining a Field as belonging to the Double type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.DoubleType.#ctor(System.String,System.String,System.Double,System.Double,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for the StringType Class
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.DoubleType.#ctor(System.String)">
      <summary>
            ctor for DoubleType
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.DoubleType.#ctor">
      <summary>
            Default ctor for double Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.DoubleType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="T:Infra.Combinatorial.CombinatorialParameter">
      <summary>
             Full permutation and PICT permutation generator.
            
             Pairwise parameter permutation generator implementation is 
             based on David Erb's idea/algorithm, 
             (architect for the Programmer Productivity Research Center - PPRC). 
                 
             PICT, which stands for ‘Pairwise Independent Combinatorial Testing’ is an efficient way 
             to design test cases. It uses a relatively small number of test cases that cover all combinations 
             of values of any pair of parameters. This way, every two-way interaction of values is covered in 
             at least one test case. 
             http://winweb/pairwise/ provides links to articles about PICT and to the original tool itself.
             </summary>
    </member>
    <member name="F:Infra.Combinatorial.CombinatorialParameter.Key">
      <summary>The id or key of the combinatorial parameter</summary>
    </member>
    <member name="F:Infra.Combinatorial.CombinatorialParameter.Values">
      <summary>The possible values of the combinatorial parameter</summary>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.#ctor(System.String,System.String[])">
      <summary>Create a new combinatorial parameter with given key and possible values.
            Throws ArgumentException if key or values is empty or null</summary>
      <param name="key">Key of the parameter. Required to be not null.</param>
      <param name="values">The string array containing possible values. Required to be not null</param>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.Next">
      <summary>Used for enumerating possible values. Moves to the next possible value.</summary>
      <returns>True if we wrapped around the last possible value, false otherwise</returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.op_Equality(Infra.Combinatorial.CombinatorialParameter,System.String)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="cp">
      </param>
      <param name="str">
      </param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.op_Inequality(Infra.Combinatorial.CombinatorialParameter,System.String)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="cp">
      </param>
      <param name="str">
      </param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.op_GreaterThanOrEqual(Infra.Combinatorial.CombinatorialParameter,System.String)">
      <summary>
            Implements the operator &gt;=.
            </summary>
      <param name="cp">
      </param>
      <param name="str">
      </param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.op_LessThanOrEqual(Infra.Combinatorial.CombinatorialParameter,System.String)">
      <summary>
            Implements the operator &lt;=.
            </summary>
      <param name="cp">
      </param>
      <param name="str">
      </param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.op_GreaterThan(Infra.Combinatorial.CombinatorialParameter,System.String)">
      <summary>
            Implements the operator &gt;.
            </summary>
      <param name="cp">
      </param>
      <param name="str">
      </param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.op_LessThan(Infra.Combinatorial.CombinatorialParameter,System.String)">
      <summary>
            Implements the operator &lt;.
            </summary>
      <param name="cp">
      </param>
      <param name="str">
      </param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.In(System.String[])">
      <summary>Used for combinatorial filtering.
            Checks to see if the current value is in the given possible value array.</summary>
      <param name="args">String array containing possible values</param>
      <returns>True, if the currentvalue of the parameter is in the array. False, otherwise</returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.Like(System.String)">
      <summary>Used for combinatorial filtering.
            Checks to see if the current value matches the given pattern.</summary>
      <param name="pattern">The regular expression to be matched</param>
      <returns>True, if the current value is a match. False, otherwise</returns>
    </member>
    <member name="M:Infra.Combinatorial.CombinatorialParameter.In(System.Double[])">
      <summary>Used for combinatorial filtering.
            Checks to see if the current value is in the given possible value array.</summary>
      <param name="args">String array containing possible values</param>
      <returns>True, if the currentvalue of the parameter is in the array. False, otherwise</returns>
    </member>
    <member name="P:Infra.Combinatorial.CombinatorialParameter.SelectedIndex">
      <summary>Gets or sets the index of the currently selected value</summary>
    </member>
    <member name="P:Infra.Combinatorial.CombinatorialParameter.CurrentValue">
      <summary>Returns the currently selected value</summary>
    </member>
    <member name="T:Infra.Combinatorial.Combination">
      <summary>Base class that includes common combination functions and structures</summary>
    </member>
    <member name="T:Infra.Combinatorial.Combination.ENUM_STATE">
      <summary>Indicates status of enumerating possible combinations of parameters</summary>
    </member>
    <member name="M:Infra.Combinatorial.Combination.#ctor(Infra.Combinatorial.CombinatorialParameter[],System.String[])">
      <summary>Construct a new combination with given parameters and constraints</summary>
      <param name="parameters">Set of parameters in the combination</param>
      <param name="constraints">Set of expressions to constraint combinatorial generation
            Constraints should be C# expressions including the parameters as variables.
            Example:    If there are CPU and RAM parameters in your combination that have the possible values 
            "Pent, AMD" and "32,64,128,256" respectively, you can use expressions such as
                            CPU == "Pent" , or 
                            (RAM != "64") || (CPU != "Pent")
            In order for the values to be treated as numbers use them without quotes. For example:
                    RAM &gt; 64 instead of RAM &gt; "64"
            </param>
    </member>
    <member name="M:Infra.Combinatorial.Combination.Next">
      <summary>Enumerate next combination</summary>
      <returns>False, if there are no available combinations left. True, otherwise</returns>
    </member>
    <member name="M:Infra.Combinatorial.Combination.IsValidCombination">
      <summary>Whether the currently selected values of parameters form a valid combination
            i.e. constraints are satisfied</summary>
      <returns>True, if the combination is valid. False, otherwise</returns>
    </member>
    <member name="M:Infra.Combinatorial.Combination.GenerateValidatorObject">
      <summary>Generates combination validator object which executes constraints to determine if the
            generated combination is valid</summary>
      <returns>The validator object</returns>
    </member>
    <member name="M:Infra.Combinatorial.Combination.GenerateIsValidCombinationFunction">
      <summary>Creates IsValidCombination function
            public bool IsValidCombination(param1, param2, param3,...)
            {
                if (!(constraint1)) return false;
                if (!(constraint1)) return false;
            
                return true;
            }
            </summary>
      <returns>The created function that can be added to the validator class</returns>
    </member>
    <member name="M:Infra.Combinatorial.Combination.CompileValidatorAssembly(System.CodeDom.CodeCompileUnit)">
      <summary>Compiles the assembly containing the validator object. The assembly is generated in memory</summary>
      <param name="codeCompileUnit">The assembly to be compiled</param>
      <returns>The name of the compiled assembly</returns>
    </member>
    <member name="P:Infra.Combinatorial.Combination.CombinationID">
      <summary>Identification string for current combination of parameters</summary>
    </member>
    <member name="T:Infra.Combinatorial.PictCombination">
      <summary>Generates the least amount of combinations that cover all possible pairwise combinations 
            of parameter values</summary>
    </member>
    <member name="M:Infra.Combinatorial.PictCombination.GetPairwiseCombinationId(System.Int32[])">
      <summary>Returns unique combination id string for the parameters
            specified in the given array</summary>
      <param name="pairwiseCombination">Array of indices into parameters array</param>
      <returns>The pairwise combination id string</returns>
    </member>
    <member name="M:Infra.Combinatorial.PictCombination.AddCoveredPairwiseCombinations">
      <summary>Adds the pairwise combinations covered in the current combination to the list 
            of covered pairwise combinations to keep track of which pairwise combinations we
            have covered so far</summary>
    </member>
    <member name="M:Infra.Combinatorial.PictCombination.IsParameterInCurrentPairwiseCombination(System.Int32)">
      <summary>Helper function to determine if the given parameter is in the list of parameters
            in the current pairwise combination</summary>
      <param name="index">The index of the parameter in parameters array</param>
      <returns>True, if the parameter is in the currently selected pairwise combination; false, otherwise</returns>
    </member>
    <member name="T:Infra.Combinatorial.FullCombination">
      <summary>Generates every possible combination of parameters (Cartesian product)</summary>
    </member>
    <member name="T:Infra.Combinatorial.RowsCombination">
      <summary>Stops generation when every value of every parameter has appeared at least once</summary>
    </member>
    <member name="T:Infra.Combinatorial.CombinationGenerator">
      <summary>Helper class to generate r order combinations of n objects</summary>
    </member>
    <member name="M:Infra.Combinatorial.CombinationGenerator.#ctor(System.Int32,System.Int32)">
      <param name="n">The total number of parameters</param>
      <param name="r">The order of combinations to be generated</param>
    </member>
    <member name="M:Rex.IUnicodeCategoryConditions`1.CategoryCondition(System.Int32)">
      <summary>
            Gets the unicode category condition for unicode category cat, that must be between 0 and 29
            </summary>
    </member>
    <member name="P:Rex.IUnicodeCategoryConditions`1.WhiteSpaceCondition">
      <summary>
            Gets the white space condition
            </summary>
    </member>
    <member name="P:Rex.IUnicodeCategoryConditions`1.WordLetterCondition">
      <summary>
            Gets the word letter condition
            </summary>
    </member>
    <member name="T:Rex.RexSettings">
      <summary>
            Provides settings for RexEngine
            </summary>
    </member>
    <member name="F:Rex.RexSettings.regexes">
      <summary>
            Explicit input regexes, must be a nonempty collection of regexes if no regexfile is given. 
            </summary>
    </member>
    <member name="F:Rex.RexSettings.regexfile">
      <summary>
            File where input regexes are stored one regex per line.
            This argument must be given if no regexes are given explicitly.
            </summary>
    </member>
    <member name="F:Rex.RexSettings.options">
      <summary>
            Zero or more regular expression options. Default is no options or equivalently RegexOptions.None.
            </summary>
    </member>
    <member name="F:Rex.RexSettings.k">
      <summary>
            Number of members to generate. Default is 1.
            </summary>
    </member>
    <member name="F:Rex.RexSettings.file">
      <summary>
            File where the generated strings are stored, if omitted, the output it directed to the console.
            </summary>
    </member>
    <member name="F:Rex.RexSettings.encoding">
      <summary>
            The character encoding to be used; determines the number of bits, ASCII:7, CP437:8, Unicode:16. 
            Default is Unicode.
            </summary>
    </member>
    <member name="F:Rex.RexSettings.seed">
      <summary>
            Random seed for the generation, -1 (which is the default) means that a seed is chosen randomly.
            </summary>
    </member>
    <member name="F:Rex.RexSettings.dot">
      <summary>
            Name of output dot file of the finite automaton for the regex(es).
            </summary>
    </member>
    <member name="F:Rex.RexSettings.intersect">
      <summary>
            If set, intersect the regexes; otherwise treat the regexes independently and generate k members for each. Default is false.
            </summary>
    </member>
    <member name="M:Rex.RexSettings.#ctor">
      <summary>
            Creates and instance of RexSettings. 
            </summary>
    </member>
    <member name="M:Rex.RexSettings.#ctor(System.String[])">
      <summary>
            Creates and instance of RexSettings for the given regexes using default values for other settings.
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator">
      <summary>
             Create strings based off of regular expressions.
             </summary>
      <example>
        <code>
                 public class RegExBasedPersonTest
                {
                    [MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator(@"^[a-zA-Z]{10,40}$")]
                    public string Name;
            
                    [MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator(@"^\d{3}-\d{2}-\d{4}$")]
                    public string SSN;
            
                    [MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator(@"^([0-9a-zA-Z]{6,12})@[0-9a-zA-Z]{6,12}\.[0-9a-zA-Z]{2,6}$")]
                    public string Email;
            
                    [MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator(@"^((ht|f)tp(s?)\:\/\/[w]{3}\.[a-zA-Z]{10,20}\.([a-zA-Z]{2,5}|com|org|uk|ca|cn|gov))$")]
                    public string URL;
            }
             </code>
      </example>
    </member>
    <member name="M:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator" /> class.
            </summary>
      <param name="regEx">The reg ex.</param>
      <param name="ignoreLineFeedsInWhiteSpace">if set to <c>true</c> remove any /r /n or /f from returns.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator.Invoke">
      <summary>
            Returns a random string based on the regular expression.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator.RegEx">
      <summary>
            Gets or sets the reg ex.
            </summary>
      <value>The reg ex.</value>
    </member>
    <member name="P:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator.IgnoreLineFeedsInWhiteSpace">
      <summary>
            Gets or sets a value indicating whether to remove any /r /n or /f from returns.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator.UseUnicodeEncoding">
      <summary>
            Use Unicode Encoding vs. default of ASCII encoding.
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGeneratorAttribute">
      <summary>
             Create strings based off of regular expressions.
             </summary>
      <example>
        <code>
                 public class RegExBasedPersonTest
                {
                    [MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator(@"^[a-zA-Z]{10,40}$")]
                    public string Name;
            
                    [MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator(@"^\d{3}-\d{2}-\d{4}$")]
                    public string SSN;
            
                    [MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator(@"^([0-9a-zA-Z]{6,12})@[0-9a-zA-Z]{6,12}\.[0-9a-zA-Z]{2,6}$")]
                    public string Email;
            
                    [MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGenerator(@"^((ht|f)tp(s?)\:\/\/[w]{3}\.[a-zA-Z]{10,20}\.([a-zA-Z]{2,5}|com|org|uk|ca|cn|gov))$")]
                    public string URL;
            }
             </code>
      </example>
    </member>
    <member name="M:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGeneratorAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGeneratorAttribute" /> class.
            </summary>
      <param name="regEx">The reg ex.</param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGeneratorAttribute.GetGenerator">
      <summary>
            Gets the regular expression generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGeneratorAttribute.IgnoreLineFeedsInWhiteSpace">
      <summary>
            Gets or sets a value indicating whether to remove any /r /n or /f from returns.
            </summary>
    </member>
    <member name="P:MAT.DataGenerator.Generators.StringGenerators.RegExBasedStringGeneratorAttribute.UseUnicodeEncoding">
      <summary>
            Use Unicode Encoding vs. default of ASCII encoding.
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.GeneratorsNs.GeneratorModel">
      <summary>
            Main Class which models the layout of the Generators to be applied for the data being generated
            </summary>
    </member>
    <member name="F:MAT.DataGenerator.GeneratorsNs.GeneratorModel.FieldGroups">
            Member variable for storing the field groups list
        </member>
    <member name="M:MAT.DataGenerator.GeneratorsNs.GeneratorModel.#ctor">
      <summary>
            .ctor for GeneratorModel class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsNs.GeneratorModel.FieldGroupExists(System.String)">
      <summary>
            Method to check whether the Field Groups list contains a Field Group with a particular name
            </summary>
      <param name="fieldGroupName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsNs.GeneratorModel.GetFieldGroupByName(System.String)">
      <summary>
            Method to retrieve the FieldGroup object by its name
            </summary>
      <param name="fieldGroupName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.FloatGeneratorsHelper.GenerateFloat(System.Single,System.Single,System.Int32)">
      <summary>
            Generate random Float data
            </summary>
      <param name="minValue">minValue</param>
      <param name="maxValue">maxValue</param>
      <param name="seed">seed</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rex.SFA`1">
      <summary>
            Symbolic Finite Automaton
            </summary>
      <typeparam name="S">type of the move condition</typeparam>
    </member>
    <member name="M:Rex.SFA`1.GetEpsilonClosure(System.Int32)">
      <summary>
            Returns all states that are reachable via epsilon moves, including the state itself.
            </summary>
    </member>
    <member name="M:Rex.SFA`1.GetInvEpsilonClosure(System.Int32)">
      <summary>
            Returns all states that are reachable via backwards epsilon moves, including the state itself.
            </summary>
    </member>
    <member name="M:Rex.SFA`1.Create(System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{Rex.MOVE{`0}})">
      <summary>
            Create an SFA. 
            Throws RexException if final states do not form a subset of all states
            </summary>
      <param name="initialState">initial state</param>
      <param name="finalStates">final states</param>
      <param name="moves">moves</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rex.SFA`1.Concat(Rex.SFA{`0})">
      <summary>
            Assumes that the states of the SFAs are disjoint and adds epsilon transitions if needed.
            Assumes also that fa is not Empty and not Epsilon.
            </summary>
    </member>
    <member name="M:Rex.SFA`1.IsKleeneClosure">
      <summary>
            Returns true if there is an epsilon move from each final state to the initial state 
            and the initial state is also final
            </summary>
    </member>
    <member name="M:Rex.SFA`1.AddNewInitialStateThatIsFinal(System.Int32)">
      <summary>
            Assumes that newInitialState is not in the set of states
            </summary>
    </member>
    <member name="M:Rex.SFA`1.GetCondition(System.Int32,System.Int32)">
      <summary>
            Get the condition from the move from source to target
            </summary>
    </member>
    <member name="M:Rex.SFA`1.MkProduct(Rex.SFA{`0},Rex.SFA{`0},System.Func{`0,`0,`0},System.Func{`0,`0,`0},System.Func{`0,System.Boolean})">
      <summary>
            Make a product of a and b. First removes epsilons from a and b.
            </summary>
      <param name="a">first SFA of the product</param>
      <param name="b">second SFA of the product</param>
      <param name="conj">make the conjunction of two conditions</param>
      <param name="disj">make the disjunction of two conditions, used during initial epsilon elimination</param>
      <param name="isSat">check if a condition is satisfiable, used to keep the result clean</param>
      <returns>the product SFA of a and b</returns>
    </member>
    <member name="M:Rex.SFA`1.RemoveEpsilonLoops(System.Func{`0,`0,`0})">
      <summary>
            Remove epsilon loops from this fsa, use disj to 
            to make disjunctions of conditions during normalization
            </summary>
    </member>
    <member name="M:Rex.SFA`1.RemoveEpsilons(System.Func{`0,`0,`0})">
      <summary> 
            Creates an FSA without epsilon transitions that is equivalent to fa.
            </summary>
    </member>
    <member name="P:Rex.SFA`1.IsEmpty">
      <summary>
            True iff there are no final states
            </summary>
    </member>
    <member name="P:Rex.SFA`1.MaxState">
      <summary>
            A number that is either equal to or greater than the largest state id used in the SFA
            </summary>
    </member>
    <member name="T:Rex.MOVE`1">
      <summary>
            Represents a move of a symbolic finite automaton
            </summary>
      <typeparam name="S">the type of the move condition</typeparam>
    </member>
    <member name="F:Rex.MOVE`1.SourceState">
      <summary>
            Source state of the move
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.SByteType">
      <summary>
            Type for defining a Field as belonging to the SByte type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.SByteType.#ctor(System.String,System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
             ctor for the SByteType Class
            </summary>
      <param name="name">
      </param>
      <param name="sampleValues">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.SByteType.#ctor(System.String)">
      <summary>
            ctor for the SByteType Class
            </summary>
      <param name="name">Name of the FieldType object</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.SByteType.#ctor">
      <summary>
            Default ctor for SByte Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.SByteType.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.SqlGenerators.SqlDataFromTcf.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.DataGenerator.Generators.SqlGenerators.SqlDataFromTcf" /> class.
            </summary>
      <param name="dataDrivenQuery">The data driven query.</param>
      <param name="dataDrivenConnection">The data driven connection.</param>
    </member>
    <member name="P:MAT.DataGenerator.Generators.SqlGenerators.SqlDataFromTcf.AppConfig">
      <summary>
            Gets or sets the app config path needed when using Settings option (Configuration and Keys don't need this).
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.DateTimeGeneratorsHelper.GenerateFutureDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Generate a future date time
            </summary>
      <param name="daysAhead">Days ahead of todays date</param>
      <param name="monthsAhead">Months ahead of todays date</param>
      <param name="yearsAhead">Years ahead of todays date</param>
      <param name="seed">Seed to be used to pick the random months/days/years</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.DateTimeGeneratorsHelper.GenerateDateTime(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Generate random date
            </summary>
      <param name="dateType">
      </param>
      <param name="daysBehind">
      </param>
      <param name="daysAhead">
      </param>
      <param name="seed">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.EnumGeneratorsHelper.GenerateEnum(System.Int32,System.Type)">
      <summary>
            Generate random Enum data
            </summary>
    </member>
    <member name="T:MAT.DataGenerator.Types.FieldTypes.NullableType`1">
      <summary>
            Type for defining a Field as belonging to the String type
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.NullableType`1.#ctor(System.String,MAT.DataGenerator.Generators.IGenerator[])">
      <summary>
            ctor for String Type class
            </summary>
      <param name="name">The name.</param>
      <param name="generatorsList">The generators list.</param>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.NullableType`1.#ctor">
      <summary>
            Default ctor for String Type class
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Types.FieldTypes.NullableType`1.SetMemberValue(System.Object@,System.String,System.Object)">
      <summary>
             Sets the value of the member field or property on the instance to the value passed in.
            </summary>
      <param name="instance">
      </param>
      <param name="memberName">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.GeneratorsNs.GeneratorManagerClass.GenerateGenerators(MAT.DataGenerator.Data.DataModelClass)">
      <summary>
            Generate Generators
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.Generators.GeneratorsNs.GeneratorManagerClass.GenerateGeneratorCombinations(MAT.DataGenerator.GeneratorsNs.GeneratorsRow,System.String)">
      <summary>
            Generate Generator combinations
            </summary>
      <param name="generatorsRow">
      </param>
      <param name="exceptFieldId">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.GeneratorsNs.GeneratorManagerClass.AddDefaultGenerators(MAT.DataGenerator.Types.FieldTypeBase)">
      <summary>
            Method to add default generators on the type if no generators have been specified or if the user wants to apply these in addition to what they 
            applied
            </summary>
      <param name="field">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.Generators.GeneratorsNs.GeneratorManagerClass.GetDefaultGenerators(System.String)">
      <summary>
            Gets the list of default generators for a particular type
            </summary>
      <param name="typeName">Type for which the generators are to be retrieved</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.DataGenerator.Generators.GeneratorsNs.GeneratorManagerClass.GeneratePictCombinations(MAT.DataGenerator.Data.DataModelClass)">
      <summary>
            Generate the PICT combinations for the Data Model
            </summary>
      <param name="dataModel">
      </param>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.DecimalGeneratorsHelper.GenerateDecimal(System.Decimal,System.Decimal,System.Int32)">
      <summary>
            Generate random Decimal data
            </summary>
      <param name="minValue">minValue</param>
      <param name="maxValue">maxValue</param>
      <param name="seed">seed</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.DataGenerator.GeneratorsHelper.BoolGeneratorsHelper">
      <summary>
            BoolGenerator helper
            </summary>
    </member>
    <member name="M:MAT.DataGenerator.GeneratorsHelper.BoolGeneratorsHelper.GenerateRandomBool(System.Int32)">
      <summary>
            Generates the random bool.
            </summary>
      <param name="seed">The seed.</param>
      <returns>
      </returns>
    </member>
    <member name="T:MAT.PowerShell.PsPreference">
      <summary>
            Power Shell Preferences
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsPreference.SilentlyContinue">
      <summary>
            Does not raise messages and continues
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsPreference.Continue">
      <summary>
            Raises message but continues execution
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsPreference.Inquire">
      <summary>
            Asks whether execution should continue
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsPreference.Stop">
      <summary>
            Stops execution immediately
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsHostMessageType">
      <summary>
            Ouput type from the host
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsHostMessageType.Output">
      <summary>
            Standard output
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsHostMessageType.Host">
      <summary>
            Host specific message
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsHostMessageType.Error">
      <summary>
            Error message
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsHostMessageType.Debug">
      <summary>
            Debug message
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsHostMessageType.Verbose">
      <summary>
            Verbose message
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsHostMessageType.Warning">
      <summary>
            Warning message
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsInputRequestType">
      <summary>
            Type of input requested
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsInputRequestType.Simple">
      <summary>
            Simple one line input
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsInputRequestType.List">
      <summary>
            Option selection
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsMessageEventHandler">
      <summary>
            Message event handler
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsInputRequestEventHandler">
      <summary>
            Input request handler
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsProgressEventHandler">
      <summary>
            Progress bar event handler
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsSimpleMessageEventHandler">
      <summary>
            Simple message event handler
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsColorChangedEventHandler">
      <summary>
            Color changed event handler
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsCredentialEventHandler">
      <summary>
            Credential request event handler
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsInputLineRequestEventHandler">
      <summary>
            Line input request handler
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsReadKeyEventHandler">
      <summary>
            Read key event handler
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsReadKeyArgs">
      <summary>
            List of arguments for key read requests
            </summary>
    </member>
    <member name="P:MAT.PowerShell.PsReadKeyArgs.Answer">
      <summary>
            Gets the answer.
            </summary>
      <value>The answer.</value>
    </member>
    <member name="P:MAT.PowerShell.PsReadKeyArgs.Options">
      <summary>
            Gets the options.
            </summary>
      <value>The options.</value>
    </member>
    <member name="T:MAT.PowerShell.PsCredentialArgs">
      <summary>
            Event arguments
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsCredentialArgs.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:MAT.PowerShell.PsCredentialArgs.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:MAT.PowerShell.PsCredentialArgs.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:MAT.PowerShell.PsCredentialArgs.Caption">
      <summary>
            Gets the caption.
            </summary>
      <value>The caption.</value>
    </member>
    <member name="P:MAT.PowerShell.PsCredentialArgs.Message">
      <summary>
            Gets the message.
            </summary>
      <value>The message.</value>
    </member>
    <member name="P:MAT.PowerShell.PsCredentialArgs.UserName">
      <summary>
            Gets the name of the user.
            </summary>
      <value>The name of the user.</value>
    </member>
    <member name="P:MAT.PowerShell.PsCredentialArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:MAT.PowerShell.PsCredentialArgs" /> is to be canceled.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.PowerShell.PsCredentialArgs.Credential">
      <summary>
            Gets the credentials.
            </summary>
      <value>The credential.</value>
    </member>
    <member name="T:MAT.PowerShell.PsColorArgs">
      <summary>
            Color change arguments
            </summary>
    </member>
    <member name="P:MAT.PowerShell.PsColorArgs.Color">
      <summary>
            Gets the new color.
            </summary>
      <value>The color.</value>
    </member>
    <member name="T:MAT.PowerShell.PsSimpleMessageArgs">
      <summary>
            Message arguments
            </summary>
    </member>
    <member name="P:MAT.PowerShell.PsSimpleMessageArgs.Message">
      <summary>
            Gets the message.
            </summary>
      <value>The message.</value>
    </member>
    <member name="T:MAT.PowerShell.PsMessageArgs">
      <summary>
            Standard message returns
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsMessageArgs.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:MAT.PowerShell.PsMessageArgs.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:MAT.PowerShell.PsMessageArgs.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:MAT.PowerShell.PsMessageArgs.Message">
      <summary>
            Gets the message.
            </summary>
      <value>The message.</value>
    </member>
    <member name="P:MAT.PowerShell.PsMessageArgs.NewLine">
      <summary>
            Gets value indicating whether new line.
            </summary>
      <value>
        <c>true</c> if new line; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.PowerShell.PsMessageArgs.UseCustomColor">
      <summary>
            Gets a value indicating whether use custom color.
            </summary>
      <value>
        <c>true</c> if use custom color; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.PowerShell.PsMessageArgs.Data">
      <summary>
            Gets the data.
            </summary>
      <value>The data.</value>
    </member>
    <member name="P:MAT.PowerShell.PsMessageArgs.MessageType">
      <summary>
            Gets the type of the message.
            </summary>
      <value>The type of the message.</value>
    </member>
    <member name="P:MAT.PowerShell.PsMessageArgs.Foreground">
      <summary>
            Gets the foreground.
            </summary>
      <value>The foreground.</value>
    </member>
    <member name="P:MAT.PowerShell.PsMessageArgs.Background">
      <summary>
            Gets the background.
            </summary>
      <value>The background.</value>
    </member>
    <member name="T:MAT.PowerShell.PsInputLineRequestArgs">
      <summary>
            Arguments for the input line request event
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsInputLineRequestArgs.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:MAT.PowerShell.PsInputLineRequestArgs.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:MAT.PowerShell.PsInputLineRequestArgs.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:MAT.PowerShell.PsInputLineRequestArgs.Label">
      <summary>
            Gets the label.
            </summary>
      <value>The label.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputLineRequestArgs.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputLineRequestArgs.AsSecureString">
      <summary>
            Gets a value indicating whether [as secure string].
            </summary>
      <value>
        <c>true</c> if [as secure string]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputLineRequestArgs.SecureAnswer">
      <summary>
            Gets the secure answer.
            </summary>
      <value>The secure answer.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputLineRequestArgs.Answer">
      <summary>
            Gets the answer.
            </summary>
      <value>The answer.</value>
    </member>
    <member name="T:MAT.PowerShell.PsInputRequestArgs">
      <summary>
            Arguments for the selection of a choice box
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsInputRequestArgs.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:MAT.PowerShell.PsInputRequestArgs.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:MAT.PowerShell.PsInputRequestArgs.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:MAT.PowerShell.PsInputRequestArgs.Caption">
      <summary>
            Gets the caption.
            </summary>
      <value>The caption.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputRequestArgs.Message">
      <summary>
            Gets the message.
            </summary>
      <value>The message.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputRequestArgs.RequestType">
      <summary>
            Gets the type of the request.
            </summary>
      <value>The type of the request.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputRequestArgs.Choices">
      <summary>
            Gets the choices.
            </summary>
      <value>The choices.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputRequestArgs.DefaultChoice">
      <summary>
            Gets the default choice.
            </summary>
      <value>The default choice.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputRequestArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:MAT.PowerShell.PsInputRequestArgs" /> is cancel.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.PowerShell.PsInputRequestArgs.Answer">
      <summary>
            Gets the answer.
            </summary>
      <value>The answer.</value>
    </member>
    <member name="T:MAT.PowerShell.PsProgressArgs">
      <summary>
            Arguments of progress bar
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsProgressArgs.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:MAT.PowerShell.PsProgressArgs.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:MAT.PowerShell.PsProgressArgs.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:MAT.PowerShell.PsProgressArgs.Activity">
      <summary>
            Gets the activity.
            </summary>
      <value>The activity.</value>
    </member>
    <member name="P:MAT.PowerShell.PsProgressArgs.CurrentOperation">
      <summary>
            Gets the current operation.
            </summary>
      <value>The current operation.</value>
    </member>
    <member name="P:MAT.PowerShell.PsProgressArgs.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:MAT.PowerShell.PsProgressArgs.PercentComplete">
      <summary>
            Gets the percent complete.
            </summary>
      <value>The percent complete.</value>
    </member>
    <member name="P:MAT.PowerShell.PsProgressArgs.Completed">
      <summary>
            Gets a value indicating whether this <see cref="T:MAT.PowerShell.PsProgressArgs" /> is completed.
            </summary>
      <value>
        <c>true</c> if completed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.PowerShell.PsStartExecuteException">
      <summary>
            Power Shell Exeception
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsStartExecuteException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.PowerShell.PsStartExecuteException" /> class.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsStartExecuteException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.PowerShell.PsStartExecuteException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:MAT.PowerShell.PsStartExecuteException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.PowerShell.PsStartExecuteException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:MAT.PowerShell.PsStartExecuteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.PowerShell.PsStartExecuteException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:MAT.PowerShell.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:MAT.PowerShell.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:MAT.PowerShell.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:MAT.PowerShell.ColorExtensions">
      <summary>
            Class extensions for Color Conversion.  Referencing this class
            will add ToConsoleColor, ToColor, and ConvertRgbToArgb to the <see cref="T:System.Drawing.Color">Color</see> object.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.ColorExtensions.ToConsoleColor(System.Drawing.Color,System.ConsoleColor)">
      <summary>
            Converts a color to a console if possible otherwise it uses the default color
            </summary>
    </member>
    <member name="M:MAT.PowerShell.ColorExtensions.ToColor(System.ConsoleColor)">
      <summary>
            Converts a ConsoleColor to Color
            </summary>
    </member>
    <member name="M:MAT.PowerShell.ColorExtensions.ConvertRgbToArgb(System.Int32)">
      <summary>
            Converts a Windows RGB color to ARGB color
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsRichText">
      <summary>
            This is a Power Shell Rich Text box.  It allows you to have a Power Shell 
            console inside of your windows forms.
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PsRichText.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.PowerShell.PsRichText" /> class.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.ScrollToBottom">
      <summary>
            Scrolls to bottom.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.StartExecuteAsync(System.String)">
      <summary>
            Starts the execute async.
            </summary>
      <param name="script">The script.</param>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.StopExecuteAsync">
      <summary>
            Stops the execute async.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.WriteMessage(System.String)">
      <summary>
            Writes the message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.WriteMessage(MAT.PowerShell.PsMessageArgs)">
      <summary>
            Writes the message.
            </summary>
      <param name="args">Message arguments</param>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.Execute(System.String)">
      <summary>
            Executes the specified script.
            </summary>
      <param name="script">The script.</param>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.GetVariable``1(System.String)">
      <summary>
            Gets the variable.
            </summary>
      <typeparam name="T">Cast the variable</typeparam>
      <param name="var">The var.</param>
      <returns>variable or default of T</returns>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.SetVariable(System.String,System.Object)">
      <summary>
            Sets the variable.
            </summary>
      <param name="var">The var.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:MAT.PowerShell.PsRichText.Clear">
      <summary>
            Clears this text.
            </summary>
    </member>
    <member name="P:MAT.PowerShell.PsRichText.ShowPrompt">
      <summary>
            Gets or sets a value indicating whether show prompt.
            </summary>
      <value>
        <c>true</c> if show prompt; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.PowerShell.PsRichText.OutAsString">
      <summary>
            Gets or sets a value indicating whether out as string.
            </summary>
      <value>
        <c>true</c> if out as string; otherwise, out as objects.</value>
    </member>
    <member name="P:MAT.PowerShell.PsRichText.NoProfile">
      <summary>
            Gets or sets a value indicating whether no profile.
            </summary>
      <value>
        <c>true</c> if [no profile]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.PowerShell.PsRichText.UseConsoleSettings">
      <summary>
            Gets or sets a value indicating whether use console settings.
            </summary>
      <value>
        <c>true</c> if use console settings; otherwise, <c>false</c>.</value>
    </member>
    <member name="E:MAT.PowerShell.PsRichText.TitleChanged">
      <summary>
            Occurs when title changed.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsRichText.ReadyEvent">
      <summary>
            Occurs when ready event.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsRichText.InputRequest">
      <summary>
            Occurs when input request.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsRichText.CredentialRequest">
      <summary>
            Occurs when credential request.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsRichText.LineRequest">
      <summary>
            Occurs when line request.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsRichText.ProgressUpdate">
      <summary>
            Occurs when progress update.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsRichText.BeforeInputRequest">
      <summary>
            Occurs when before input request.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsRichText.AfterInputRequest">
      <summary>
            Occurs when after input request.
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PipelineExecutor">
      <summary>
            Class that assists in asynchronously executing and retrieving the results of 
            a powershell script pipeline.
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PipelineExecutor.invoker">
      <summary>
            The object that is used to invoke the events on.
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PipelineExecutor.pipeline">
      <summary>
            The powershell script pipeline that will be executed asynchronously.
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PipelineExecutor.synchDataReady">
      <summary>
            Local delegate to a private method
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PipelineExecutor.synchDataEnd">
      <summary>
            Local delegate to a private method
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PipelineExecutor.stopEvent">
      <summary>
            Event set when the user wants to stop script execution.
            </summary>
    </member>
    <member name="F:MAT.PowerShell.PipelineExecutor.waitHandles">
      <summary>
            Array of waithandles, used in the StoppableInvoke() method.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PipelineExecutor.#ctor(System.Management.Automation.Runspaces.Runspace,System.ComponentModel.ISynchronizeInvoke,System.String)">
      <summary>
            Constructor, creates a new PipelineExecutor for the given powershell script.
            </summary>
      <param name="runSpace">Powershell runspace to use for creating and executing the script.</param>
      <param name="invoker">The object to synchronize the DataReady and DataEnd events with. 
            Normally you'd pass the form or component here.</param>
      <param name="command">The script to run</param>
    </member>
    <member name="M:MAT.PowerShell.PipelineExecutor.Start">
      <summary>
            Start executing the script in the background.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PipelineExecutor.Stop">
      <summary>
            Stop executing the script.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PipelineExecutor.StoppableInvoke(System.Delegate,System.Object[])">
      <summary>
            Special Invoke method that operates similarly to <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> but in addition to that, it can be 
            aborted by setting the stopEvent. This avoids potential deadlocks that are possible when using the regular 
            <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> method.
            </summary>
      <param name="method">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are 
            contained in <paramref name="args" /></param>
      <param name="args">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method. This can be null if 
            no arguments are needed </param>
      <returns>The <see cref="T:System.Object" /> returned by the asynchronous operation</returns>
    </member>
    <member name="M:MAT.PowerShell.PipelineExecutor.Output_DataReady(System.Object,System.EventArgs)">
      <summary>
            Event handler for the DataReady event of the powershell script pipeline.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:MAT.PowerShell.PipelineExecutor.Output_ErrorDataReady(System.Object,System.EventArgs)">
      <summary>
            Event handler for the Error DataReady event of the powershell script pipeline.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:MAT.PowerShell.PipelineExecutor.SynchDataReady(MAT.PowerShell.PipelineExecutor,System.Collections.Generic.ICollection{System.Management.Automation.PSObject})">
      <summary>
            private DataReady handling method that will pass the call on to any event handlers that are
            attached to the OnDataReady event of this <see cref="T:MAT.PowerShell.PipelineExecutor" /> instance.
            </summary>
      <param name="sender">
      </param>
      <param name="data">
      </param>
    </member>
    <member name="M:MAT.PowerShell.PipelineExecutor.SynchDataEnd(MAT.PowerShell.PipelineExecutor)">
      <summary>
            private DataEnd handling method that will pass the call on to any handlers that are
            attached to the OnDataEnd event of this <see cref="T:MAT.PowerShell.PipelineExecutor" /> instance.
            </summary>
      <param name="sender">
      </param>
    </member>
    <member name="P:MAT.PowerShell.PipelineExecutor.Pipeline">
      <summary>
            Gets the powershell Pipeline associated with this PipelineExecutor
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PipelineExecutor.OnDataReady">
      <summary>
            Occurs when there is new data available from the powershell script.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PipelineExecutor.OnDataEnd">
      <summary>
            Occurs when powershell script completed its execution.
            </summary>
    </member>
    <member name="T:MAT.PowerShell.PsHostClass">
      <summary>
            PsHostClass is the core class used for running PowerShell within your .NET code.
            </summary>
      <example>
        <para>Here is a sample test class using PsHostClass</para>
        <code>
            using System;
            using System.Collections.Generic;
            using Microsoft.VisualStudio.TestTools.UnitTesting;
            using MAT.PowerShell;
            
            namespace UnitTests
            {
                [TestClass]
                public partial class PowerShellScripts
                {
                    private PsHostClass host;
                    private List&lt;string&gt; events;
            
                    [TestInitialize()]
                    public void MyTestInitialize()
                    {
                        events = new List&lt;string&gt;();
            
                        host = new PsHostClass();
                        host.Intitialize();
            
                        host.VerbosePreference = PsPreference.Continue;
                        host.WarningPreference = PsPreference.Continue;
                        host.ErrorActionPreference = PsPreference.Continue;
                        host.DebugPreference = PsPreference.Continue;
            
                        host.MessageEvent += new PsMessageEventHandler(host_MessageEvent);
            
                        host.ExecuteSingle(@". \\mxps-tfsorcas\remote\cminit.ps1");
                    }
            
                    void host_MessageEvent(object sender, PsMessageArgs args)
                    {
                        Console.WriteLine(args.MessageType.ToString() + ": " + args.Message);
                        events.Add(args.MessageType.ToString() + ": " + args.Message);
                    }
            
                    [TestCleanup()]
                    public void MyTestCleanup()
                    {
                        host.StopExecuteAsync();
                        host.Dispose();
                        host = null;
                    }
            
                    [TestMethod]
                    public void TestUrlReturnsTrueForMicrosoftCom()
                    {
                        Collection&lt;PSObject&gt; results = host.ExecuteSingle("Test-Url 'http://www.microsoft.com'");
                        Assert.AreEqual&lt;Boolean&gt;(true, (bool)results[0].BaseObject);
                        Assert.AreEqual&lt;String&gt;("Boolean", results[0].BaseObject.GetType().Name);
                    }
            
                    [TestMethod]
                    public void TestUrlReturnsFalseForBadUrl()
                    {
                        Collection&lt;PSObject&gt; results = host.ExecuteSingle("Test-Url 'http://ttt.badurl.ttt'");
                        Assert.AreEqual&lt;Boolean&gt;(false, (bool)results[0].BaseObject);
                    }
                }
            }
            </code>
      </example>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.PowerShell.PsHostClass" /> class.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.#ctor(System.ComponentModel.ISynchronizeInvoke)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.PowerShell.PsHostClass" /> class.
            </summary>
      <param name="invoker">The invoker.</param>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.Reset">
      <summary>
            Resets this instance.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.ExecuteSingle(System.String)">
      <summary>
            Executes a single power shell command.
            </summary>
      <param name="code">The code.</param>
      <returns>Returns a collection of result objects</returns>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.ExecuteSingle(System.String,System.Object)">
      <summary>
            Executes a single power shell command.
            </summary>
      <param name="code">The code.</param>
      <param name="input">The input pipe.</param>
      <returns>Returns a collection of result objects</returns>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.ExecuteSingle(System.String,System.Boolean)">
      <summary>
            Executes the single.
            </summary>
      <param name="script">The script.</param>
      <param name="outAsString">if set to <c>true</c> returns output as strings instead of objects.</param>
      <returns>Returns a collection of result objects or simple string output if OutAsString is set</returns>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.StartExecuteAsync(System.String)">
      <summary>
            Starts the execute async.
            </summary>
      <param name="code">The code.</param>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.StartExecuteAsync(System.String,System.Boolean,System.Boolean)">
      <summary>
            Starts the execute async.
            </summary>
      <param name="code">The code.</param>
      <param name="outAsString">if set to <c>true</c> out as string.</param>
      <param name="showPrompt">if set to <c>true</c> show prompt.</param>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.StopExecuteAsync">
      <summary>
            Stops the execute async.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.GetError">
      <summary>
            Gets the error.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.GetVariable``1(System.String)">
      <summary>
            Gets the variable.
            </summary>
      <typeparam name="T">Cast the variable</typeparam>
      <param name="var">The var.</param>
      <returns>variable or default of T</returns>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.SetVariable(System.String,System.Object)">
      <summary>
            Sets the variable.
            </summary>
      <param name="var">The var.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.Finalize">
      <summary>
            Finalize method
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">Disposing</param>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.FlushInputBuffer">
      <summary>
            Flushes the input buffer.
            </summary>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.GetBufferContents(System.Management.Automation.Host.Rectangle)">
      <summary>
            Gets the buffer contents.
            </summary>
      <param name="rectangle">The rectangle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.ReadKey(System.Management.Automation.Host.ReadKeyOptions)">
      <summary>
            Reads the key.
            </summary>
      <param name="options">The options.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.ScrollBufferContents(System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell)">
      <summary>
            Scrolls the buffer contents. [Not Implemented]
            </summary>
      <param name="source">The source.</param>
      <param name="destination">The destination.</param>
      <param name="clip">The clip.</param>
      <param name="fill">The fill.</param>
    </member>
    <member name="M:MAT.PowerShell.PsHostClass.SetBufferContents(System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell)">
      <summary>
            Sets the buffer contents.
            </summary>
      <param name="rectangle">The rectangle.</param>
      <param name="fill">The fill.</param>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.NoProfile">
      <summary>
            Gets or sets a value indicating whether the user profile is used.
            </summary>
      <value>
        <c>true</c> if no profile; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.DebugPreference">
      <summary>
            Gets or sets the debug preference.
            </summary>
      <value>The debug preference.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.ErrorActionPreference">
      <summary>
            Gets or sets the error action preference.
            </summary>
      <value>The error action preference.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.VerbosePreference">
      <summary>
            Gets or sets the verbose preference.
            </summary>
      <value>The verbose preference.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.WarningPreference">
      <summary>
            Gets or sets the warning preference.
            </summary>
      <value>The warning preference.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.ProgressPreference">
      <summary>
            Gets or sets the progress preference.
            </summary>
      <value>The progress preference.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.BackgroundColor">
      <summary>
            Gets or sets the color of the background.
            </summary>
      <value>The color of the background.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.ForegroundColor">
      <summary>
            Gets or sets the color of the foreground.
            </summary>
      <value>The color of the foreground.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.BufferSize">
      <summary>
            Gets or sets the size of the buffer.
            </summary>
      <value>The size of the buffer.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.CursorPosition">
      <summary>
            Gets the cursor position.
            </summary>
      <value>The cursor position.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.CursorSize">
      <summary>
            Gets the size of the cursor.
            </summary>
      <value>The size of the cursor.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.KeyAvailable">
      <summary>
            Gets a value indicating whether key available.
            </summary>
      <value>
        <c>true</c> if key available; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.MaxPhysicalWindowSize">
      <summary>
            Gets the size of the max physical window.
            </summary>
      <value>The size of the max physical window.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.MaxWindowSize">
      <summary>
            Gets the size of the max window.
            </summary>
      <value>The size of the max window.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.WindowPosition">
      <summary>
            Gets or sets the window position.
            </summary>
      <value>The window position.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.WindowSize">
      <summary>
            Gets or sets the size of the window.
            </summary>
      <value>The size of the window.</value>
    </member>
    <member name="P:MAT.PowerShell.PsHostClass.WindowTitle">
      <summary>
            Gets or sets the window title.
            </summary>
      <value>The window title.</value>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.ReadyEvent">
      <summary>
            Occurs when ready event.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.MessageEvent">
      <summary>
            Occurs when message event.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.WindowTitleChanged">
      <summary>
            Occurs when window title changed.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.ClearScreenEvent">
      <summary>
            Occurs when clear screen event.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.BackgroundColorChanged">
      <summary>
            Occurs when background color changed.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.ForegroundColorChanged">
      <summary>
            Occurs when foreground color changed.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.InputRequest">
      <summary>
            Occurs when input request.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.CredentialRequest">
      <summary>
            Occurs when credential request.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.LineRequest">
      <summary>
            Occurs when line request.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.ProgressUpdate">
      <summary>
            Occurs when progress update.
            </summary>
    </member>
    <member name="E:MAT.PowerShell.PsHostClass.ReadKeyRequest">
      <summary>
            Occurs when read key request.
            </summary>
    </member>
    <member name="T:MAT.PowerShell.ConsoleInfo">
      <summary>
            Collect font colors and fonts for custom consoles
            </summary>
    </member>
    <member name="M:MAT.PowerShell.ConsoleInfo.#ctor(System.String)">
      <summary>
            Collect font colors and fonts for custom consoles
            </summary>
      <param name="consoleName">Name of the console application to review (as seen in registry)</param>
    </member>
    <member name="M:MAT.PowerShell.ConsoleInfo.GetColor(System.Int32)">
      <summary>
            Get the color associated with the color table index
            </summary>
      <param name="colorIndex">index</param>
      <returns>Proper RGB color</returns>
    </member>
    <member name="M:MAT.PowerShell.ConsoleInfo.GetColor(System.ConsoleColor)">
      <summary>
            Get the color associated with the default color name
            </summary>
      <param name="colorIndex">Default color name</param>
      <returns>Color currently set in the default color index</returns>
    </member>
    <member name="P:MAT.PowerShell.ConsoleInfo.Font">
      <summary>
            Console apps font size
            </summary>
    </member>
    <member name="P:MAT.PowerShell.ConsoleInfo.BackgroundColor">
      <summary>
            Background color
            </summary>
    </member>
    <member name="P:MAT.PowerShell.ConsoleInfo.BackgroundColorIndex">
      <summary>
            Background color index
            </summary>
    </member>
    <member name="P:MAT.PowerShell.ConsoleInfo.TextColor">
      <summary>
            Foreground color
            </summary>
    </member>
    <member name="P:MAT.PowerShell.ConsoleInfo.TextColorIndex">
      <summary>
            Foreground color index
            </summary>
    </member>
    <member name="T:MAT.Web.IElementInterface">
      <summary>
            The base class for all elements. 
            This class exposes basic attributes common to all HTML elements like ID, CssClass, ToolTip and Style 
            </summary>
      <remarks>
            Most Elements inherit from the abstract IElement.  
            If double inhertence is needed like for ElementLists then this class is used.
            </remarks>
    </member>
    <member name="M:MAT.Web.IElementInterface.GetAttribute(System.String)">
      <summary>
            Gets an attribute associated with the current element
            </summary>
      <param name="attributeName">Name of the attribute whose value needs </param>
      <returns>Returns Attribute Value</returns>
    </member>
    <member name="M:MAT.Web.IElementInterface.GetFirstAncestor(MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets the First Ancestor of the current element 
            </summary>
      <param name="itemFilters">AttributeFilter</param>
      <returns>Returns the first ancestor of the type IElement</returns>
    </member>
    <member name="M:MAT.Web.IElementInterface.GetFirstAncestor(System.String)">
      <summary>
            Gets the First Ancestor of the current element
            </summary>
      <param name="tagName">TagName of the HTML Element which will be returned by this method</param>
      <returns>Returns the first ancestor of the type IElement</returns>
    </member>
    <member name="M:MAT.Web.IElementInterface.GetFirstDescendent(MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets the First descendent of the current element
            </summary>
      <param name="itemFilters">Element Filters</param>
      <returns>Returns the first descendent of the type IElement</returns>
    </member>
    <member name="M:MAT.Web.IElementInterface.GetFirstDescendent(System.String)">
      <summary>
            Gets the First Descendent of the current element
            </summary>
      <param name="tagName">TagName of the HTML Element which will be returned by this method</param>
      <returns>Returns the first descendent of the type IElement</returns>
    </member>
    <member name="M:MAT.Web.IElementInterface.ToString">
      <summary>
            String representation of object
            </summary>
      <returns>Value</returns>
    </member>
    <member name="P:MAT.Web.IElementInterface.BaseHtmlElement">
      <summary>
            Underlying DispHTMLBaseElement
            </summary>
    </member>
    <member name="P:MAT.Web.IElementInterface.Browser">
      <summary>
            BrowserControl used to instantiate this object
            </summary>
    </member>
    <member name="P:MAT.Web.IElementInterface.CssClass">
      <summary>
            CSS class name associated with HTML element
            </summary>
    </member>
    <member name="P:MAT.Web.IElementInterface.Html">
      <summary>
            OuterHtml of element
            </summary>
    </member>
    <member name="P:MAT.Web.IElementInterface.Id">
      <summary>
            Unique ID associated with HTML element
            </summary>
    </member>
    <member name="P:MAT.Web.IElementInterface.ParentElement">
      <summary>
            Parent of the current element
            </summary>
    </member>
    <member name="P:MAT.Web.IElementInterface.Style">
      <summary>
            Inline CSS style
            </summary>
    </member>
    <member name="P:MAT.Web.IElementInterface.TagName">
      <summary>
            HTML tag name of the current element
            Exs: div, img, span , input etc
            </summary>
    </member>
    <member name="P:MAT.Web.IElementInterface.Text">
      <summary>
            Text enclosed by the current element's HTML tags. 
            This property can be overriden in derived classes.
            This property is a readonly property
            </summary>
      <example>
            Consider the following HTML fragment:  
            <code>&lt;div&gt;Enclosed Text&lt;/div&gt;</code>            
            For the above HTML fragment, this property will return Enclosed Text    
            </example>
    </member>
    <member name="P:MAT.Web.IElementInterface.ToolTip">
      <summary>
            Tool Tip
            </summary>
    </member>
    <member name="T:MAT.Web.IElement">
      <summary>
            The base class for all elements. 
            This class exposes basic attributes common to all HTML elements like ID, CssClass, ToolTip and Style 
            </summary>
    </member>
    <member name="M:MAT.Web.IElement.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a new instance of the current element
            </summary>
      <param name="bc">Browser Control used to intialize this object</param>
      <param name="elementFilters">List of Element Filters defining which HTML element to search for</param>
    </member>
    <member name="M:MAT.Web.IElement.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates a new instance of the current element
            </summary>
      <param name="bc">Browser Control used to intialize this object</param>
      <param name="attributeFilters">AttributeFilter</param>
    </member>
    <member name="M:MAT.Web.IElement.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Creates a new instance of the current element. All derived classes need to implement this constructor.
            </summary>
      <param name="bc">Browser Control used to intialize this object</param>
      <param name="baseElement">Underlying DispHTMLBaseElement</param>
    </member>
    <member name="M:MAT.Web.IElement.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Creates a new instance of the current element
            </summary>
      <param name="bc">Browser Control used to intialize this object</param>
      <param name="baseElementId">The ID of the Underlying DispHTMLBaseElement</param>
    </member>
    <member name="M:MAT.Web.IElement.VerifyValidBrowser(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Verifies if the browser control is not null
            </summary>
      <param name="bc">Browser Control used to intialize this object</param>
    </member>
    <member name="M:MAT.Web.IElement.Click">
      <summary>
            Fire click on element
            </summary>
    </member>
    <member name="M:MAT.Web.IElement.GetElement(System.String)">
      <summary>
            Find the element with this text.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. innerHTMLText<br />
             4. attribute with value = elementName<br />
             5. attribute with title = elementName<br />
             6. alt text
            </summary>
      <param name="elementIdentifier">ID, Name, or Text to search for</param>
      <returns>Element</returns>
    </member>
    <member name="M:MAT.Web.IElement.GetElement``1(System.String)">
      <summary>
            Find the element with this text.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. innerHTMLText<br />
             4. attribute with value = elementName<br />
             5. attribute with title = elementName<br />
             6. alt text
            </summary>
      <param name="elementIdentifier">ID, Name, or Text to search for</param>
      <returns>T</returns>
    </member>
    <member name="M:MAT.Web.IElement.FireEvent(System.String)">
      <summary>
            Fires an event on the element such as "onclick" or "onmouseover"
            </summary>
      <param name="eventName">Name of event to fire</param>
    </member>
    <member name="M:MAT.Web.IElement.FireEvent(System.String,System.Double)">
      <summary>
            Fires an event on the element such as "onclick" or "onmouseover"
            </summary>
      <param name="eventName">Name of event to fire</param>
      <param name="waitTime">Time to wait after firing event (i.e. Hover Time)</param>
    </member>
    <member name="M:MAT.Web.IElement.ToString">
      <summary>
            String representation of object
            </summary>
      <returns>Value</returns>
    </member>
    <member name="M:MAT.Web.IElement.GetFirstAncestor(MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets the First Ancestor of the current element 
            </summary>
      <param name="itemFilters">AttributeFilter</param>
      <returns>Returns the first ancestor of the type IElement</returns>
    </member>
    <member name="M:MAT.Web.IElement.GetFirstAncestor(System.String)">
      <summary>
            Gets the First Ancestor of the current element
            </summary>
      <param name="tagName">TagName of the HTML Element which will be returned by this method</param>
      <returns>Returns the first ancestor of the type IElement</returns>
    </member>
    <member name="M:MAT.Web.IElement.GetAttribute(System.String)">
      <summary>
            Gets an attribute associated with the current element
            </summary>
      <param name="attributeName">Name of the attribute whose value needs </param>
      <returns>Returns Attribute Value</returns>
    </member>
    <member name="M:MAT.Web.IElement.GetFirstDescendent(System.String)">
      <summary>
            Gets the First Descendent of the current element
            </summary>
      <param name="tagName">TagName of the HTML Element which will be returned by this method</param>
      <returns>Returns the first descendent of the type IElement</returns>
    </member>
    <member name="M:MAT.Web.IElement.GetFirstDescendent(MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets the First descendent of the current element
            </summary>
      <param name="itemFilters">Element Filters</param>
      <returns>Returns the first descendent of the type IElement</returns>
    </member>
    <member name="M:MAT.Web.IElement.GetDescendentList(MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets the list of descendents of the current element that match the arguments
            </summary>
      <param name="itemFilters">Element Filters to match as descendents</param>
      <returns>Returns a list of descendents of the current element that match the arguments</returns>
    </member>
    <member name="M:MAT.Web.IElement.GetDescendentList(System.String)">
      <summary>
            Gets the list of descendents of the current element that match the arguments
            </summary>
      <param name="tagName">Child tag to look for as a descendent</param>
      <returns>Returns a list of descendents of the current element that match the arguments</returns>
    </member>
    <member name="P:MAT.Web.IElement.Id">
      <summary>
            Unique ID associated with HTML element
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.CssClass">
      <summary>
            CSS class name associated with HTML element
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.Style">
      <summary>
            Inline CSS style
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.ToolTip">
      <summary>
            Tool Tip
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.BaseHtmlElement">
      <summary>
            Underlying DispHTMLBaseElement
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.Browser">
      <summary>
            BrowserControl used to instantiate this object
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.ParentElement">
      <summary>
            Parent of the current element
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.TagName">
      <summary>
            HTML tag name of the current element
            Exs: div, img, span , input etc
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.Text">
      <summary>
            Text enclosed by the current element's HTML tags. 
            This property can be overriden in derived classes.
            This property is a readonly property
            </summary>
      <example>
            Consider the following HTML fragment:  
            <code>&lt;div&gt;Enclosed Text&lt;/div&gt;</code>            
            For the above HTML fragment, this property will return Enclosed Text    
            </example>
    </member>
    <member name="P:MAT.Web.IElement.Html">
      <summary>
            OuterHtml of element
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.Visible">
      <summary>
            Is element styling visible
            </summary>
    </member>
    <member name="P:MAT.Web.IElement.Location">
      <summary>
            The coordinates of the upper-left corner of the control relative to browser window.
            </summary>
    </member>
    <member name="T:MAT.Web.Image">
      <summary>
            An Image element
            </summary>
    </member>
    <member name="F:MAT.Web.Image.TAGNAME">
      <summary>
            Default Element Filter associated with image tag
            </summary>
    </member>
    <member name="M:MAT.Web.Image.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Creates an instance of image element
            </summary>
      <param name="bc">BrowserControl</param>
    </member>
    <member name="M:MAT.Web.Image.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Creates an instance of image element
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElement">DispTMLBaseElement to wrap</param>
    </member>
    <member name="M:MAT.Web.Image.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Creates an instance of image element
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElementId">Id used to get element</param>
    </member>
    <member name="M:MAT.Web.Image.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates an instance of image element
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="itemFilters">AttributeFilter</param>
    </member>
    <member name="M:MAT.Web.Image.#ctor(MAT.Web.IElementInterface)">
      <summary>
            Creates an instance of image element
            </summary>
      <example>
            consider HTML Snippet: 
            &lt;div id=myDiv&gt;
            &lt;IMG src=myimage.gif&gt;
            &lt;div&gt;
            <code>
            public void TestMethod()
            {
              MyDiv myDiv = new MyDive(browser);
              Console.Writeline(myDiv.MyImage.Source);
            }
            
            public class MyDiv : Element
            {
               public MyDiv(BrowserControl bc) : base(bc, "myDiv") {}
               public Image MyImage { get { return new Image(GetFirstDescendent("IMG"); } }
            }
            </code></example>
      <param name="imageElement">image element, needed to create an instance of this class</param>
    </member>
    <member name="M:MAT.Web.Image.ToString">
      <summary>
            String representation of object
            </summary>
      <returns>Value</returns>
    </member>
    <member name="M:MAT.Web.Image.GetLinkParent">
      <summary>
            Returns the parent of the image tag if it is 'a' tag
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.Web.Image.AltText">
      <summary>
            Alt text displayed if image is not present.
            In Internet Explorer if no tooltip is set, the alt text acts as the tooltip.
            </summary>
    </member>
    <member name="P:MAT.Web.Image.Border">
      <summary>
            Border of the image
            </summary>
    </member>
    <member name="P:MAT.Web.Image.FileSize">
      <summary>
            Size of Image file
            </summary>
    </member>
    <member name="P:MAT.Web.Image.IsLink">
      <summary>
            Indicates if the image is a link
            </summary>
    </member>
    <member name="P:MAT.Web.Image.Link">
      <summary>
            Returns the Link element if the image is a link
            </summary>
    </member>
    <member name="P:MAT.Web.Image.Height">
      <summary>
            Height of the image as listed in the Img Tag
            </summary>
    </member>
    <member name="P:MAT.Web.Image.Source">
      <summary>
            Src attribute of img tag
            </summary>
    </member>
    <member name="P:MAT.Web.Image.Width">
      <summary>
            Width of the image as listed in the Img Tag
            </summary>
    </member>
    <member name="P:MAT.Web.Image.ImageFile">
      <summary>
            Image file associated with the Image
            </summary>
    </member>
    <member name="T:MAT.Web.Input">
      <summary>
            Input element class
            </summary>
      <remarks>The input class is a generic base for specific input type <see cref="T:MAT.Web.Button" />, <see cref="T:MAT.Web.CheckBox" />, <see cref="T:MAT.Web.RadioButton" />, <see cref="T:MAT.Web.TextBox" /></remarks>
    </member>
    <member name="F:MAT.Web.Input.TAG_NAME">
      <summary>
            TagName for an input element
            </summary>
      <value>Input</value>
    </member>
    <member name="F:MAT.Web.Input.TYPE_ATTRIBUTE_NAME">
      <summary>
            Type Attribute name for Input tags. Value of which is "type"
            <input type="submit"></input></summary>
      <value>Type</value>
    </member>
    <member name="M:MAT.Web.Input.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Wraps an INPUT element
            </summary>
      <param name="bc">Browser Control</param>
    </member>
    <member name="M:MAT.Web.Input.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Wraps an INPUT element
            </summary>
      <param name="bc">Browser Control</param>
      <param name="itemFilters">Filters </param>
    </member>
    <member name="M:MAT.Web.Input.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Wraps an INPUT element
            </summary>
      <param name="bc">Browser Control</param>
      <param name="baseElement">DispTMLBaseElement to wrap</param>
    </member>
    <member name="M:MAT.Web.Input.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Wraps an INPUT element
            </summary>
      <param name="bc">Browser Control</param>
      <param name="baseElementId">Id used to get element</param>
    </member>
    <member name="M:MAT.Web.Input.#ctor(MAT.Web.IElementInterface)">
      <summary>
            Wraps an INPUT element
            </summary>
    </member>
    <member name="M:MAT.Web.Input.ToString">
      <summary>
            String representation of object
            </summary>
      <returns>Value</returns>
    </member>
    <member name="P:MAT.Web.Input.Text">
      <summary>
            Gives the value of the input element
            </summary>
    </member>
    <member name="P:MAT.Web.Input.Type">
      <summary>
            Type of input element 
            <seealso cref="T:MAT.Web.InputType" /></summary>
    </member>
    <member name="P:MAT.Web.Input.IsEnabled">
      <summary>
            Indicates if the element is disabled when the page loads for the first time
            </summary>
    </member>
    <member name="P:MAT.Web.Input.Name">
      <summary>
            Unique Name of the input element       
            </summary>
    </member>
    <member name="T:MAT.Web.Button">
      <summary>
            This class represents a Button element
            </summary>
    </member>
    <member name="M:MAT.Web.Button.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Wrap Button element
            </summary>
      <param name="bc">BrowserControl</param>
    </member>
    <member name="M:MAT.Web.Button.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Wrap Button element
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElement">DispTMLBaseElement to wrap</param>
    </member>
    <member name="M:MAT.Web.Button.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Wrap Button element
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElementId">Id used to get element</param>
    </member>
    <member name="M:MAT.Web.Button.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Wrap Button element
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="itemFilters">AttributeFilter</param>
    </member>
    <member name="M:MAT.Web.Button.#ctor(MAT.Web.IElementInterface)">
      <summary>
            Wraps an instance of button element
            </summary>
      <example>
            consider HTML Snippet: 
            &lt;div id=myDiv&gt;
            &lt;INPUT Type=Button&gt;Home&lt;/&gt;
            &lt;div&gt;
            <code>
            public void TestMethod()
            {
              MyDiv myDiv = new MyDive(browser);
              myDiv.Home.Click();
            }
            
            public class MyDiv : Element
            {
               public MyDiv(BrowserControl bc) : base(bc, "myDiv") {}
               public Button Home { get { return new Anchor(GetFirstDescendent("INPUT"); } }
            }
            </code></example>
      <param name="buttonElement">button element, needed to create an instance of this class</param>
    </member>
    <member name="P:MAT.Web.Button.IsSubmit">
      <summary>
            Verifies if the Input type is Submit or Button
            If IsSubmit == True : Input Type == Submit
            </summary>
    </member>
    <member name="T:MAT.Web.ElementList`1">
      <summary>
            List of elements under a parent element
            </summary>
      <typeparam name="T">Type of Element in the list</typeparam>
    </member>
    <member name="M:MAT.Web.ElementList`1.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets the Element List
            </summary>
      <param name="bc">Browser Control</param>
      <param name="itemFilters">Element filter to get the list of elements</param>
    </member>
    <member name="M:MAT.Web.ElementList`1.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets the Element list
            </summary>
      <param name="bc">Browser Control</param>
      <param name="parentElementId">Id of the container element from which a list of elements is obtained</param>
      <param name="itemFilters">Element filter to get the list of elements</param>
    </member>
    <member name="M:MAT.Web.ElementList`1.#ctor(MAT.Web.IElementInterface,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets the Element list
            </summary>
      <param name="parentElement">Id of the container element from which a list of elements is obtained</param>
      <param name="itemFilters">Element filter to get the list of elements</param>
    </member>
    <member name="M:MAT.Web.ElementList`1.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets the Element list
            </summary>
      <param name="bc">Browser Control</param>
      <param name="parentElement">Id of the container element from which a list of elements is obtained</param>
      <param name="itemFilters">Element filter to get the list of elements</param>
    </member>
    <member name="M:MAT.Web.ElementList`1.Exists(System.String)">
      <summary>
            Determines if a metadata item exists with the given name or http-equiv
            </summary>
      <param name="value">value of string to match</param>
      <returns>true/false</returns>
    </member>
    <member name="M:MAT.Web.ElementList`1.Find(System.Object,System.String)">
      <summary>
            Finds first item in the list whose property exactly matches the value.
            </summary>
      <example>
            AnchorList list = new AnchorList(TestApp.Browser);
            Anchor noAltText = list.Find(null, "AltText");
            </example>
      <param name="value">Object to match</param>
      <param name="property">Property to validate against</param>
      <returns>First element that matches</returns>
    </member>
    <member name="M:MAT.Web.ElementList`1.Find(System.Text.RegularExpressions.Regex,System.String)">
      <summary>
            Find first item in the list whose string value matches the RegEx
            </summary>
      <example>
            AnchorList list = new AnchorList(TestApp.Browser);
            Anchor msComLink = list.Find(new RegEx("^.*(?i://www\.microsoft\.com)"), "Href");
            </example>
      <param name="regEx">RegEx to macth</param>
      <param name="property">Property to validate against</param>
      <returns>First element that matches</returns>
    </member>
    <member name="M:MAT.Web.ElementList`1.Find(System.Text.RegularExpressions.Regex,System.String,System.Boolean)">
      <summary>
            Finds all items in the list whose string value matches the RegEx
            </summary>
      <example>
            AnchorList list = new AnchorList(TestApp.Browser);
            Anchor nonMsComLink = list.Find(new RegEx("^.*(?i://www\.microsoft\.com)"), "Href", true);
            </example>
      <param name="regEx">RegEx to macth</param>
      <param name="property">Property to validate against</param>
      <param name="inverseSet">return items that don't match</param>
      <returns>First element that matches</returns>
    </member>
    <member name="M:MAT.Web.ElementList`1.FindAll(System.Object,System.String)">
      <summary>
            Finds all items in the list whose property exactly matches the value.
            </summary>
      <example>
            AnchorList list = new AnchorList(TestApp.Browser);
            List&lt;Anchor&gt; noAltText = list.FindAll(null, "AltText");
            </example>
      <param name="value">Object to match</param>
      <param name="property">Property to validate against</param>
      <returns>List of elements that match</returns>
    </member>
    <member name="M:MAT.Web.ElementList`1.FindAll(System.Text.RegularExpressions.Regex,System.String)">
      <summary>
            Finds all items in the list whose string value matches the RegEx
            </summary>
      <example>
            AnchorList list = new AnchorList(TestApp.Browser);
            List&lt;Anchor&gt; msComLinks = list.FindAll(new RegEx("^.*(?i://www\.microsoft\.com)"), "Href");
            </example>
      <param name="regEx">RegEx to macth</param>
      <param name="property">Property to validate against</param>
      <returns>List of elements that match</returns>
    </member>
    <member name="M:MAT.Web.ElementList`1.FindAll(System.Text.RegularExpressions.Regex,System.String,System.Boolean)">
      <summary>
            Finds all items in the list whose string value matches the RegEx
            </summary>
      <example>
            AnchorList list = new AnchorList(TestApp.Browser);
            List&lt;Anchor&gt; nonMsComLinks = list.FindAll(new RegEx("^.*(?i://www\.microsoft\.com)"), "Href", true);
            </example>
      <param name="regEx">RegEx to macth</param>
      <param name="property">Property to validate against</param>
      <param name="inverseSet">return items that don't match</param>
      <returns>List of elements that match</returns>
    </member>
    <member name="P:MAT.Web.ElementList`1.Item(System.String)">
      <summary>
            Non-case sensitive name search for matching ToString();
            </summary>
      <param name="value">String</param>
      <returns>Matching object or Null</returns>
      <exception cref="T:System.ArgumentNullException" />
      <example>
            string value myWebPage.MetaData["Description"].Content;
            </example>
    </member>
    <member name="P:MAT.Web.ElementList`1.ParentElement">
      <summary>
            Returns the parent element passed in to get the list of elements
            </summary>
    </member>
    <member name="P:MAT.Web.ElementList`1.Browser">
      <summary>
            Exposes the browser passed in to get the list of elements
            </summary>
    </member>
    <member name="P:MAT.Web.ElementList`1.Container">
      <summary>
            Returns the Element form of the element passed in to get the list of elements
            </summary>
    </member>
    <member name="T:MAT.Web.ImageList">
      <summary>
            This class gets a list of Images
            </summary>
    </member>
    <member name="M:MAT.Web.ImageList.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Gets a list of Images on a page
            </summary>
      <param name="bc">Browser Control from which the list of images is obtained</param>
    </member>
    <member name="M:MAT.Web.ImageList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Images filtered using element filters
            </summary>
      <param name="bc">Browser Control from which the list of images is obtained</param>
      <param name="itemFilters">List of Filters defining which images to search for</param>
    </member>
    <member name="M:MAT.Web.ImageList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Gets a list of images which are the descendents of a parent element
            </summary>
      <param name="bc">Browser Control from which the list of images is obtained</param>
      <param name="parentElement">Parent Element</param>
    </member>
    <member name="M:MAT.Web.ImageList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Gets a list of images which are the descendents of a parent element
            </summary>
      <param name="bc">Browser Control from which the list of images is obtained</param>
      <param name="parentElementId">Parent Element Id</param>
    </member>
    <member name="M:MAT.Web.ImageList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Images
            </summary>
      <param name="bc">Browser Control from which the list of images is obtained</param>
      <param name="parentElement">Parent element</param>
      <param name="itemFilters">List of Filters defining which images to search for</param>
    </member>
    <member name="M:MAT.Web.ImageList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Images
            </summary>
      <param name="bc">Browser Control from which the list of images is obtained</param>
      <param name="parentElementId">Parent Element Id</param>
      <param name="itemFilters">List of Filters defining which images to search for</param>
    </member>
    <member name="M:MAT.Web.ImageList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Image elements
            </summary>
      <param name="bc">Browser Control object from which the list of Images is obtained</param>
      <param name="itemFilters">List of filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.ImageList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Image elements
            </summary>
      <param name="bc">Browser Control object from which the list of Images is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of Images matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.ImageList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Image elements
            </summary>
      <param name="bc">Browser Control object from which the list of Images is obtained</param>
      <param name="parentElement">Parent Element from which list of Images matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="T:MAT.Web.InputType">
      <summary>
            Enumeration representing the type of input element
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.Button">
      <summary>
            Button
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.CheckBox">
      <summary>
            Checkbox 
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.File">
      <summary>
            File
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.Hidden">
      <summary>
            Hidden
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.Password">
      <summary>
            Textbox for passwords
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.Radio">
      <summary>
            RadioButton
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.Submit">
      <summary>
            Submit
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.Text">
      <summary>
            TextBox
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.Image">
      <summary>
            Image
            </summary>
    </member>
    <member name="F:MAT.Web.InputType.Unknown">
      <summary>
            Unknown input type
            </summary>
    </member>
    <member name="T:MAT.Web.ConstructorMissingException">
      <summary>
            Error recieved when an object inherits from IElement but does not implement a contructors with a Browser object
            </summary>
    </member>
    <member name="M:MAT.Web.ConstructorMissingException.#ctor(System.String)">
      <summary>
            Error recieved when an object inherits from IElement but does not implement a contructors with a Browser object
            </summary>
      <param name="message">Message to display</param>
    </member>
    <member name="T:MAT.Web.RadioButtonList">
      <summary>
            This class gets a list of Radiobuttons
            </summary>
    </member>
    <member name="F:MAT.Web.RadioButtonList.DEFAULT_FILTER">
      <summary>
            Default Element Filter associated with RadioButton
            </summary>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Gets a list of radiobuttons
             </summary>
      <param name="bc">Browser Control object from which the list of radiobuttons is obtained</param>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Creates a list of radiobuttons
             </summary>
      <param name="bc">Browser Control object from which the list of radiobuttons is obtained</param>
      <param name="groupName">Group Name attribute value</param>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates a list of radiobuttons
             </summary>
      <param name="bc">Browser Control object from which the list of radiobuttons is obtained</param>
      <param name="itemFilters">List of filters defining which radiobuttons to search for</param>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,System.String)">
      <summary>
            Creates a list of radiobuttons
             </summary>
      <param name="bc">Browser Control object from which the list of radiobuttons is obtained</param>
      <param name="parentElement">Parent Element from which list of radiobuttons matching a certain criteria are obtained</param>
      <param name="groupName">Group Name attribute value</param>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,System.String)">
      <summary>
            Creates a list of radiobuttons
             </summary>
      <param name="bc">Browser Control object from which the list of radiobuttons is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of radiobuttons matching a certain criteria are obtained</param>
      <param name="groupName">Group Name attribute value</param>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates a list of radiobuttons
            </summary>
      <param name="bc">Browser Control object from which the list of radiobuttons is obtained</param>
      <param name="parentElement">Parent Element from which list of radiobuttons matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining which radiobuttons to search for</param>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates a list of radiobuttons
            </summary>
      <param name="bc">Browser Control object from which the list of radiobuttons is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of radiobuttons matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining which radiobuttons to search for</param>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of inputs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.RadioButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElement">Parent Element from which list of inputs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="T:MAT.Web.CheckBox">
      <summary>
            This class represents a Checkbox element
            </summary>
    </member>
    <member name="M:MAT.Web.CheckBox.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
             Creates an instance of checkbox element
            </summary>
      <param name="bc">Browser Control used to intialize the current checkbox element</param>
    </member>
    <member name="M:MAT.Web.CheckBox.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Creates an instance of checkbox element
            </summary>
      <param name="bc">Browser Control used to intialize the current checkbox element</param>
      <param name="baseElement">DispTMLBaseElement to wrap</param>
    </member>
    <member name="M:MAT.Web.CheckBox.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Creates an instance of checkbox element
            </summary>
      <param name="bc">Browser Control used to intialize the current checkbox element</param>
      <param name="baseElementId">Id used to get element</param>
    </member>
    <member name="M:MAT.Web.CheckBox.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates an instance of checkbox element
            </summary>
      <param name="bc">Browser Control used to intialize the current checkbox element</param>
      <param name="itemFilters">List of Filters defining which checkbox element to search for</param>
    </member>
    <member name="M:MAT.Web.CheckBox.#ctor(MAT.Web.IElementInterface)">
      <summary>
            Creates an instance of checkbox element
            </summary>
      <param name="checkboxElement">CheckBox element to wrap</param>
    </member>
    <member name="P:MAT.Web.CheckBox.Checked">
      <summary>
            Indicates that checkbox is checked
            </summary>
    </member>
    <member name="T:MAT.Web.WebPage">
      <summary>
            Object to describe a full Html page including header and body
            </summary>
    </member>
    <member name="M:MAT.Web.WebPage.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Object to describe a full Html page including header and body
            </summary>
      <param name="bc">Browser Control</param>
    </member>
    <member name="M:MAT.Web.WebPage.#ctor(MAT.Web.WebBrowser.BrowserControl,System.Uri)">
      <summary>
            Object to describe a full Html page including header and body
            </summary>
      <param name="bc">Browser Control</param>
      <param name="url">URL</param>
    </member>
    <member name="M:MAT.Web.WebPage.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Object to describe a full Html page including header and body
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="url">URL</param>
    </member>
    <member name="M:MAT.Web.WebPage.#ctor(System.String)">
      <summary>
            Object to describe a full Html page including header and body
            </summary>
      <param name="url">URL</param>
    </member>
    <member name="M:MAT.Web.WebPage.#ctor(System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Object to describe a full Html page including header and body
            </summary>
      <param name="url">URL</param>
      <param name="showForm">if set to <c>true</c> [show form].</param>
      <param name="pageHeight">Height of the page.</param>
      <param name="pageWidth">Width of the page.</param>
    </member>
    <member name="M:MAT.Web.WebPage.#ctor(System.Uri)">
      <summary>
            Object to describe a full Html page including header and body
            </summary>
      <param name="url">URL</param>
    </member>
    <member name="M:MAT.Web.WebPage.#ctor(System.Uri,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Object to describe a full Html page including header and body
            </summary>
      <param name="url">URL</param>
      <param name="showForm">if set to <c>true</c> [show form].</param>
      <param name="pageHeight">Height of the page.</param>
      <param name="pageWidth">Width of the page.</param>
    </member>
    <member name="M:MAT.Web.WebPage.VerifyPage">
      <summary>
            VerifyPage by default checks if the page returns with a WebPageStatus.Ok (200).  This is intended to be overriden.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebPage.NavigateTo(System.String)">
      <summary>
            Navigate to a different page.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:MAT.Web.WebPage.ExecuteJavaScript(System.String)">
      <summary>
            Executes the java script commands.
            </summary>
      <param name="script">The script.</param>
      <returns>String return of Javascript.  For objects you need to use GetData and window.external.data</returns>
      <exception cref="T:MAT.Web.WebBrowser.ScriptException">JavaScript exception</exception>
    </member>
    <member name="M:MAT.Web.WebPage.GetElement(System.String)">
      <summary>
            Find the element with this text.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. innerHTMLText<br />
             4. attribute with value = elementName<br />
             5. attribute with title = elementName<br />
             6. alt text
            </summary>
      <param name="elementIdentifier">ID, Name, or Text to search for</param>
      <returns>Element</returns>
    </member>
    <member name="M:MAT.Web.WebPage.GetElement``1(System.String)">
      <summary>
            Find the element with this text.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. innerHTMLText<br />
             4. attribute with value = elementName<br />
             5. attribute with title = elementName<br />
             6. alt text
            </summary>
      <param name="elementIdentifier">ID, Name, or Text to search for</param>
      <returns>T</returns>
    </member>
    <member name="M:MAT.Web.WebPage.Refresh">
      <summary>
            Refresh the page.
            </summary>
    </member>
    <member name="M:MAT.Web.WebPage.Dispose">
      <summary>
            Dispose()
            </summary>
    </member>
    <member name="M:MAT.Web.WebPage.Dispose(System.Boolean)">
      <summary>
            Dispose()
            </summary>
      <param name="disposing">disposing</param>
    </member>
    <member name="P:MAT.Web.WebPage.Anchors">
      <summary>
            List of Anchors on the page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.BaseHref">
      <summary>
            Base URL for all the links in a page 
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Browser">
      <summary>
            Underlying Browser Control
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Buttons">
      <summary>
            List of buttons on the page
            Gives both types of buttons: Submit and Button 
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Checkboxes">
      <summary>
            List of checkboxes on the page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Images">
      <summary>
            List of images on the page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Inputs">
      <summary>
            List of all inputs on the page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.RadioButtons">
      <summary>
            List of RadioButtons on the page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Selects">
      <summary>
            List of Selects on the page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Status">
      <summary>
            Success status of the page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Textboxes">
      <summary>
            List of Textboxes on the page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Title">
      <summary>
            Title of the page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.MetaData">
      <summary>
            MetaData Associated with the page
            Ex: Descrption, Keywords etc
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Url">
      <summary>
            Gives Page URI
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.Head">
      <summary>
            Head element in a page
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.ShowForm">
      <summary>
            To hide or show the browser window when running the application
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.FormHeight">
      <summary>
            Height of the browser window
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.FormWidth">
      <summary>
            Width of the browser window
            </summary>
    </member>
    <member name="P:MAT.Web.WebPage.ExternalData">
      <summary>
            Used for passing data from javascript object window.external.data
            </summary>
      <value>The external data.</value>
    </member>
    <member name="P:MAT.Web.WebPage.IgnoreJavascriptErrors">
      <summary>
            Gets or sets a value indicating whether to ignore javascript errors.
            </summary>
      <value>
        <c>true</c> if ignore javascript errors; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:MAT.Web.WebPage.StayOnTop">
      <summary>
            Gets or sets a value indicating whether the form is forced to stay on top.
            </summary>
      <value>
        <c>true</c> if forced stay on top; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebPage.Cookie">
      <summary>
            Gets or sets the cookie.
            </summary>
      <value>The cookie.</value>
    </member>
    <member name="T:MAT.Web.WebPageStatus">
      <summary>
            Status of the Web Page
            </summary>
    </member>
    <member name="F:MAT.Web.WebPageStatus.Ok">
      <summary>
            Page returned with no errors
            </summary>
    </member>
    <member name="F:MAT.Web.WebPageStatus.Unauthorized">
      <summary>
            Error 401 : Unauthorized access
            </summary>
    </member>
    <member name="F:MAT.Web.WebPageStatus.Forbidden">
      <summary>
            Error 403 : Access denied
            </summary>
    </member>
    <member name="F:MAT.Web.WebPageStatus.FileNotFound">
      <summary>
            Error 404 : Page Not Found
            </summary>
    </member>
    <member name="F:MAT.Web.WebPageStatus.Error">
      <summary>
            Error 500 : ASP/ASP.NET error
            </summary>
    </member>
    <member name="F:MAT.Web.WebPageStatus.UnknownStatus">
      <summary>
            Unknown status id
            </summary>
    </member>
    <member name="T:MAT.Web.Select">
      <summary>
            Select elemeent (List and DropDown boxes)
            </summary>
    </member>
    <member name="T:MAT.Web.Select.Option">
      <summary>
            An option element defines an item in a drop-down list (i.e Select Element).
            </summary>
    </member>
    <member name="M:MAT.Web.Select.Option.ToString">
      <summary>
            String representation of Option Element
            </summary>
      <returns>Value</returns>
    </member>
    <member name="P:MAT.Web.Select.Option.IsSelected">
      <summary>
            Indicates if the current option element is selected
            </summary>
    </member>
    <member name="P:MAT.Web.Select.Option.Value">
      <summary>
            Value of the option element
            </summary>
    </member>
    <member name="P:MAT.Web.Select.Option.OptionText">
      <summary>
            Text enclosed within the option tags
            </summary>
    </member>
    <member name="F:MAT.Web.Select.TAGNAME">
      <summary>
            HTML Tag Name associated with Select Element
            </summary>
    </member>
    <member name="F:MAT.Web.Select.OPTION_SELECTED_PROP">
      <summary>
            Property name for indicating if an option element is selected or not i.e IsSelected
            </summary>
    </member>
    <member name="F:MAT.Web.Select.DEFAULT_FILTER">
      <summary>
            Default Filter associated with Select Tag i.e ElementFilter("select")      
            </summary>
    </member>
    <member name="M:MAT.Web.Select.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Wraps an instance of a select element
            </summary>
      <param name="bc">Browser Control from which the select element is obtained</param>
    </member>
    <member name="M:MAT.Web.Select.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Wraps an instance of a select element
            </summary>
      <param name="bc">Browser Control from which the select element is obtained</param>
      <param name="baseElement">DispTMLBaseElement to wrap</param>
    </member>
    <member name="M:MAT.Web.Select.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Wraps an instance of a select element
            </summary>
      <param name="bc">Browser Control from which the select element is obtained</param>
      <param name="baseElementId">Id used to get element</param>
    </member>
    <member name="M:MAT.Web.Select.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Wraps an instance of a select element
            </summary>
      <param name="bc">Browser Control from which the select element is obtained</param>
      <param name="elementFilters">ElementFilter</param>
    </member>
    <member name="M:MAT.Web.Select.#ctor(MAT.Web.IElementInterface)">
      <summary>
            Wraps an instance of a select element
            </summary>
      <param name="selectElement">Element to wrap</param>
    </member>
    <member name="M:MAT.Web.Select.GetChildElements">
      <summary>
            Gets a list of option elements nested within the current select element
            </summary>
      <returns>List of option elements</returns>
    </member>
    <member name="M:MAT.Web.Select.SetSelectOptions(System.Boolean,System.Boolean,System.String[])">
      <summary>
            Select / Deselect option items in the dropdown
            </summary>
      <param name="useValue">If true, use the value associated with the option element, else use the text between the option tags</param>
      <param name="select">Select/DeSelect the items passed in the selectItems paramater</param>
      <param name="selectItems">List of option elements Value/ Text to be selected / deselected</param>
    </member>
    <member name="P:MAT.Web.Select.SelectedItems">
      <summary>
            Gets the list of options from the 
            </summary>
    </member>
    <member name="P:MAT.Web.Select.AllOptionItems">
      <summary>
            All option elements nested in the Select Element
            </summary>
    </member>
    <member name="P:MAT.Web.Select.Size">
      <summary>
            Number of visible elements in the Select Element
            </summary>
    </member>
    <member name="P:MAT.Web.Select.Mode">
      <summary>
            Multiple Select or Single Select. Multiple mode indicates that multiple option elements can be selected at a time
            </summary>
    </member>
    <member name="P:MAT.Web.Select.IsEnabled">
      <summary>
            Indicates if the element is disabled
            </summary>
    </member>
    <member name="T:MAT.Web.SelectMode">
      <summary>
            Enumeration specifying how many option items in a drop-down list(i.e Select) can be selected at a time. 
            </summary>
    </member>
    <member name="F:MAT.Web.SelectMode.SingleSelect">
      <summary>
            Only one option item can be selected at a time
            </summary>
    </member>
    <member name="F:MAT.Web.SelectMode.MultiSelect">
      <summary>
            Multiple option items can be selected at a time
            </summary>
    </member>
    <member name="T:MAT.Web.RadioButton">
      <summary>
            Radio Button Element
            </summary>
    </member>
    <member name="M:MAT.Web.RadioButton.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Wraps a radio button control
            </summary>
      <param name="bc">BrowserControl</param>
    </member>
    <member name="M:MAT.Web.RadioButton.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Wraps a radio button control
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElement">DispTMLBaseElement to wrap</param>
    </member>
    <member name="M:MAT.Web.RadioButton.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Wraps a radio button control
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElementId">Id used to get element</param>
    </member>
    <member name="M:MAT.Web.RadioButton.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Wraps a radio button control
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="itemFilters">AttributeFilter</param>
    </member>
    <member name="M:MAT.Web.RadioButton.#ctor(MAT.Web.IElementInterface)">
      <summary>
            Wraps an instance of radio element
            </summary>
      <example>
            consider HTML Snippet: 
            &lt;div id=myDiv&gt;
            &lt;INPUT Type=Radio&gt;Home&lt;/&gt;
            &lt;div&gt;
            <code>
            public void TestMethod()
            {
              MyDiv myDiv = new MyDive(browser);
              myDiv.Home.Click();
            }
            
            public class MyDiv : Element
            {
               public MyDiv(BrowserControl bc) : base(bc, "myDiv") {}
               public RadioButton Home { get { return new RadioButton(GetFirstDescendent("INPUT"); } }
            }
            </code></example>
      <param name="radioElement">radio element, needed to create an instance of this class</param>
    </member>
    <member name="P:MAT.Web.RadioButton.IsChecked">
      <summary>
            Is the radio button selected
            </summary>
    </member>
    <member name="P:MAT.Web.RadioButton.GroupName">
      <summary>
            The name of the group that this radio button belongs to
            </summary>
    </member>
    <member name="T:MAT.Web.SelectList">
      <summary>
            This class creates a list of Selects.
            </summary>
    </member>
    <member name="M:MAT.Web.SelectList.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Gets a list of Selects on a page
            </summary>
      <param name="bc">Browser Control used to obtain the current list of selects</param>
    </member>
    <member name="M:MAT.Web.SelectList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Gets a list of Selects enclosed within a parent HTML element
            </summary>
      <param name="bc">Browser Control used to obtain the current list of selects</param>
      <param name="parentElement">Parent Element</param>
    </member>
    <member name="M:MAT.Web.SelectList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Selects filtered on a list of Element Filters
            </summary>
      <param name="bc">Browser Control used to obtain the current list of selects</param>
      <param name="itemFilters">List of Filters which defines the selects included in the list created by this class</param>
    </member>
    <member name="M:MAT.Web.SelectList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Gets a list of Selects enclosed within a parent HTML element
            </summary>
      <param name="bc">Browser Control used to obtain the current list of selects</param>
      <param name="parentElementId">Parent Element Id</param>
    </member>
    <member name="M:MAT.Web.SelectList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Selects enclosed within a parent HTML element and filtered on a list of element filters
            </summary>
      <param name="bc">Browser Control used to obtain the current list of selects</param>
      <param name="parentElement">Parent Element</param>
      <param name="itemFilters">List of Filters which defines the selects included in the list created by this class</param>
    </member>
    <member name="M:MAT.Web.SelectList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Selects enclosed within a parent HTML element and filtered on a list of element filters
            </summary>
      <param name="bc">Browser Control used to obtain the current list of selects</param>
      <param name="parentElementId">Parent Element Id</param>
      <param name="itemFilters">List of Filters which defines the selects included in the list created by this class</param>
    </member>
    <member name="M:MAT.Web.SelectList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.SelectList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of inputs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.SelectList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElement">Parent Element from which list of inputs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="T:MAT.Web.CheckBoxList">
      <summary>
            This class gets a list of checkboxes
            </summary>
    </member>
    <member name="F:MAT.Web.CheckBoxList.DEFAULT_FILTER">
      <summary>
            Default Element Filter associated with Checkbox
            </summary>
    </member>
    <member name="M:MAT.Web.CheckBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Obtains a list of checkboxes
            </summary>
      <param name="bc">Browser Control object from which this list of checkboxes is obtained</param>
    </member>
    <member name="M:MAT.Web.CheckBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Obtains a list of checkboxes
            </summary>
      <param name="bc">Browser Control object from which this list of checkboxes is obtained</param>
      <param name="parentElement">Parent Element which encloses a list of checkboxes is obtained</param>
      <example>
      </example>
    </member>
    <member name="M:MAT.Web.CheckBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            obtains a list of checkboxes
            </summary>
      <param name="bc">Browser Control object from which this list of checkboxes is obtained</param>
      <param name="itemFilters">List of filters defining what Checkbox elements to search for</param>
    </member>
    <member name="M:MAT.Web.CheckBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            obtains a list of checkboxes
            </summary>
      <param name="bc">Browser Control object from which this list of checkboxes is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of checkboxes matching a certain criteria are obtained</param>
    </member>
    <member name="M:MAT.Web.CheckBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            obtains a list of checkboxes
            </summary>
      <param name="bc">Browser Control object from which this list of checkboxes is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of checkboxes matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what Checkbox elements to search for</param>
    </member>
    <member name="M:MAT.Web.CheckBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            obtains a list of checkboxes
            </summary>
      <param name="bc">Browser Control object from which this list of checkboxes is obtained</param>
      <param name="parentElement">Parent Element from which list of checkboxes matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what Checkbox elements to search for</param>
    </member>
    <member name="M:MAT.Web.CheckBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets a list of CheckBoxs filtered on a list of Element Filters
            </summary>
      <param name="bc">Browser Control used to obtain the current list of CheckBoxs</param>
      <param name="itemFilters">List of Element Filters which defines the CheckBoxs included in the list created by this class</param>
    </member>
    <member name="M:MAT.Web.CheckBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets a list of CheckBoxs enclosed within a parent HTML element and filtered on a list of element filters
            </summary>
      <param name="bc">Browser Control used to obtain the current list of CheckBoxs</param>
      <param name="parentElement">Parent Element</param>
      <param name="itemFilters">List of Element Filters which defines the CheckBoxs included in the list created by this class</param>
    </member>
    <member name="M:MAT.Web.CheckBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
             Gets a list of CheckBoxs enclosed within a parent HTML element and filtered on a list of element filters
            </summary>
      <param name="bc">Browser Control used to obtain the current list of CheckBoxs</param>
      <param name="parentElementId">Parent Element Id</param>
      <param name="itemFilters">List of Element Filters which defines the CheckBoxs included in the list created by this class</param>
    </member>
    <member name="M:MAT.Web.CheckBoxList.CheckUncheck(System.Boolean)">
      <summary>
            Checks or unchecks all checkboxes
            </summary>
      <param name="isCheck">
      </param>
    </member>
    <member name="P:MAT.Web.CheckBoxList.CheckAll">
      <summary>
            Checks or Unchecks all checkboxes
             </summary>
    </member>
    <member name="T:MAT.Web.Anchor">
      <summary>
            This class represents an Anchor element
            </summary>
    </member>
    <member name="F:MAT.Web.Anchor.TAG_NAME">
      <summary>
            HTML Tag Name associated with Anchor Element: a
            </summary>
    </member>
    <member name="M:MAT.Web.Anchor.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Creates an instance of anchor element
            </summary>
      <param name="bc">Browser Control used to intialize the current anchor element</param>
      <example>
            consider HTML Snippet: 
            &lt;a href="http://www.microsoft.com" id="microsoft"&gt;Microsoft!&lt;/a&gt;
            &lt;a href="http://www.msn.com" id="msn"&gt;MSN!&lt;/a&gt;
            This constructor creates an instance of the first anchor element in the page. 
            For the above HTML snippet this constructor will create an instance of anchor element with id=="microsoft":     
            Anchor a=new Anchor(bc);        
            </example>
    </member>
    <member name="M:MAT.Web.Anchor.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Creates an instance of anchor element
            </summary>
      <param name="bc">Browser Control used to intialize the current anchor element</param>
      <param name="baseElement">Anchor element of type DispHTMLBaseElement, needed to create an instance of this class</param>
    </member>
    <member name="M:MAT.Web.Anchor.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates an instance of anchor element
            </summary>
      <param name="bc">Browser Control used to intialize the current anchor element</param>
      <param name="itemFilters">List of Filters defining which anchor element to search for</param>
      <example>
            consider HTML Snippet: 
            &lt;a href="http://www.microsoft.com" id="microsoft"&gt;Microsoft!&lt;/a&gt;
            &lt;a href="http://www.msn.com" id="msn"&gt;MSN!&lt;/a&gt;
            To create an instance of MSN anchor element by using AttributeFilters (assuming bc is the browser control):
            Anchor a=new Anchor(bc,new AttributeFilter("id","msn"));
            </example>
    </member>
    <member name="M:MAT.Web.Anchor.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Creates an instance of anchor element
            </summary>
      <param name="bc">Browser Control used to intialize this anchor element</param>
      <param name="elementId">Id of anchor element, needed to create an instance of this class</param>
      <example>
            consider HTML Snippet: 
            &lt;a href="http://www.microsoft.com" id="microsoft"&gt;Microsoft!&lt;/a&gt;
            To create an instance of this anchor element by using ID (assuming bc is the browser control):
            Anchor a=new Anchor(bc,"microsoft");
            </example>
    </member>
    <member name="M:MAT.Web.Anchor.#ctor(MAT.Web.IElementInterface)">
      <summary>
            Creates an instance of anchor element
            </summary>
      <param name="anchorElement">anchor element, needed to create an instance of this class</param>
      <example>
            consider HTML Snippet: 
            &lt;div id=myDiv&gt;
            &lt;a href="http://www.microsoft.com" id="microsoft"&gt;Microsoft!&lt;/a&gt;
            &lt;div&gt;
            <code>
            public void TestMethod()
            {
              MyDiv myDiv = new MyDive(browser);
              myDiv.Home.Click();
            }
            
            public class MyDiv : Element
            {
               public MyDiv(BrowserControl bc) : base(bc, "myDiv") {}
               public Anchor Home { get { return new Anchor(GetFirstDescendent("A"); } }
            }
            </code></example>
    </member>
    <member name="M:MAT.Web.Anchor.ToString">
      <summary>
            String representation of object
            </summary>
      <returns>Value</returns>
    </member>
    <member name="M:MAT.Web.Anchor.Verify">
      <summary>
            Indicates if the URL represented by Anchor element's <seealso cref="P:MAT.Web.Anchor.Href" /> is valid and doesn't result in a 404 page
            </summary>
      <returns>
            Returns true if URL is valid
            </returns>
    </member>
    <member name="P:MAT.Web.Anchor.Href">
      <summary>
            href associated with an Anchor element
            </summary>
    </member>
    <member name="P:MAT.Web.Anchor.IsImage">
      <summary>
            Indicates if the anchor element is an Image
            </summary>
    </member>
    <member name="P:MAT.Web.Anchor.Image">
      <summary>
            If the current anchor element is an Image, return the image
            </summary>
    </member>
    <member name="T:MAT.Web.ButtonList">
      <summary>
            This class returns a list of buttons
            </summary>
    </member>
    <member name="F:MAT.Web.ButtonList.DEFAULT_FILTER">
      <summary>
            Default Element Filter associated with Button
            </summary>
    </member>
    <member name="M:MAT.Web.ButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Gets a list of Buttons on a page
            </summary>
      <param name="bc">Browser Control used to obtain the current list of Buttons</param>
    </member>
    <member name="M:MAT.Web.ButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Gets a list of Buttons enclosed within a parent HTML element
            </summary>
      <param name="bc">Browser Control used to obtain the current list of Buttons</param>
      <param name="parentElement">Parent Element</param>
    </member>
    <member name="M:MAT.Web.ButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Gets a list of Buttons enclosed within a parent HTML element
            </summary>
      <param name="bc">Browser Control used to obtain the current list of Buttons</param>
      <param name="parentElementId">Parent Element Id</param>
    </member>
    <member name="M:MAT.Web.ButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Buttons
            </summary>
      <param name="bc">Browser Control object from which the list of Buttons is obtained</param>
      <param name="itemFilters">List of filters defining what Button elements to search for</param>
    </member>
    <member name="M:MAT.Web.ButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Buttons
            </summary>
      <param name="bc">Browser Control object from which the list of Buttons is obtained</param>
      <param name="parentElement">Parent Element from which list of Buttons matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what Button elements to search for</param>
    </member>
    <member name="M:MAT.Web.ButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates a list of Button elements
            </summary>
      <param name="bc">Browser Control object from which the list of Buttons is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of Buttons matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.ButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets a list of Buttons filtered on a list of Element Filters
            </summary>
      <param name="bc">Browser Control used to obtain the current list of Buttons</param>
      <param name="itemFilters">List of Element Filters which defines the buttons included in the list created by this class</param>
    </member>
    <member name="M:MAT.Web.ButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets a list of Buttons enclosed within a parent HTML element and filtered on a list of element filters
            </summary>
      <param name="bc">Browser Control used to obtain the current list of Buttons</param>
      <param name="parentElement">Parent Element</param>
      <param name="itemFilters">List of Element Filters which defines the buttons included in the list created by this class</param>
    </member>
    <member name="M:MAT.Web.ButtonList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
             Gets a list of Buttons enclosed within a parent HTML element and filtered on a list of element filters
            </summary>
      <param name="bc">Browser Control used to obtain the current list of Buttons</param>
      <param name="parentElementId">Parent Element Id</param>
      <param name="itemFilters">List of Element Filters which defines the buttons included in the list created by this class</param>
    </member>
    <member name="T:MAT.Web.InputList">
      <summary>
            Gets a List of Inputs ( ie TextBoxes, Buttons, RadioButtons and checkboxes)
            </summary>
    </member>
    <member name="F:MAT.Web.InputList.DEFAULT_FILTER">
      <summary>
            Default Filter associated with 
            </summary>
    </member>
    <member name="M:MAT.Web.InputList.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
    </member>
    <member name="M:MAT.Web.InputList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElement">Parent Element from which list of inputs matching a certain criteria are obtained</param>
    </member>
    <member name="M:MAT.Web.InputList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of inputs matching a certain criteria are obtained</param>
    </member>
    <member name="M:MAT.Web.InputList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="itemFilters">List of filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.InputList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElement">Parent Element from which list of inputs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.InputList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of inputs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.InputList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.InputList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of inputs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.InputList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of Input elements
            </summary>
      <param name="bc">Browser Control object from which the list of inputs is obtained</param>
      <param name="parentElement">Parent Element from which list of inputs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="T:MAT.Web.Head">
      <summary>
            Head Element for a page
            Contains Title, Base, Meta, Link and Script tags
            </summary>
    </member>
    <member name="M:MAT.Web.Head.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Create head element
            </summary>
      <param name="bc">BrowserControl</param>
    </member>
    <member name="P:MAT.Web.Head.BaseUrl">
      <summary>
            Base Tag element, which gives a common base path for all anchor elements in a page which uses relative path
            </summary>
    </member>
    <member name="P:MAT.Web.Head.MetaData">
      <summary>
            MetaData Associated with the page
            Ex: Descrption, Keywords etc
            </summary>
    </member>
    <member name="P:MAT.Web.Head.Title">
      <summary>
            Title
            </summary>
    </member>
    <member name="T:MAT.Web.BaseTag">
      <summary>
            BaseTag struct
            </summary>
    </member>
    <member name="M:MAT.Web.BaseTag.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            BaseTag
            </summary>
      <param name="bc">BrowserControl</param>
    </member>
    <member name="P:MAT.Web.BaseTag.Href">
      <summary>
            Href
            </summary>
    </member>
    <member name="P:MAT.Web.BaseTag.Target">
      <summary>
            Target
            </summary>
    </member>
    <member name="T:MAT.Web.MetaDataItem">
      <summary>
            MetaDataItem
            </summary>
    </member>
    <member name="M:MAT.Web.MetaDataItem.ToString">
      <summary>
            [Name]: [Content]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.Web.MetaDataItem.Name">
      <summary>
            Name
            </summary>
    </member>
    <member name="P:MAT.Web.MetaDataItem.Content">
      <summary>
            Content
            </summary>
    </member>
    <member name="T:MAT.Web.RobotsContent">
      <summary>
            Contents of the robot tag of a Head element
            </summary>
    </member>
    <member name="M:MAT.Web.RobotsContent.ToString">
      <summary>
            String found in the content of the META tag with name of Robots
            </summary>
      <returns>Content of Robots meta tag</returns>
    </member>
    <member name="P:MAT.Web.RobotsContent.Index">
      <summary>
            true  = index or all
            false = noindex or none
            null  = neither
            </summary>
    </member>
    <member name="P:MAT.Web.RobotsContent.Follow">
      <summary>
            true  = follow or all
            false = nofollow or none
            null  = neither
            </summary>
    </member>
    <member name="P:MAT.Web.RobotsContent.IsValid">
      <summary>
            Valid robots entries are
                all
                none
                noindex
                nofollow
                noindex, nofollow
                index, follow
                nofollow, index
                follow, noindex
                index, nofollow
                noindex, follow
                
                For more info refer to: http://www.robotstxt.org/wc/meta-user.html
            </summary>
    </member>
    <member name="P:MAT.Web.RobotsContent.All">
      <summary>
            true = all, false = none, null = neither
            </summary>
    </member>
    <member name="T:MAT.Web.MetaDataList">
      <summary>
            List of MetaData Items found in the META element of a HEAD element
            </summary>
    </member>
    <member name="M:MAT.Web.MetaDataList.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Create MetaDatg list
            </summary>
      <param name="bc">BrowserControl</param>
    </member>
    <member name="M:MAT.Web.MetaDataList.Exists(System.String)">
      <summary>
            Determines if a metadata item exists with the given name or http-equiv
            </summary>
      <param name="name">Name/Http-Equiv to test for</param>
      <returns>true/false</returns>
    </member>
    <member name="M:MAT.Web.MetaDataList.NameMatches(System.String)">
      <summary>
            Looks for any element that matches a cleaned version of the name
            </summary>
      <param name="name">Name to match</param>
      <returns>delegate</returns>
    </member>
    <member name="M:MAT.Web.MetaDataList.InitializeMetaData(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            InitializeMetaData
            </summary>
      <param name="bc">BrowserControl</param>
    </member>
    <member name="P:MAT.Web.MetaDataList.Item(System.String)">
      <summary>
            Non-case sensitive name search for metadata
            </summary>
      <param name="name">Name/Http-Equiv to test for</param>
      <returns>MetaDataItem or Null</returns>
      <exception cref="T:System.ArgumentNullException" />
      <example>
            string value myWebPage.MetaData["Description"].Content;
            </example>
    </member>
    <member name="P:MAT.Web.MetaDataList.Description">
      <summary>
            Description element
            </summary>
    </member>
    <member name="P:MAT.Web.MetaDataList.Keywords">
      <summary>
            Keywords element
            </summary>
    </member>
    <member name="P:MAT.Web.MetaDataList.Robots">
      <summary>
            Robots element
            </summary>
    </member>
    <member name="T:MAT.Web.Grid`2">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <example>
            Give this HTML
            <code>
            [TABLE id=myTable]
              [TR]
                [TD]Row 1/Col 1[/TD]
                [TD]Row 1/Col 2[/TD]
              [/TR]
              [TR]
                [TD]Row 2/Col 1[/TD]
                [TD]Row 2/Col 2[/TD]
              [/TR]
            [/TABLE]
            </code>
            The following code can read throught table easily.
            <code>
             Table myTable = new Table(browser, "myTable");
             Console.Writeline("Text in Row 2/Col 2: " + myTable[1][1].Text);
             foreach(Row row in myTable)
             {
               Console.Writeline("Column Count: " + row.Count);
               Console.Writeline("2nd column text: " + row[1].Text);
             }
            </code></example>
      <example>
            Give this HTML
            <code>
            [DIV id=myContainer]
              [DIV class=rowClass]
                [DIV class=colClassX]Row 1/Col 1[/DIV]
                [DIV class=colClassY]Row 1/Col 2[/DIV]
              [/DIV]
              [DIV class=rowClass]
                [DIV class=colClassX]Row 2/Col 1[/DIV]
                [DIV class=colClassY]Row 2/Col 2[/DIV]
              [/DIV]
            [/DIV]
            </code>
            The following code can read throught table easily.
            <code>
             ElementFilter rowFilter = new ElementFilter("DIV", new AttributeFilter("class", "rowClass"));
             ElementFilter colFilter = new ElementFilter("DIV", new AttributeFilter("class", "colClassX"), new AttributeFilter("class", "colClassY"));
             Table myTable = new Table(browser, "myContainer", rowFilter, colFilter);
             Console.Writeline("Text in Row 2/Col 2: " + myTable[1][1].Text);
             foreach(Row row in myTable)
             {
               Console.Writeline("Column Count: " + row.Count);
               Console.Writeline("2nd column text: " + row[1].Text);
             }
            </code></example>
    </member>
    <member name="M:MAT.Web.Grid`2.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter,MAT.Web.WebBrowser.ElementFilter)">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <param name="bc">BrowserControl that containers element</param>
      <param name="tableId">Id of container elemenent</param>
      <param name="rowFilter">Description of elements to be considered rows</param>
      <param name="colFilter">Description of elements to be considered columns</param>
    </member>
    <member name="M:MAT.Web.Grid`2.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter,MAT.Web.WebBrowser.ElementFilter)">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <param name="bc">BrowserControl that containers element</param>
      <param name="tableElement">Container element</param>
      <param name="rowFilter">Description of elements to be considered rows</param>
      <param name="colFilter">Description of elements to be considered columns</param>
    </member>
    <member name="M:MAT.Web.Grid`2.#ctor(MAT.Web.IElementInterface,MAT.Web.WebBrowser.ElementFilter,MAT.Web.WebBrowser.ElementFilter)">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <param name="tableElement">Container element</param>
      <param name="rowFilter">Description of elements to be considered rows</param>
      <param name="colFilter">Description of elements to be considered columns</param>
    </member>
    <member name="P:MAT.Web.Grid`2.Rows">
      <summary>
            Gets the rows.
            </summary>
      <value>The rows.</value>
    </member>
    <member name="T:MAT.Web.Table">
      <summary>
            Table class wraps standard Html Tables.
            </summary>
      <example>
            Give this HTML
            <code>
            [TABLE id=myTable]
              [TR]
                [TD]Row 1/Col 1[/TD]
                [TD]Row 1/Col 2[/TD]
              [/TR]
              [TR]
                [TD]Row 2/Col 1[/TD]
                [TD]Row 2/Col 2[/TD]
              [/TR]
            [/TABLE]
            </code>
            The following code can read throught table easily.
            <code>
             Table myTable = new Table(browser, "myTable");
             Console.Writeline("Text in Row 2/Col 2: " + myTable[1][1].Text);
             foreach(Row row in myTable)
             {
               Console.Writeline("Column Count: " + row.Count);
               Console.Writeline("2nd column text: " + row[1].Text);
             }
            </code></example>
    </member>
    <member name="M:MAT.Web.Table.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <param name="bc">BrowserControl that containers element</param>
      <param name="tableId">Id of container elemenent</param>
    </member>
    <member name="M:MAT.Web.Table.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,System.Boolean)">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <param name="bc">BrowserControl that containers element</param>
      <param name="tableId">Id of container elemenent</param>
      <param name="hasTableHeader">Whether to include the first row in the list.  
            This will move the row into a Table.HeaderRow property.</param>
    </member>
    <member name="M:MAT.Web.Table.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <param name="bc">BrowserControl that containers element</param>
      <param name="tableElement">Container element</param>
    </member>
    <member name="M:MAT.Web.Table.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,System.Boolean)">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <param name="bc">BrowserControl that containers element</param>
      <param name="tableElement">Container element</param>
      <param name="hasTableHeader">Whether to include the first row in the list.</param>
    </member>
    <member name="M:MAT.Web.Table.#ctor(MAT.Web.IElementInterface)">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <param name="tableElement">Container element</param>
    </member>
    <member name="M:MAT.Web.Table.#ctor(MAT.Web.IElementInterface,System.Boolean)">
      <summary>
            Table class can wrap standard Tables and rows or any container with row, column scenarios.
            </summary>
      <param name="tableElement">Container element</param>
      <param name="hasTableHeader">Whether to include the first row in the list.</param>
    </member>
    <member name="P:MAT.Web.Table.TableHeader">
      <summary>
            Row that acts as a table header if a table header does exists.
            </summary>
    </member>
    <member name="T:MAT.Web.GridRowBase`1">
      <summary>
            Row element used in the <see cref="T:MAT.Web.Table" /> class.
            </summary>
      <typeparam name="TCol">Element to use as a column</typeparam>
    </member>
    <member name="M:MAT.Web.GridRowBase`1.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Row element used in the <see cref="T:MAT.Web.Table" /> class.
            </summary>
      <param name="bc">The bc.</param>
      <param name="rowElement">The row element.</param>
    </member>
    <member name="P:MAT.Web.GridRowBase`1.Columns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="T:MAT.Web.GridRow">
      <summary>
            Row element used in the <see cref="T:MAT.Web.Table" /> class.
            </summary>
    </member>
    <member name="M:MAT.Web.GridRow.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Row element used in the <see cref="T:MAT.Web.Table" /> class.
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="rowElement">Row element</param>
    </member>
    <member name="T:MAT.Web.AnchorList">
      <summary>
            Gets a List of Anchor Tags ( ie &lt;A&gt; tags)
            </summary>
    </member>
    <member name="M:MAT.Web.AnchorList.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Gets a list of Anchors
            </summary>
      <param name="bc">Browser Control object from which the list of Anchors is obtained</param>
    </member>
    <member name="M:MAT.Web.AnchorList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Gets a list of Anchors
            </summary>
      <param name="bc">Browser Control object from which the list of Anchors is obtained</param>
      <param name="parentElement">Parent Element from which list of Anchors matching a certain criteria are obtained</param>
    </member>
    <member name="M:MAT.Web.AnchorList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Gets a list of Anchors
            </summary>
      <param name="bc">Browser Control object from which the list of Anchors is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of Anchors matching a certain criteria are obtained</param>
    </member>
    <member name="M:MAT.Web.AnchorList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Anchors
            </summary>
      <param name="bc">Browser Control object from which the list of Anchors is obtained</param>
      <param name="itemFilters">List of filters defining what Anchor elements to search for</param>
    </member>
    <member name="M:MAT.Web.AnchorList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Gets a list of Anchors
            </summary>
      <param name="bc">Browser Control object from which the list of Anchors is obtained</param>
      <param name="parentElement">Parent Element from which list of Anchors matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what Anchor elements to search for</param>
    </member>
    <member name="M:MAT.Web.AnchorList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Creates a list of Anchor elements
            </summary>
      <param name="bc">Browser Control object from which the list of Anchors is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of Anchors matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.AnchorList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets a list of Anchors
            </summary>
      <param name="bc">Browser Control object from which the list of Anchors is obtained</param>
      <param name="itemFilters">List of filters defining what Anchor elements to search for</param>
    </member>
    <member name="M:MAT.Web.AnchorList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets a list of Anchors
            </summary>
      <param name="bc">Browser Control object from which the list of Anchors is obtained</param>
      <param name="parentElement">Parent Element from which list of Anchors matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what Anchor elements to search for</param>
    </member>
    <member name="M:MAT.Web.AnchorList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Gets a list of Anchors
            </summary>
      <param name="bc">Browser Control object from which the list of Anchors is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of Anchors matching a certain criteria are obtained</param>
      <param name="itemFilters">List of filters defining what Anchor elements to search for</param>
    </member>
    <member name="T:MAT.Web.TextBoxList">
      <summary>
            This class gets a list of TextBoxes
            </summary>
    </member>
    <member name="F:MAT.Web.TextBoxList.DEFAULT_FILTER">
      <summary>
            Default Element Filter associated with Textbox
            </summary>
    </member>
    <member name="M:MAT.Web.TextBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
             Creates a list of TextBox elements
            </summary>
      <param name="bc">Browser Control object from which this list of textboxes is obtained</param>
    </member>
    <member name="M:MAT.Web.TextBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
             Creates a list of TextBox elements
            </summary>
      <param name="bc">Browser Control object from which this list of textboxes is obtained</param>
      <param name="itemFilters">AttributeFilter</param>
    </member>
    <member name="M:MAT.Web.TextBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
             Creates a list of TextBox elements
            </summary>
      <param name="bc">Browser Control object from which this list of textboxes is obtained</param>
      <param name="parentElement">Element to wrap</param>
    </member>
    <member name="M:MAT.Web.TextBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
             Creates a list of TextBox elements
            </summary>
      <param name="bc">Browser Control object from which this list of textboxes is obtained</param>
      <param name="parentElementId">Element to wrap</param>
    </member>
    <member name="M:MAT.Web.TextBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
             Creates a list of TextBox elements
            </summary>
      <param name="bc">Browser Control object from which this list of textboxes is obtained</param>
      <param name="parentElement">Element to wrap</param>
      <param name="itemFilters">AttributeFilter</param>
    </member>
    <member name="M:MAT.Web.TextBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
             Creates a list of TextBox elements
            </summary>
      <param name="bc">Browser Control object from which this list of textboxes is obtained</param>
      <param name="parentElementId">Id of element to wrap</param>
      <param name="itemFilters">AttributeFilter</param>
    </member>
    <member name="M:MAT.Web.TextBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of TextBox elements
            </summary>
      <param name="bc">Browser Control object from which the list of TextBoxs is obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.TextBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of TextBox elements
            </summary>
      <param name="bc">Browser Control object from which the list of TextBoxs is obtained</param>
      <param name="parentElementId">Parent Element ID from which list of TextBoxs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="M:MAT.Web.TextBoxList.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Creates a list of TextBox elements
            </summary>
      <param name="bc">Browser Control object from which the list of TextBoxs is obtained</param>
      <param name="parentElement">Parent Element from which list of TextBoxs matching a certain criteria are obtained</param>
      <param name="itemFilters">List of element filters defining what elements to search for</param>
    </member>
    <member name="T:MAT.Web.TextBox">
      <summary>
            TextBox element
            </summary>
    </member>
    <member name="M:MAT.Web.TextBox.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            TextBox element
            </summary>
      <param name="bc">BrowserControl</param>
    </member>
    <member name="M:MAT.Web.TextBox.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            TextBox element
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElement">DispTMLBaseElement to wrap</param>
    </member>
    <member name="M:MAT.Web.TextBox.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            TextBox element
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElementId">Id used to get element</param>
    </member>
    <member name="M:MAT.Web.TextBox.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            TextBox element
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="itemFilters">AttributeFilter</param>
    </member>
    <member name="M:MAT.Web.TextBox.#ctor(MAT.Web.IElementInterface)">
      <summary>
            TextBox element
            </summary>
    </member>
    <member name="M:MAT.Web.TextBox.PressEnter">
      <summary>
            Sets focus to the TextBox then sends the enter key.
            </summary>
    </member>
    <member name="P:MAT.Web.TextBox.MaxLength">
      <summary>
            Maximum number of characters allowed for a text box.
            </summary>
    </member>
    <member name="P:MAT.Web.TextBox.Size">
      <summary>
            Size of the input element
            </summary>
    </member>
    <member name="P:MAT.Web.TextBox.IsPassword">
      <summary>
            Indicates if the TextBox is of type password
            </summary>
    </member>
    <member name="T:MAT.Web.BaseElementNullException">
      <summary>
            Error message thrown if a null base element is passed into a element contructor
            </summary>
    </member>
    <member name="M:MAT.Web.BaseElementNullException.#ctor(System.String)">
      <summary>
            Error message thrown if a null base element is passed into a element contructor
            </summary>
      <param name="message">General Message</param>
    </member>
    <member name="T:MAT.Web.Element">
      <summary>
            Element object wraps a DispHTMLBaseElement with a set of basic functions defined in <see cref="T:MAT.Web.IElement" /></summary>
    </member>
    <member name="M:MAT.Web.Element.#ctor(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Wrap a DispHTMLBaseElement object with the Element features
            </summary>
      <param name="bc">Browser Control</param>
    </member>
    <member name="M:MAT.Web.Element.#ctor(MAT.Web.WebBrowser.BrowserControl,mshtml.DispHTMLBaseElement)">
      <summary>
            Wrap a DispHTMLBaseElement object with the Element features
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElement">DispHTMLBaseElement to wrap as an Element</param>
    </member>
    <member name="M:MAT.Web.Element.#ctor(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Wrap a DispHTMLBaseElement object with the Element features
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="baseElementId">Parent Id or other identifier to wrap as an Element</param>
    </member>
    <member name="M:MAT.Web.Element.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Wrap a DispHTMLBaseElement object with the Element features
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="elementFilters">ElementFilter</param>
    </member>
    <member name="M:MAT.Web.Element.#ctor(MAT.Web.WebBrowser.BrowserControl,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Wrap a DispHTMLBaseElement object with the Element features
            </summary>
      <param name="bc">BrowserControl</param>
      <param name="attributeFilters">AttributeFilter</param>
    </member>
    <member name="T:MAT.Web.WebBrowser.NativeMethods">
      <exclude />
    </member>
    <member name="T:MAT.Web.WebBrowser.NativeMethods.OLECMDF">
      <exclude />
    </member>
    <member name="T:MAT.Web.WebBrowser.NativeMethods.OLECMDID">
      <exclude />
    </member>
    <member name="T:MAT.Web.WebBrowser.NativeMethods.OLECMDEXECOPT">
      <exclude />
    </member>
    <member name="T:MAT.Web.WebBrowser.ElementFilter">
      <summary>
      </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementFilter.#ctor(System.String)">
      <summary>
            Create element filter with a list of filters needed to filter elements of a certain type
            </summary>
      <param name="tagName">
            Tag Name associated with element to be retrived. 
            Example: If DIV element needs to be retrived, TagName Parameter == "DIV"
            </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementFilter.#ctor(MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Create element filter with a list of filters needed to filter elements of a certain type
            </summary>
      <param name="attributeFilters">
            Attribute filters in Name-Value pair associated with the element to be retrived.
            Example: new AttributeFilter("ID","RadioBtn_1")
            </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementFilter.#ctor(System.String[])">
      <summary>
            Create element filter with a list of filters needed to filter elements of a certain type
            </summary>
      <param name="tagNames">
            List of TagNames needed to retrive a set of elements
            Example:If DIV, SPAN etc tags needed to be retived, use: new string[] {"div","span"}
            </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementFilter.#ctor(System.String[],MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Create element filter with a list of filters needed to filter elements of a certain type
            </summary>
      <param name="tagNames">
            List of TagNames needed to retrive a set of elements
            Example:If DIV, SPAN etc tags needed to be retived, use: new string[] {"div","span"}
            </param>
      <param name="attributeFilters">
            Attribute filters in Name-Value pair associated with the element to be retrived.
            Example: new AttributeFilter("ID","RadioBtn_1")
            </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementFilter.#ctor(System.String,System.String)">
      <summary>
            Create element filter with a list of filters needed to filter elements of a certain type
            </summary>
      <param name="tagName">
            Tag Name associated with element to be retrived. 
            Example: If DIV element needs to be retrived, TagName Parameter == "DIV"
            </param>
      <param name="innerText">Inner text enclosed within the targeted element tags</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementFilter.#ctor(System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Create element filter with a list of filters needed to filter elements of a certain type
            </summary>
      <param name="tagName">
            Tag Name associated with element to be retrived. 
            Example: If DIV element needs to be retrived, TagName Parameter == "DIV"
            </param>
      <param name="attributeFilters">
            Attribute filters in Name-Value pair associated with the element to be retrived.
            Example: new AttributeFilter("ID","RadioBtn_1")
            </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementFilter.#ctor(System.String,System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Create element filter with a list of filters needed to filter elements of a certain type
            </summary>
      <param name="tagName">Tag Name associated with element to be retrived. 
            Example: If DIV element needs to be retrived, TagName Parameter == "DIV"</param>
      <param name="innerText">Inner text enclosed within the targeted element tags</param>
      <param name="attributeFilters">
            Attribute filters in Name-Value pair associated with the element to be retrived.
            Example: new AttributeFilter("ID","RadioBtn_1")
            </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementFilter.IsMatch(mshtml.DispHTMLBaseElement)">
      <summary>
            returns true if the current element matches the attributes passed in the AttributeFilter
            </summary>
      <param name="baseElement">HTML element to match with the attributes defined in ElementFilter</param>
      <returns>Boolean to indicate result of the match</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementFilter.ConstructHashtable(MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            constructs a HashTable of Attributes from the Input AttributeFilters array
            </summary>
      <param name="AttributeFilters">
      </param>
    </member>
    <member name="T:MAT.Web.WebBrowser.AttributeFilter">
      <summary>
      </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.AttributeFilter.#ctor(System.String,System.String,MAT.Web.WebBrowser.AttributeSearchOptions)">
      <summary>
            Attribute Name-Value pair to search for in a current element
            </summary>
      <param name="attributeName">Name of the attribute. Example: "class" indicates "CSSClass"</param>
      <param name="attributeValue">Value of the attribute</param>
      <param name="searchOptions">Various search options which determines how to search for the attribute value of a HTML element </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.AttributeFilter.#ctor(System.String,System.String)">
      <summary>
             Attribute Name-Value pair to search for in a current element       
            </summary>
      <param name="attributeName">Name of the attribute. Example: "class" indicates "CSSClass"</param>
      <param name="attributeValue">Value of the attribute to match exactly with the attribute value of a HTML element</param>
    </member>
    <member name="T:MAT.Web.WebBrowser.AttributeSearchOptions">
      <summary>
            Various search options which determines how to search for the attribute value of a HTML element 
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.AttributeSearchOptions.StartsWith">
      <summary>
             Matches the attribute Value of a HTML element with the pattern passed in the attribute filter from the beginning 
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.AttributeSearchOptions.EndsWith">
      <summary>
            Matches the attribute Value of a HTML element with the pattern passed in the attribute filter from the end 
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.AttributeSearchOptions.Contains">
      <summary>
            Searches for the pattern passed in the attribute filter in the attribute Value of a HTML element
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.AttributeSearchOptions.ExactMatch">
      <summary>
            Matches the attribute Value of a HTML element exactly with the pattern passed in the attribute filter
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.AttributeSearchOptions.Regex">
      <summary>
            Matches the attribute Value of a HTML element with the regex pattern passed in the attribute Filter
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControl">
      <summary>
            Browser Control for navigating web pages.  This is a more powerful version of the .NET Web Browser control.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControl.PassportEnvironmentType">
      <summary>
            Passport Environments
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControl.BeforeNavigate2Handler">
      <summary>
            Handler for the BeforeNavigate2 event
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControl.CacheType">
      <summary>
            IE Cache types
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserControl.AUTOMATED_SCRIPT_PREFIX">
      <summary>
            ID of the span tag inserted by MAT.WEB.Browser i.e MATAutomatedScriptPrefix
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserControl.AUTOMATED_SCRIPT">
      <summary>
            ID of the script tag inserted by MAT.WEB.Browser i.e MATAutomatedScript
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserControl.browserWrapper">
      <summary>
            Browser Control at a deeper level.  Use is not recommeded.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserControl.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.CheckForPassportLogin(mshtml.IHTMLDocument3@)">
      <summary>
            Check and see if there are any forms on this page that look like passport log-in
            forms. If so fill in the information and submit.
            </summary>
      <param name="doc">DOCUMENT to review</param>
      <returns>True if attempt to log in occured</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetLoginAndPassword(System.String,System.String)">
      <summary>
            Passport login and password information.
            If Login and Password are not null then an attempt
            will be made to log in to any page with a passport
            log in area.
            </summary>
      <param name="PassportLogin">Passport Login</param>
      <param name="PassportPassword">Passport Password</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClearLoginAndPassword">
      <summary>
            Clears the login and password and removes DialogWatches for "Security Alert" and "Connect to" added by SetLoginAndPassword
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.Refresh">
      <summary>
            Refresh the page.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.Refresh(System.Boolean)">
      <summary>
            Refresh the page.
            </summary>
      <param name="UseCache">true=F5 (use cache), false=Shift-F5 (complete reload page)</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.Refresh(MAT.Web.WebBrowser.RefreshType)">
      <summary>
            Refreshes the currently loaded document.
            </summary>
      <param name="refreshType">The <see cref="T:MAT.Web.WebBrowser.RefreshType">RefreshType</see> for refreshing the document.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.WaitForNewPage">
      <summary>
            Sometimes after the navigation is complete a
            page level redirect happens or a passport log in happens in which case
            passport is logged in or wait for redirect then loop through again.  
            This shouldn't happen too many times.
            </summary>
      <returns>Status Code</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.Wait(System.Int32)">
      <summary>
            Wait for <paramref name="seconds" /> before continue.
            </summary>
      <param name="seconds">Seconds to wait</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.Wait(System.Double)">
      <summary>
            Wait for <paramref name="seconds" /> before continue.
            </summary>
      <param name="seconds">Seconds to wait</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.WaitForRefresh">
      <summary>
            Returns only when page has a complete ready state and is not busy.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClearDebugMessages">
      <summary>
            Clears messsages
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.CreateNewBrowserWindow(MAT.Web.WebBrowser.BrowserControl,System.String)">
      <summary>
            Create a new browser window based on the settings of the <paramref name="parentBrowser" />.  <paramref name="features" /> 
            can be passed to set width and height of the new window.  If <paramref name="features" /> is null then
            the <paramref name="parentBrowser" /> width and height are used.
            </summary>
      <param name="parentBrowser">BrowserControl to be used as base for new window</param>
      <param name="features">String formatted in HTML window.open format which width and height will be accessed.</param>
      <returns>BrowserControl</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClickLogOnElement(System.String,System.String,System.String)">
      <summary>
            Click on an element expecting user name and password to be filled in.
            </summary>
      <param name="element">Element to click</param>
      <param name="userName">User name to use</param>
      <param name="password">Password to use</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClickLogOnElement(mshtml.DispHTMLBaseElement,System.String,System.String)">
      <summary>
            Click on an element expecting user name and password to be filled in.
            </summary>
      <param name="element">Element to click</param>
      <param name="userName">User name to use</param>
      <param name="password">Password to use</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClickElement(System.String)">
      <summary>
            Click the element with this text.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. innerHTMLText<br />
             4. attribute with value = elementName<br />
             5. attribute with title = elementName<br />
             6. alt text
            </summary>
      <param name="elementName">ID, Name, or Text to search for</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClickElement(System.String,System.Int32)">
      <summary>
            Click the element of this tag using the following index
            </summary>
      <param name="elementTag">HTML tag name</param>
      <param name="index">Index (zero based)</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClickElement(mshtml.DispHTMLBaseElement)">
      <summary>
            Call either the onclick event for this element.
            </summary>
      <param name="element">HTMLElement</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.RightClickElement(System.String)">
      <summary>
            Right Click the element with this text.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. attribute with title = elementName<br />
             4. innerHTMLText<br />
             5. attribute with value = elementName<br /></summary>
      <param name="elementName">ID, Name, or Text to search for</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.RightClickElement(System.String,System.Int32)">
      <summary>
            Right Click the element of this tag using the following index
            </summary>
      <param name="elementTag">HTML tag name</param>
      <param name="index">Index (zero based)</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.RightClickElement(mshtml.DispHTMLBaseElement)">
      <summary>
            Call either the onclick event for this element.
            </summary>
      <param name="element">HTMLElement</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SendKeys(System.String)">
      <summary>
            Send keystrokes to the browser window using the format documented for <see cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />.
            </summary>
      <param name="keys">Keystrokes to send</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.MouseClickRight(System.Int32,System.Int32)">
      <summary>
            Post a right button up/down messages to the windows x,y coordinates
            </summary>
      <param name="x">X assuming browser windows far left, top is 0,0</param>
      <param name="y">Y assuming browser windows far left, top is 0,0</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.MouseClickLeft(System.Int32,System.Int32)">
      <summary>
            Post a left button up/down messages to the windows x,y coordinates
            </summary>
      <param name="x">X assuming browser windows far left, top is 0,0</param>
      <param name="y">Y assuming browser windows far left, top is 0,0</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetBrowserWindowHandle(System.String)">
      <summary>
            Finds a window spawned from the browser control.
            </summary>
      <param name="caption">Window to look for</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.BrowserHandle">
      <summary>
            Retrieve the window handle for the browser control for use in sending messages.
            </summary>
      <returns>Browser Window Handle</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.findPosX(mshtml.DispHTMLBaseElement)">
      <summary>
            Find the X coordinate relative to the browser window
            </summary>
      <param name="element">HTML Element</param>
      <returns>x coord</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.findPosY(mshtml.DispHTMLBaseElement)">
      <summary>
            Find the y coordinate relative to the browser
            </summary>
      <param name="element">HTMLElement</param>
      <returns>y coordinate</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DoubleClickElement(System.String)">
      <summary>
            Double Click the element with this text.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. innerHTMLText<br />
             4. attribute with value = elementName<br />
             5. attribute with title = elementName<br /></summary>
      <param name="elementName">ID, Name, or Text to search for</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DoubleClickElement(System.String,System.Int32)">
      <summary>
            Double Click the element of this tag using the following index
            </summary>
      <param name="elementTag">HTML tag name</param>
      <param name="index">Index (zero based)</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DoubleClickElement(mshtml.DispHTMLBaseElement)">
      <summary>
            Call the ondblclick event for this element.
            </summary>
      <param name="element">HTMLElement</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetTooltips">
      <summary>
            For debugging purposes this function will loop through all of the elements in all frames and
            add Tooltips with the name of the element. 
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ShowTableBorders">
      <summary>
            Turns on table borders in red 2pt. For Debugging purposes.
            </summary>
      <example>
        <code lang="C#" escaped="true">
            // Display Table borders
            browser.ShowTableBorders();
            
            // Wait for Enter
            Console.ReadLine();
            
            // Put borders back to how they were
            browser.ResetTableBorders();
            </code>
      </example>
      <seealso cref="M:MAT.Web.WebBrowser.BrowserControl.ResetTableBorders" />
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ResetTableBorders">
      <summary>
            Returns borders to pre ShowTableBorders mode.
            </summary>
      <example>
        <code lang="C#" escaped="true">
            // Display Table borders
            browser.ShowTableBorders();
            
            // Wait for Enter
            Console.ReadLine();
            
            // Put borders back to how they were
            browser.ResetTableBorders();
            </code>
      </example>
      <seealso cref="M:MAT.Web.WebBrowser.BrowserControl.ShowTableBorders" />
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.IsSelected(System.String)">
      <summary>
            Check if a radio button or check box or select option is selected
            </summary>
      <param name="elementName">ID, Name, or Text to search for</param>
      <returns>true is checked or selected</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.IsSelected(mshtml.DispHTMLBaseElement)">
      <summary>
            Check if a radio button or check box or select option is selected
            </summary>
      <param name="element">HTMLElement</param>
      <returns>true is checked or selected</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementList">
      <summary>
            Returns a list of all elements
            </summary>
      <returns>List of elements</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementList(System.String[])">
      <summary>
            Returns a list of all elements of the requested tags
            </summary>
      <param name="tagNames">List of tags to search for</param>
      <returns>List of elements</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementList(mshtml.DispHTMLDocument,System.String[])">
      <summary>
            Returns a list of all elements of the requested tags - this static method allows an alternate HTMLdoc to be specified
            </summary>
      <param name="document">DispHTMLDocument to be searched</param>
      <param name="tagNames">List of tags to search for</param>
      <returns>List of elements</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementListStandard">
      <summary>
            Returns a list of elements whose tags are "input", "a", "textarea", "button", "select", "label", or "img"
            </summary>
      <returns>List of elements</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementListContainers">
      <summary>
            Returns a list of elements whose tags are "div", "table", "span", "fieldset"
            </summary>
      <returns>List of elements</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementListByAttribute(System.String,System.String)">
      <summary>
            Find elements with matching name=value attributes
            </summary>
      <param name="attributeName">Attribute</param>
      <param name="attributeValue">Value of attribute</param>
      <returns>List of elements</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementListByText(System.String)">
      <summary>
            Find all the elements whose value attribute or innertext matches text param.
            </summary>
      <param name="text">Text to search for</param>
      <returns>List of elements</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetSelectOptions(mshtml.DispHTMLSelectElement,System.Boolean)">
      <summary>
            Get an array of OPTION elements in a given SELECT element.
            </summary>
      <param name="htmlSelection">A SELECT object</param>
      <param name="onlySelectedOptions">Return only selected items</param>
      <returns>An array of OPTION elements</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetSelectOptions(mshtml.DispHTMLSelectElement,System.Boolean,System.Boolean,System.String)">
      <summary>
            Select or Deselect items in an SELECT OPTION list by text or value
            </summary>
      <param name="htmlSelection">A SELECT object</param>
      <param name="useValue">Compare against options value attribute or text</param>
      <param name="select">Select the options<br /> False to deselect</param>
      <param name="selectItem">Items to select or deselect<br />Use null for all items</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetSelectOptions(mshtml.DispHTMLSelectElement,System.Boolean,System.Boolean,System.String[])">
      <summary>
            Select or Deselect items in an SELECT OPTION list by text or value
            </summary>
      <param name="htmlSelection">A SELECT object</param>
      <param name="useValue">Compare against options value attribute or text</param>
      <param name="select">Select the options<br /> False to deselect</param>
      <param name="selectItems">A list of items to select or deselect<br />Use null for all items</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementChildren``1(System.Object,System.String)">
      <summary>
            Returns an array of children elements of the given type.
            </summary>
      <exception cref="T:System.InvalidCastException">htmlContainer can't be cast as DispHTMLBaseElement</exception>
      <example>
        <code>
            DispHTMLTableRow[] x = GetElementChildren&lt;DispHTMLTableRow&gt;(browser.GetElement("myTableElement"), "TR");
            DispHTMLOptionElement[] x = GetElementChildren&lt;DispHTMLOptionElement&gt;(browser.GetElement("mySelectElement"), "OPTION");
            </code>
      </example>
      <typeparam name="T">A type that can cast to DispHTMLBaseElement</typeparam>
      <param name="htmlContainer">Container that has the getElementsByTagName method</param>
      <param name="childTag">Element tag to look for (not case sensitive)</param>
      <returns>Array of children objects of htmlContainer<br />Returns null if no childTags exist.</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetDescendents(System.String,System.String)">
      <summary>
            Retrieves all descendent tags of a parent
            </summary>
      <param name="htmlContainerId">Parent Id (calls GetElement)</param>
      <param name="childTag">Tag to find</param>
      <returns>List of descendent tags</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetDescendents(mshtml.DispHTMLBaseElement,System.String)">
      <summary>
            Retrieves all descendent tags of a parent
            </summary>
      <param name="htmlContainer">Parent Id</param>
      <param name="childTag">Tag to find</param>
      <returns>List of descendent tags</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetDescendents(System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Retrieves all descendent tags of a parent
            </summary>
      <param name="htmlContainerId">Parent Id</param>
      <param name="filters">List of element filters defining what tags to search for</param>
      <returns>List of descendent tags</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetDescendents(System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Retrieves all descendent tags of a parent
            </summary>
      <param name="htmlContainerId">Parent Id</param>
      <param name="filters">List of attribute filters defining what tags to search for</param>
      <returns>List of descendent tags</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetDescendents(mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Retrieves all descendent tags of a parent
            </summary>
      <param name="htmlContainer">Parent Id</param>
      <param name="filters">List of attribute filters defining what tags to search for</param>
      <returns>List of descendent tags</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetDescendents(mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Retrieves all descendent tags of a parent
            </summary>
      <param name="htmlContainer">Parent Id</param>
      <param name="filters">List of element filters defining what tags to search for</param>
      <returns>List of descendent tags</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstDescendent(System.String,System.String)">
      <summary>
            Retrieves first descendent tags of a parent
            </summary>
      <param name="htmlContainerId">Parent Id (calls GetElement)</param>
      <param name="childTag">Tag to find</param>
      <returns>First descendent of parent</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstDescendent(mshtml.DispHTMLBaseElement,System.String)">
      <summary>
            Retrieves first descendent tags of a parent
            </summary>
      <param name="htmlContainer">Parent Id</param>
      <param name="childTag">Tag to find</param>
      <returns>First descendent of parent</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstDescendent(System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Retrieves first descendent tags of a parent
            </summary>
      <param name="htmlContainerId">Parent Id</param>
      <param name="filters">List of element filters defining what tags to search for</param>
      <returns>First descendent of parent</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstDescendent(System.String,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Retrieves first descendent tags of a parent
            </summary>
      <param name="htmlContainerId">Parent Id</param>
      <param name="filters">List of attribute filters defining what tags to search for</param>
      <returns>First descendent of parent</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstDescendent(mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Retrieves first descendent tags of a parent
            </summary>
      <param name="htmlContainer">Parent Id</param>
      <param name="filters">List of attribute filters defining what tags to search for</param>
      <returns>First descendent of parent</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstDescendent(MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Retrieves first descendent tags of a parent
            </summary>
      <param name="filters">List of element filters defining what tags to search for</param>
      <returns>First descendent of parent</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstDescendent(MAT.Web.WebBrowser.AttributeFilter[])">
      <summary>
            Retrieves first descendent tags of a parent
            </summary>
      <param name="filters">List of attribute filters defining what tags to search for</param>
      <returns>First descendent of parent</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstDescendent(mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Retrieves first descendent tags of a parent
            </summary>
      <param name="htmlContainer">Parent Id</param>
      <param name="filters">List of element filters defining what tags to search for</param>
      <returns>First descendent of parent</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstAncestor(System.String,System.String)">
      <summary>
            Returns the first ancestor of the element that matches the filter list
            </summary>
      <param name="elementId">element to use (calls GetElement first)</param>
      <param name="tag">tagName of element to find</param>
      <returns>Ancestor element or null</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstAncestor(System.String,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Returns the first ancestor of the element that matches the filter list
            </summary>
      <param name="elementId">element to use (calls GetElement first)</param>
      <param name="filters">List of element filters defining what tags to search for</param>
      <returns>Ancestor element or null</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstAncestor(mshtml.DispHTMLBaseElement,System.String)">
      <summary>
            Returns the first ancestor of the element that matches the filter list
            </summary>
      <param name="element">element to review</param>
      <param name="tag">tagName of element to find</param>
      <returns>Ancestor element or null</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFirstAncestor(mshtml.DispHTMLBaseElement,MAT.Web.WebBrowser.ElementFilter[])">
      <summary>
            Returns the first ancestor of the element that matches the filter list
            </summary>
      <param name="element">element to review</param>
      <param name="filters">List of element filters defining what tags to search for</param>
      <returns>Ancestor element or null</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetCalendarDate(mshtml.DispHTMLBaseElement,System.DateTime)">
      <summary>
            Gets the date on a calendar control.
            </summary>
      <exception cref="T:System.InvalidOperationException">Calendar is readOnly.</exception>
      <param name="calendarElement">A HTML element whose behavior refers to the calendar.htc</param>
      <param name="date">
      </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetCalendarDate(System.String,System.DateTime)">
      <summary>
            Gets the date on a calendar control.
            </summary>
      <exception cref="T:System.InvalidOperationException">Calendar is readOnly.</exception>
      <param name="calendarElement">A HTML element whose behavior refers to the calendar.htc</param>
      <param name="date">
      </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetCalendarDate(mshtml.DispHTMLBaseElement)">
      <summary>
            Set the date on a calendar control.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is null</exception>
      <param name="calendarElement">A HTML element whose behavior refers to the calendar.htc</param>
      <returns>DateTime used on calendar</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetCalendarDate(System.String)">
      <summary>
            Set the date on a calendar control.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is null</exception>
      <param name="calendarElement">A HTML element whose behavior refers to the calendar.htc</param>
      <returns>DateTime used on calendar</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetText(System.String,System.String)">
      <summary>
            Sets the innerText of an element or value param of a
            input element of type text.
            </summary>
      <param name="elementName">ID, Name, Title, or Text of element</param>
      <param name="Value">Text to enter</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetText(mshtml.DispHTMLBaseElement,System.String)">
      <summary>
            Sets the innerText of an element or value param of a
            input element of type text.
            </summary>
      <param name="element">HTMLElement</param>
      <param name="Value">Text to enter</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetText(mshtml.DispHTMLBaseElement)">
      <summary>
            Retrive innerText or value attribute of element
            </summary>
      <param name="element">HTMLElement</param>
      <returns>innerText or contents of value attribute</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetText(System.String)">
      <summary>
            Retrive innerText or value attribute of element
            </summary>
      <param name="elementName">ID, Name, Title, or Text of element</param>
      <returns>innerText or contents of value attribute</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetAttribute(System.String,System.String,System.String)">
      <summary>
            Set attribute for this element
            </summary>
      <param name="elementName">ID, Name, Title, or Text of element</param>
      <param name="attributeName">Attribute</param>
      <param name="attributeValue">Value of attribute</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetAttribute(System.String,System.Int32,System.String,System.String)">
      <summary>
            Set the attribute for this element
            </summary>
      <param name="elementTag">HTML Tag name</param>
      <param name="index">Zero base index</param>
      <param name="attributeName">Attribute</param>
      <param name="attributeValue">Value of attribute</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetAttribute(mshtml.DispHTMLBaseElement,System.String,System.String)">
      <summary>
            Set the attribute for element
            </summary>
      <param name="element">HTMLElement</param>
      <param name="attributeName">Attribute</param>
      <param name="attributeValue">Value of attribute</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetAttribute(System.String,System.String)">
      <summary>
            Get attribute from an element containing this name
            </summary>
      <param name="elementName">ID, Name, Title, or Text of element</param>
      <param name="attributeName">Attribute</param>
      <returns>String; null if attribute not found</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetAttribute(mshtml.DispHTMLBaseElement,System.String)">
      <summary>
            Get attribute from this element with this name
            </summary>
      <param name="element">Element to search</param>
      <param name="attributeName">Attribute</param>
      <returns>String; null if attribute not found</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ScrollToElement(System.String)">
      <summary>
            Scroll element into view
            </summary>
      <param name="elementName">ID or Name to search for</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ScrollToElement(mshtml.DispHTMLBaseElement)">
      <summary>
            Scroll element into view
            </summary>
      <param name="element">HTMLElement</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SavePageHTML(System.String)">
      <summary>
            Quick and dirty method to save current page's HTML (ONLY - no linked images, etc.) to specified file
            Uses current instance of BC.
            </summary>
      <param name="fileName">Path/filename to save page to</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementByIdOrName(System.String)">
      <summary>
            Find element that has an ID or NAME attribute of elementName.<br />
            Will search all IDs first then NAMEs
            </summary>
      <param name="elementName">ID or Name to search for</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementByFileName(System.String)">
      <summary>
            Retrieves a links and images by its src or href attribute.  Will check for full path
            match then look for filename match.
            </summary>
      <param name="elementIdentifier">Url or filename to find in href or src</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElement(System.String,System.String)">
      <summary>
            Find the element with this text identifier within another element.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. innerHTMLText<br />
             4. attribute with value = elementName<br />
             5. attribute with title = elementName<br />
             6. alt text
            </summary>
      <param name="containerIdentifier">ID, Name, or Text to search for</param>
      <param name="childIdentifier">Id, Name or Text to search for</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElement(mshtml.DispHTMLBaseElement,System.String)">
      <summary>
            Find the element with this text identifier within another element.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. innerHTMLText<br />
             4. attribute with value = elementName<br />
             5. attribute with title = elementName<br />
             6. alt text
            </summary>
      <param name="containerElement">Container element </param>
      <param name="childIdentifier">Id, Name or Text to search for</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElement(System.String)">
      <summary>
            Find the element with this text.  Searching for name in
            the following order:<br />
             1. ID<br />
             2. Name<br />
             3. innerHTMLText<br />
             4. attribute with value = elementName<br />
             5. attribute with title = elementName<br />
             6. alt text
            </summary>
      <param name="elementIdentifier">ID, Name, or Text to search for</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementByIndex(System.String,System.Int32)">
      <summary>
            Find the element of this tag using the following index
            </summary>
      <param name="elementTag">HTML tag name</param>
      <param name="index">Index (zero based)</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementByAttribute(System.String,System.String)">
      <summary>
            Find the element that uses this attribute
            </summary>
      <param name="attributeName">Attribute</param>
      <param name="attributeValue">Value of attribute</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementByAttribute(System.String,System.String,System.String)">
      <summary>
            Find the element of the tag name with this attribute and value
            </summary>
      <param name="elementTag">HTML tag name</param>
      <param name="attributeName">Attribute</param>
      <param name="attributeValue">Value of attribute</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementByText(System.String,System.String)">
      <summary>
            Find the element whose innerText matches the content
            </summary>
      <param name="elementTag">HTML tag name</param>
      <param name="content">Text to match</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementByText(System.String,System.String,System.Boolean)">
      <summary>
            Find the element whose innerText matches the content
            </summary>
      <param name="elementTag">HTML tag name</param>
      <param name="content">Text to match</param>
      <param name="exactMatch">If false ignores whitespace and urldecodes before mathcing</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementByText(System.String)">
      <summary>
            Find the element whose innerText matches the content
            </summary>
      <param name="content">Text to match</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetElementByText(System.String,System.Boolean)">
      <summary>
            Find the element whose innerText matches the content
            </summary>
      <param name="content">Text to match</param>
      <param name="exactMatch">If false ignores whitespace and urldecodes before mathcing</param>
      <returns>HTMLElement</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.FireEvent(System.String,System.String)">
      <summary>
            Fires an event on the element such as "onclick" or "onmouseover"
            </summary>
      <param name="elementName">ID, Name, or text value of element to use</param>
      <param name="eventName">Name of event to fire</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.FireEvent(mshtml.DispHTMLBaseElement,System.String)">
      <summary>
            Fires an event on the element such as "onclick" or "onmouseover"
            </summary>
      <param name="element">HTMLElement</param>
      <param name="eventName">Name of event to fire</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.FireEvent(System.String,System.String,System.Double)">
      <summary>
            Fires an event on the element such as "onclick" or "onmouseover"
            </summary>
      <param name="elementName">ID, Name, or text value of element to use</param>
      <param name="eventName">Name of event to fire</param>
      <param name="waitTime">Time to wait after firing event (i.e. Hover Time)</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.FireEvent(mshtml.DispHTMLBaseElement,System.String,System.Double)">
      <summary>
            Fires an event on the element such as "onclick" or "onmouseover"
            </summary>
      <param name="element">HTMLElement</param>
      <param name="eventName">Name of event to fire</param>
      <param name="waitTime">Time to wait after firing event (i.e. Hover Time)</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.FireEvent(mshtml.DispHTMLBaseElement,System.String,mshtml.IHTMLEventObj)">
      <summary>
            Fires an event on the element such as "onclick" or "onmouseover"
            </summary>
      <param name="element">HTMLElement</param>
      <param name="eventName">Name of event to fire</param>
      <param name="eventObj">Event object containing information like button state</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DocumentHasJQuery">
      <summary>
            Checks to see if the current document has a jQuery object in its namespace
            </summary>
      <returns>
        <c>True</c> if jQuery is present; otherwise, false.</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.IsElementVisible(System.String)">
      <summary>
            Determines whether the specified element is visible.
            </summary>
      <param name="elementIdentifier">The element to check</param>
      <returns>
        <c>true</c> if the element is visible; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.IsElementVisible(mshtml.DispHTMLBaseElement)">
      <summary>
            Determines whether the specified element is visible.
            </summary>
      <param name="element">The element to check</param>
      <returns>
        <c>true</c> if the element is visible; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetStyleRules">
      <summary>
            Returns all the rules defined by all style sheets
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClearDialogHistory">
      <summary>
            Clears the current dialog history list
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InvokeScript(System.String)">
      <summary>
            Executes an Active Scripting function defined in the page
            </summary>
      <param name="scriptName">The name of the script method to invoke</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ExecuteJavaScript(System.String)">
      <summary>
            Execute free form javascript commands (call functions).
            </summary>
      <param name="script">Script to execute</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InvokeScript(System.String,System.Object[])">
      <summary>
            Execute free form script commands (call functions).
            </summary>
      <param name="script">Script to execute</param>
      <param name="args">
      </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.NavigateTo(System.String)">
      <summary>
            Navigate to web page
            </summary>
      <param name="url">Full path to web page</param>
      <returns>status code (200 = OK)</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.NavigateTo(System.String,MAT.Web.WebBrowser.NavigateOptions)">
      <summary>
            Navigate to web page
            </summary>
      <param name="url">Full path to web page</param>
      <param name="options">Navigation Options</param>
      <returns>status code (200 = OK)</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.NavigateTo(System.String,MAT.Web.WebBrowser.NavigateOptions,System.String)">
      <summary>
            Navigate to web page
            </summary>
      <param name="url">Full path to web page</param>
      <param name="options">Navigation Options</param>
      <param name="targetFrame">Target frame (_self, _top, etc...)</param>
      <returns>status code (200 = OK)</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.NavigateTo(System.String,MAT.Web.WebBrowser.NavigateOptions,System.String,System.String,System.String)">
      <summary>
            This function takes an AxSHDocVw.browser and a Url string and navigates the 
            browser to that Url.  It returns the web status code of the navigation.  
            </summary>
      <param name="Url">Full path to web page</param>
      <param name="options">Navigation Options</param>
      <param name="targetFrame">Target frame (_self, _top, etc...)</param>
      <param name="postData">Data formatted for post as byte array.  headers must also contain Content-Type: application/x-www-form-urlencoded</param>
      <param name="headers">Line separated headers (User-Agent: xxx)</param>
      <returns>status code (200 = OK)</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFramesList">
      <summary>
            Retrieves an array of all frames (<see cref="T:mshtml.DispHTMLWindow2" />) and sub frames of the
            current set frame (<see cref="M:MAT.Web.WebBrowser.BrowserControl.SetFrame(System.Int32)" />) or page.
            </summary>
      <overloads>
        <summary>
            Retrieves an array of all frames (<see cref="T:mshtml.DispHTMLWindow2" />) and sub frames of the
            current set frame (<see cref="M:MAT.Web.WebBrowser.BrowserControl.SetFrame(System.Int32)" />) or page.
            </summary>
        <remarks>
            Sometimes a frame will be missing because of security reasons and not possible to add to the list.
            <br />
            Also just calling browser.GetFramesList() will display in the debug window a list of results.
            </remarks>
      </overloads>
      <remarks>
            Sometimes a frame will be missing because of security reasons and not possible to add to the list.
            <br />
            Also just calling browser.GetFramesList() will display in the debug window a list of results.
            </remarks>
      <returns>Array of window objects.</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFramesList(mshtml.DispHTMLDocument)">
      <summary>
            Retrieves an array of all frames (<see cref="T:mshtml.DispHTMLWindow2" />) and sub frames on the page of
            the <paramref name="doc" />.
            </summary>
      <remarks>
            Sometimes a frame will be missing because of security reasons and not possible to add to the list.
            <br />
            Also just calling browser.GetFramesList() will display in the debug window a list of results.
            </remarks>
      <param name="doc">Document to seach for frames.</param>
      <returns>Array of window objects.</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFrameIndexHistory(mshtml.DispHTMLWindow2)">
      <summary>
             Returns an int[] which contains the index(es) of all parent windows, ordered from top-most down to the
             targeted window. For example, {1,0,0} would indicate this window is the first child window of the first
             child window of the second child window of the browser window.
            
             NOTE: The index(es) returned are NOT compatible with BrowserControl.SetFrame() methods, as SetFrame()
                   uses the "flattened" indexing system that is returned from GetFramesList()!!!!
             
             </summary>
      <param name="targetWindow">DispHTMLWindow2 to have its parentage determined</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetFrame(System.Int32)">
      <summary>
            Sets the frame that all other commands will be performed against.
            </summary>
      <param name="frameNamesOrIndex">Index of the frame</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetFrame(System.String)">
      <summary>
            Sets the frame that all other commands will be performed against.
            </summary>
      <param name="frameNamesOrIndex">Name of the frame</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetFrame(System.Object[])">
      <summary>
            Sets the frame that all other commands will be performed against.
            </summary>
      <param name="frameNamesOrIndexes">Name or index of the frame (for sub frames add to list)</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetFrame2(System.Object[])">
      <summary>
            Sets the frame that all other commands will be performed against.
            This differs from SetFrame() in that SetFrame() will not allow interaction with subnested
            frames - SetFrame2() is meant to be used in conjunction with GetFramesList() - these 2 methods
            share the same indexing interpretation.
            </summary>
      <param name="frameNamesOrIndexes">Name or index of the frame (for sub frames add to list)</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClearFrame">
      <summary>
            Removes any frame parameters and resets to default root page.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ShowHTML(System.String)">
      <summary>
            Displays the HTML/XML in the browser window replacing any current
            code.
            </summary>
      <param name="html">IE compliant content to display</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetMetaElementContent(System.String)">
      <summary>
            Retrieves the meta element of give name
            </summary>
      <param name="content">Name or http-equiv element</param>
      <returns>content value</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetFullUrl(System.String)">
      <summary>
      </summary>
      <param name="url">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClearDialogWatch">
      <summary>
            Removes any watches added using <see cref="M:MAT.Web.WebBrowser.BrowserControl.AddDialogWatch(System.String,System.String)" /></summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.RemoveDialogWatch(System.String)">
      <summary>
            Remove a dialog from the list of watches
            </summary>
      <param name="caption">Caption of the dialog to remove</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.AddDialogWatch(System.String,System.String)">
      <summary>
            Some dialogs that appear in IE do not have events connected to them to allow handling.  For these you
            need to predict the message may appear in your code then add them to the list and which button needs to
            be clicked when they appear.  The dialogs will be added in the dialog history with the type of CustomDialog.
            </summary>
      <example>
            Trapping an ActiveX download install dialog and suggesting not to install.
            <code>
            	browser.ClearDialogHistory();
            	browser.AddDialogWatch("Security Warning", "Don't Install");
            	browser.NavigateTo(txtUrl.Text);
            	Assert.AreEqual(browser.DialogHistory.Length, 1, "Expected 1 dialogs after navigating");
            	Assert.AreEqual(browser.DialogHistory[0].DialogType, HTMLDialogType.Custom, "Install ActiveX Dialog did not appear");
            </code></example>
      <param name="caption">Window caption to search for.<br />  Don't include "Internet Explorer - " if it is in the name.<br />This is a regular expression match.</param>
      <param name="button">Text of the button to click.  Usually "Ok", "Yes", etc...<br />  This is case sensitive.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClickDownloadElement(System.String,System.String)">
      <summary>
            Clicks an element assuming it will cause a download dialog.  That dialog is automated to 
            save the file to the path or path and file name this is chosen.
            </summary>
      <param name="id">Identifier for element to click (same as ClickElement)</param>
      <param name="path">Path to save file or path and filename</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClickDownloadElement(mshtml.DispHTMLBaseElement,System.String)">
      <summary>
            Clicks an element assuming it will cause a download dialog.  That dialog is automated to 
            save the file to the path or path and file name this is chosen.
            </summary>
      <param name="el">Element to click</param>
      <param name="path">Path to save file or path and filename</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.SetDownloadPath(System.String,System.Boolean)">
      <summary>
             Set command to happen if a file download dialog ocurrs.&lt;br/&gt;
             &lt;br/&gt;
             Save any file to this path = SetDownloadPath("C:\\mypath\\", false);&lt;br/&gt;
             Cancel any downloads = SetDownloadPath(null, true);&lt;br/&gt;
             Stop listening for download = SetDownloadPath(null, false);&lt;br/&gt;
            </summary>
      <param name="path">Path to save file or path and filename</param>
      <param name="forceCancel">Whether to hit Cancel instead of save.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClearDownloadPath">
      <summary>
            Clears any settings created by SetDownloadPath
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GoHome">
      <summary>
            Navigates the browser to the default homepage, which is set in the internet options
            control panel applet.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GoBack">
      <summary>
            Navigates the browser to the previous resource that was visited.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GoForward">
      <summary>
            Navigates the browser to the next resource that was visited.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.Stop">
      <summary>
            Stops any operation the browser is currently performing.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.CloseWindow">
      <summary>
            This call override window.close within the HTML page
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.#ctor">
      <summary>
            Creates a control for calling to a web page following its redirects
            and returning status code, status text, title, and body.
            <br />
            Can also log in to passport log in pages given a login and password
            </summary>
      <example>Here is a sample usage of the <see cref="T:MAT.Web.WebBrowser.BrowserControl" /> and <see cref="T:MAT.Web.WebBrowser.BrowserForm" /> calling
            a web page and opening a new window.
            <code lang="C#" escaped="true">
            using Microsoft.MSCOM.IEAutomation;
            
            private static void TestPage()
            {
            	BrowserControl browser = null;
            	bool isVisible = true;
            	
            	if(isVisible)
            	{
            	  BrowserForm browserForm = new BrowserForm();
            	  browser = browserForm.browser;
            	  browserForm.Show();
            	}
            	else
            	{
            	  browser = new BrowserControl();
            	}
            	
            	browser.FormSize = BrowserSize.Medium;
            	
            	browser.NewWindow += new BrowserControlNewWindowEventHandler(OnNewWindow);
            	
            	browser.NavigateTo("http://www.msn.com");
            	browser.ClickElement("Get enhanced security for your e-mail");
            	
            }
            
            private static void OnNewWindow(object sender, BrowserControlNewWindowEventArgs e)
            {
            	System.Diagnostics.Debug.WriteLine("Link opened " + e.Browser.Url);
            	e.Browser.CloseWindow();
            }
            </code></example>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.WindowAlert(System.String)">
      <summary>
            This call overrides the window.alert within the HTML page
            </summary>
      <param name="msg">Message to display</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.WindowPrompt(System.String,System.String)">
      <summary>
            This call overrides the window.prompt within the HTML page
            </summary>
      <param name="msg">Question to display</param>
      <param name="defaultText">Default input</param>
      <returns>New input</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.WindowOnError(System.String,System.String,System.Int32)">
      <summary>
            The call overrides the window.onerror event within the HTML page
            </summary>
      <param name="description">Description of error</param>
      <param name="url">Page error ocurred on</param>
      <param name="line">Line in script tag error appeared at</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.WindowOpen(System.String,System.String,System.String,System.Boolean)">
      <summary>
            The call overrides the window.open within the HTML page
            </summary>
      <param name="url">Url to open</param>
      <param name="name">Target</param>
      <param name="features">Window attributes (ie size, scrollbars, etc...)</param>
      <param name="replace">Links inside appear inside</param>
      <returns>IHTMLWindow</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.WindowOpenModalDialog(System.String,System.Object,System.String)">
      <summary>
            The call overrides the window.openModal within the HTML page
            </summary>
      <param name="url">Url to open</param>
      <param name="args">Window arguments to be passed to new window</param>
      <param name="features">Window attributes (ie size, scrollbars, etc...)</param>
      <returns>IHTMLWindow</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.WindowOpenModelessDialog(System.String,System.Object,System.String)">
      <summary>
            The call overrides the window.openModeless within the HTML page
            </summary>
      <param name="url">Url to open</param>
      <param name="args">Window arguments to be passed to new window</param>
      <param name="features">Window attributes (ie size, scrollbars, etc...)</param>
      <returns>IHTMLWindow</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.WindowConfirm(System.String)">
      <summary>
            The call overrides the window.confirm within the HTML page
            </summary>
      <param name="msg">Question to display</param>
      <returns>True (OK)/False (Cancel, Close window)</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DLInstalled(System.String)">
      <summary>
            Determines if a IE ActiveX control is installed.
            </summary>
      <seealso name="RemoveDL" />
      <param name="ControlName">Friendly name of the control to check</param>
      <returns>True if installed, false if not discovered</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.RemoveDL(System.String)">
      <summary>
            Automates the removal of a control from the IE’s Downloaded Program Files folder.
            </summary>
      <seealso name="DLInstalled" />
      <param name="ControlName">Friendly name of the control to remove</param>
      <exception cref="T:System.ArgumentNullException">Control Name must be a friendly name of an installed control</exception>
      <exception cref="T:System.ArgumentException">The control is not installed.</exception>
      <exception cref="T:System.ApplicationException">Control is in use.  Please close all IE windows that might be using the control and try again.</exception>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.RemoveControlByName(System.String,System.String,System.String,System.Boolean,System.UInt32)">
      <summary>
            Removes the registry entries and all of the files associated with the specified control.
            </summary>
      <param name="filePath">value that contains the full path to the main file (usually the .ocx file) of the control.</param>
      <param name="classID">value that contains the class identifier (CLSID) or distribution unit name associated with the control.</param>
      <param name="typeLibraryId">value that contains the type library CLSID of the control. This can be set to NULL.</param>
      <param name="forceRemove">value that specifies the method used to remove the control. If set to FALSE, the removal routine first checks to see if it is safe to remove the control. If set to TRUE, the control is removed, regardless of the removal status, unless there is a sharing violation. This value only applies to the control file itself.</param>
      <param name="isDistributionUnit">value that specifies if this control is part of a distribution unit. This must be set to TRUE if it is part of a distribution unit, or FALSE otherwise.</param>
      <returns>S_OK / S_FALSE: A minor error occurred, but not serious enough to abort the operation. The control has been uninstalled successfully.</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.CapturePage">
      <summary>
            Captures the current web page
            </summary>
      <overloads>
        <summary>
            Captures the current web page
            </summary>
        <example>
            Capture the full image of a page (scrolls down the page) and save to the harddrive.
            <code>
            Image pageCapture = browser.CapturePage();
            pageCapture.Save("C:\\test.bmp", ImageFormat.Bmp);
            </code></example>
        <example>
            Capture top section of a page
            <code>
            Image pageCapture = browser.CapturePage(new Rectangle(0,0, 50, 50), false);
            pageCapture.Save("C:\\test.bmp", ImageFormat.Bmp);
            </code></example>
      </overloads>
      <example>
            Capture the full image of a page (scrolls down the page) and save to the harddrive.
            <code>
            Image pageCapture = browser.CapturePage();
            pageCapture.Save("C:\\test.bmp", ImageFormat.Bmp);
            </code></example>
      <returns>Image object of the requested capture</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.CapturePage(System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Captures the current web page
            </summary>
      <example>
            Capture top section of a page
            <code>
            Image pageCapture = browser.CapturePage(new Rectangle(0,0, 50, 50), false);
            pageCapture.Save("C:\\test.bmp", ImageFormat.Bmp);
            </code></example>
      <param name="captureRegion">Coordinates to capture on the page.</param>
      <param name="scrollDownPage">Scroll down the page when capturing (this is better disabled on framesets)</param>
      <returns>Image object of the requested capture</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.scrollDown(System.Int32,System.Int32)">
      <summary>
            Scroll the page down one page.
            </summary>
      <returns>Number of pixels scrolled</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.AddToScreenShot(System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Copies visible image to a destination bitmap
            </summary>
      <param name="CaptureRectangle">Size within browser control to capture</param>
      <param name="CaptureDestinationY">Starting Y postion for image in destination bitmap</param>
      <param name="CaptureDestinationX">Starting X postion for image in destination bitmap</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
      <summary>
            BitBlit it a core GDI call which can copy an image from one hdc to another
            </summary>
      <param name="hdcDest">
      </param>
      <param name="nXDest">
      </param>
      <param name="nYDest">
      </param>
      <param name="nWidth">
      </param>
      <param name="nHeight">
      </param>
      <param name="hdcSrc">
      </param>
      <param name="nXSrc">
      </param>
      <param name="nYSrc">
      </param>
      <param name="dwRop">
      </param>
      <returns>true/false</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InitializeBrowser">
      <summary>
            Disposes current static browser control then initializes it
            using defaulting to visible, 800x600
            </summary>
      <returns>Static BrowserControl</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InitializeBrowser(System.Boolean)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="showBrowser">if set to <c>true</c> [show browser].</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InitializeBrowser(System.Boolean,System.Int32,System.Int32)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="showBrowser">if set to <c>true</c> browser is visible.</param>
      <param name="width">The width in pixels.</param>
      <param name="height">The height in pixels.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InitializeBrowser(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="newBrowser">The new browser.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InitializeBrowser(MAT.Web.WebBrowser.BrowserControl,System.Boolean)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="newBrowser">The new browser.</param>
      <param name="showBrowser">if set to <c>true</c> browser is visible.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InitializeBrowser(MAT.Web.WebBrowser.BrowserControl,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="newBrowser">The new browser.</param>
      <param name="showBrowser">if set to <c>true</c> browser is visible.</param>
      <param name="width">The width in pixels.</param>
      <param name="height">The height in pixels.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DisposeBrowser(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Disposes the browser.
            </summary>
      <param name="newBrowser">The new browser.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DeleteCookies">
      <summary>
            Delete all cookies stored for IE
            </summary>
      <remarks>You can find the cookie files at C:\Documents and Settings\{localUser}\Cookies</remarks>
      <overloads>
        <summary>
            Delete all cookies stored for IE
            </summary>
        <remarks>You can find the cookie files at C:\Documents and Settings\{localUser}\Cookies</remarks>
        <example>
            Deleting passport cookies:
            <code lang="C#" escaped="true">
            browser.DeleteCookies("passport-ppe");
            </code>
            Deleting all cookies:
            <code lang="C#" escaped="true">
            browser.DeleteCookies();
            </code></example>
      </overloads>
      <example>
            Deleting all cookies:
            <code lang="C#" escaped="true">
            browser.DeleteCookies();
            </code></example>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DeleteCookies(System.String)">
      <summary>
            Delete all cookies for <paramref name="host" />.
            </summary>
      <remarks>You can find the cookie files at C:\Documents and Settings\{localUser}\Cookies</remarks>
      <example>
            Deleting passport cookies:
            <code lang="C#" escaped="true">
            browser.DeleteCookies("passport-ppe");
            </code></example>
      <param name="host">Host site cookie is stored at. (this is usually as simple as 'google' or 'microsoft'</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DeleteCacheItems(MAT.Web.WebBrowser.BrowserControl.CacheType)">
      <summary>
            Deletes the IE cache items of given type
            </summary>
      <param name="deleteType">CacheType to delete</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DeleteCacheItemByName(System.String)">
      <summary>
            Deletes a specific cache item from string name
            </summary>
      <param name="cacheItemName">Name</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.GetCacheItems(MAT.Web.WebBrowser.BrowserControl.CacheType)">
      <summary>
            Retrieves a list of all of the cache items for cacheType
            </summary>
      <param name="cacheType">
      </param>
      <returns>StringCollection of the cache names</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.DeleteCacheGroups">
      <summary>
            Delete all cache groups
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.InsertDialogCaptureCode(mshtml.DispHTMLDocument)">
      <summary>
            Window events confirm, alert, prompt, showModalDialog, open, showModelessDialog, close, onerror, dialogArguments,
            and setTimeout are normally overridden by MAT.  Sometimes dynamic HTML can remove those overrides and the test automator
            will need to directly call this code.
            </summary>
      <example>Browser.InsertDialogCaptureCode(Browser.Document);</example>
      <param name="doc">
      </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.CleanContent(System.String)">
      <summary>
            Cleans the string passed into this function by removing spaces
            </summary>
      <param name="content">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControl.ClearScriptErrors">
      <summary>
            Clears any stored error messages for Script and Unknown Dialogs.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.AttemptedPassportLogin">
      <summary>
            True if a log in to passport was tried.  If something failed a message
            will exist in the PassportMessage property.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.PassportMessage">
      <summary>
            If passport failed to log in a passport message will exist here.
            null if attempt was sucessful or did not occur (check AttemptedPassportLogin)
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.PassportEnvironment">
      <summary>
            Gets and Sets the current PassportEnvironment for this machine
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.IsReady">
      <summary>
            Tests whether 
            1. There are any calls to beforeNavigate that haven't recieved a endNavigate
            2. ReadyState = Complete or Interactive
            3. Busy = false
            4. All IFrames and Framesets follow 1-3
            </summary>
      <remarks>This is for information purposes.  Normally you want to call WaitForRefresh or 
            WaitForNewPage (refresh with Passport check) which will return only when IsReady is true
            or a timeout of TimeOutThreshhold
            </remarks>
      <seealso cref="M:MAT.Web.WebBrowser.BrowserControl.WaitForRefresh" />
      <seealso cref="M:MAT.Web.WebBrowser.BrowserControl.WaitForNewPage" />
      <seealso cref="P:MAT.Web.WebBrowser.BrowserControl.TimeOutThreshhold" />
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.DebugMessages">
      <summary>
            A collection of messages from the browser.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.DisplayDebugMessages">
      <summary>
            Whether to display in the debug trace internal message of category "BROWSER_CONTROL"
            </summary>
      <remarks>Messages will still be available through DebugMessages property.</remarks>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.ThrowIfGetIsNull">
      <summary>
            Throws a ArgumentNull exception of the GetElement cannot find the element.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.DialogHistory">
      <summary>
            A collection of Dialog events that have ocurred.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.Cookie">
      <summary>
            Gets or sets the HTML cookies associated with this document
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.StayOnTop">
      <summary>
            Gets or sets a value indicating whether the form is forced to stay on top.
            </summary>
      <value>
        <c>true</c> if forced stay on top; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.DefaultWait">
      <summary>
            Amount of time (in sec) to wait added to WaitForNewPage();
            Max time is 60 seconds.  Min is 0.1 (default).
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.NavigateRetries">
      <summary>
            This number (between 0 and 10) indicates the numbers of navigation retries that will be made
            if the page fails with a 404 or 500 error.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.Document">
      <summary>
            Returns the current DOM document object for the current frame.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.CurrentFrame">
      <summary>
            Currently selected frame window or main parent window if no frame is selected.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.Url">
      <summary>
            Gets or set the Url.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.Title">
      <summary>
            Retrieves the name of the resource that Microsoft Internet Explorer is currently displaying.
            </summary>
      <remarks>
            If the resource is an HTML page on the World Wide Web, the name is the title of that page. If the resource is a 
            folder or file on the network or local computer, the name is the full path of the folder or file in 
            Universal Naming Convention (UNC) format.
            </remarks>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.IgnoreFrames">
      <summary>
            Determines whether to wait for frames to also load.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.ShowWebsiteInDesigner">
      <summary>
            Gets or the sets the ShowWebsiteInDesigner
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.Data">
      <summary>
            Used for passing data from browser to code
            </summary>
      <example>
            Passing a simple string through Data
            <code>
            browser.ExecuteJavaScript("window.external.Data = 'A simple string'");
            Debug.WriteLine(browser.Data);
            </code></example>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.dialogArguments">
      <summary>
            This overload of the dialogArguments helps pass information to and from dialogs using 
            window.open, window.showModalDialog, and window.showModelessDialog.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.returnValue">
      <summary>
            This overload of the window.returnValue helps pass information to and from dialogs using 
            window.open, window.showModalDialog, and window.showModelessDialog.
            </summary>
      <seealso cref="P:MAT.Web.WebBrowser.BrowserControl.dialogArguments" />
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.OverrideDialogs">
      <summary>
            If OverrideDialogs is set then the BrowserControl will handle all popup windows and dialogs.<br />
            For IE Automation this property should be set to true.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.Body">
      <summary>
            HTML Body of the page.  NULL if page is not loaded.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.Head">
      <summary>
            Head element for this frame
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.AcceptLanguage">
      <summary>
            Accept-Language headers to use when browsing.  Uses IE browser default if null.
            </summary>
      <remarks>
            In IE6 or earlier Accept-Language header only works on the first NavigateTo().  The browser
            won't pick up the new one until its fully reset.
            
            In IE7 the accept language must be set before the browser is instantiated by using the 
            static BrowserControl.AcceptLanguage2
            
            <code>
                string oldVal = BrowserControl.AcceptLanguage
                BrowserControl.AcceptLanguage2 = "fr-fr";
                IntializeBrowser(true, 1024, 768);
                browser.NavigateTo("http://www.microsoft.com");
                BrowserControl.AcceptLanguage2 = oldVal;
            </code></remarks>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.UserAgent">
      <summary>
            User agent string to use when browsing.  Uses IE browser default if null.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.TimeToLoad">
      <summary>
            The time the last page took to load.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.StatusText">
      <summary>
            Status information of last navigation
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.StatusCode">
      <summary>
            Status Code of last navigation
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.IsRTL">
      <summary>
            Get whether the current document frame is set as a Right To Left language.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.HasHorizontalScroll">
      <summary>
            Get whether the current document frame has a horizontal scroll bar
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.HasVerticalScroll">
      <summary>
            Get whether the current document frame has a vertical scroll bar
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.Silent">
      <summary>
            Gets or set the Silent.  When silent is true script errors will be ignored.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.Visible">
      <summary>
            Determines whether the browser is visible or hidden.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.TimeOutThreshhold">
      <summary>
            Number of seconds to wait before timing out.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.ThrowOnError">
      <summary>
            Will an error be thrown on the control if a script error occurs on the page.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.ScrollBarsVisible">
      <summary>
            Gets or sets whether vertical and horizontal scrollbars display for the web browser control. Setting this to true
            will mean that scrollbars appear only when the HTML content does not fit the screen - the scrollbars are not forced.Changes to
            this property will not be reflected at design time.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.FormSize">
      <summary>
            Size of the browser window
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.AcceptLanguage2">
      <summary>
            Accept-Language headers to use when browsing.  Uses IE browser default if null.
            </summary>
      <remarks>
            In IE6 or earlier Accept-Language header only works on the first NavigateTo().  The browser
            won't pick up the new one until its fully reset.
            
            In IE7 the accept language must be set before the browser is instantiated by using the 
            static BrowserControl.AcceptLanguage2
            
            <code>
                string oldVal = BrowserControl.AcceptLanguage2
                BrowserControl.AcceptLanguage2 = "fr-fr";
                IntializeBrowser(true, 1024, 768);
                browser.NavigateTo("http://www.microsoft.com");
                BrowserControl.AcceptLanguage2 = oldVal;
            </code></remarks>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.LastScriptException">
      <summary>
            Last script error that occured since last navigation.
            </summary>
      <remarks>
            Normally a ClickElement or similar event will raise a script exception
            if ThrownOnErrors is set to true.
            </remarks>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControl.LastUnknownDialogException">
      <summary>
            Last unknown dialog exception that occurred
            </summary>
      <remarks>
            A UnknownDialogException only ocurrs if the dialog event arguments were set
            in the test case code.  In which case the parent function such as ClickElement
            will catch a UnknownDialogException.
            </remarks>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.Navigating">
      <summary>
            Occurs before the System.Windows.Forms.WebBrowser control navigates to a new document
            </summary>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.StatusTextChanged">
      <summary>
            Occurs when the System.Windows.Forms.WebBrowser.StatusText property value changes.
            </summary>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.TitleChanged">
      <summary>
            Occurs when the System.Windows.Forms.WebBrowser.Title property value changes.
            </summary>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.BeforeNavigate2">
      <summary>
            Occurs before navigate.
            </summary>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.ConfirmDialog">
      <summary>
            Event for the Confirm Dialog
            </summary>
      <example>Attaching to the confirm dialog
            <code>
            browser.ConfirmDialog += new BrowserControlConfirmDialogEventHandler(OnConfirmDialog);
            </code>
            Then in create a function to handle the dialog
            <code>
            private static void OnConfirmDialog(object sender, BrowserControlConfirmDialogEventArgs e)
            {
            	m_LastDialog = HTMLDialogType.Confirm;
            
            	switch(e.Message)
            	{
            		case "Press OK or Cancel" :
            			LogInfo("Confirmation Dialog found with message '{0}'", e.Message);
            			LogInfo("Responded with 'OK' for dialog");
            			e.Response = true; // Click OK
            			break;
            
            		default:
            			LogError("Unexpected Confirmation Dialog found with message '{0}'", e.Message);
            			throw new UnknownDialogException(HTMLDialogType.Confirm, "Message: " + e.Message);
            	}
            }
            </code></example>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.PromptDialog">
      <summary>
            Event for the Prompt Dialog
            <seealso cref="T:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventHandler" /></summary>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.AlertDialog">
      <summary>
            Event for the Alert Dialog
            <seealso cref="T:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventHandler" /></summary>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.OpenDialog">
      <summary>
            Event for the Open Dialog
            <seealso cref="T:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventHandler" /></summary>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.OpenModalDialog">
      <summary>
            Event for the Open Modal Dialog
            <seealso cref="T:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventHandler" /></summary>
    </member>
    <member name="E:MAT.Web.WebBrowser.BrowserControl.OpenModelessDialog">
      <summary>
            Event for the Open Modeles Dialog
            <seealso cref="T:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventHandler" /></summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.Prompt">
      <summary>
            Mock Prompt Dialog
            </summary>
      <exclude />
    </member>
    <member name="F:MAT.Web.WebBrowser.Prompt.Message">
      <summary>
            Question
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.Prompt.btnCancel">
      <summary>
            Cancel Button
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.Prompt.btnOk">
      <summary>
            OK Button
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.Prompt.txtInput">
      <summary>
            Input text box
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.Prompt.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.Prompt.#ctor">
      <summary>
            Mock Prompt Dialog
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.Prompt.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.Prompt.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserTestCases">
      <summary>
            Simple inheritence to give a browser object to the unit tests
            </summary>
      <example>
        <code>
            [TestClass]
            public class WebBrowser : BrowserTestCasesExe
            {
               [TestInitialize()]
               public void MyTestInitialize() { InitializeBrowser(true, 1024, 768); }
               
               [TestCleanup()]
               public void MyTestCleanup() { DisposeBrowser(); }
               
               [TestMethod()]
               public void SimpleTest()
               {
                 browser.NavigateTo("http://www.microsoft.com");
                 Assert.IsTrue(browser.StatusCode == 200);
               }
            </code>
      </example>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.InitializeBrowser">
      <summary>
            Disposes current static browser control then initializes it
            using defaulting to visible, 800x600
            </summary>
      <returns>Static BrowserControl</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.InitializeBrowser(System.Boolean)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="showBrowser">if set to <c>true</c> [show browser].</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.InitializeBrowser(System.Boolean,System.Int32,System.Int32)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="showBrowser">if set to <c>true</c> browser is visible.</param>
      <param name="width">The width in pixels.</param>
      <param name="height">The height in pixels.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.InitializeBrowser(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="newBrowser">The new browser.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.InitializeBrowser(MAT.Web.WebBrowser.BrowserControl,System.Boolean)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="newBrowser">The new browser.</param>
      <param name="showBrowser">if set to <c>true</c> browser is visible.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.InitializeBrowser(MAT.Web.WebBrowser.BrowserControl,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Initializes the browser.
            </summary>
      <param name="newBrowser">The new browser.</param>
      <param name="showBrowser">if set to <c>true</c> browser is visible.</param>
      <param name="width">The width in pixels.</param>
      <param name="height">The height in pixels.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.ConnectDialogEvents">
      <summary>
            Connects the dialog events for Alert, Confirm, Prompt, OpenDialog, OpenModal and OpenModeless.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.DisconnectDialogEvents">
      <summary>
            Disconnects the dialog events connected with <see cref="M:MAT.Web.WebBrowser.BrowserTestCases.ConnectDialogEvents" />.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.DisposeBrowser">
      <summary>
            Disposes the browser.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.DisposeBrowser(MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Disposes the browser.
            </summary>
      <param name="newBrowser">The new browser.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.OnAlertDialog(System.Object,MAT.Web.WebBrowser.BrowserControlAlertDialogEventArgs)">
      <summary>
            Called when alert dialog occurs.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:MAT.Web.WebBrowser.BrowserControlAlertDialogEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.OnConfirmDialog(System.Object,MAT.Web.WebBrowser.BrowserControlConfirmDialogEventArgs)">
      <summary>
            Called when confirm dialog occurs.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.OnPromptDialog(System.Object,MAT.Web.WebBrowser.BrowserControlPromptDialogEventArgs)">
      <summary>
            Called when prompt dialog occurs.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:MAT.Web.WebBrowser.BrowserControlPromptDialogEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.OnOpenDialog(System.Object,MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs)">
      <summary>
            Called when open dialog occurs.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.OnOpenModelessDialog(System.Object,MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs)">
      <summary>
            Called when open modeless dialog occurs.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.OnOpenModalDialog(System.Object,MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs)">
      <summary>
            Called when open modal dialog occurs.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.Dispose">
      <summary>
            Dispose (Calls DisposeBrowser())
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserTestCases.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserTestCases.browser">
      <summary>
            IE browser control
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserTestCases.browserForm">
      <summary>
            WinForm wrapping the IE browser control
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserForm">
      <summary>
            BrowserForm wraps BrowserControl for easy viewing of IE automations.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserForm.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserForm.browser">
      <summary>
            BrowserControl the BrowserForm wraps
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserForm.#ctor">
      <summary>
            BrowserForm wraps BrowserControl for easy viewing of IE automations.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserForm.CloseWindow">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserForm.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.ElementNotFoundException">
      <summary>
            Error thrown when an element cannot be found on the pages current frame. See <c>ThrowIfGetIsNull</c>.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementNotFoundException.#ctor">
      <summary>
            Error thrown when an element cannot be found on the pages current frame. See <c>ThrowIfGetIsNull</c>.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementNotFoundException.#ctor(System.String,System.String[])">
      <summary>
            Error thrown when an element cannot be found on the pages current frame. See <c>ThrowIfGetIsNull</c>.
            </summary>
      <param name="message">Message</param>
      <param name="arguments">arguments (optional)</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementNotFoundException.#ctor(System.String)">
      <summary>
            Error thrown when an element cannot be found on the pages current frame. See <c>ThrowIfGetIsNull</c>.
            </summary>
      <param name="message">Message</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Error thrown when an element cannot be found on the pages current frame. See <c>ThrowIfGetIsNull</c>.
            </summary>
      <param name="message">Message</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ElementNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Web.WebBrowser.ElementNotFoundException" /> class.
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:MAT.Web.WebBrowser.ExtendedWebBrowser">
      <summary>
            An extended version of the <see cref="N:MAT.Web.WebBrowser" /> control.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.ExtendedWebBrowser.WindowsMessages">
      <summary>
            A list of all the available window messages
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.WindowClose">
      <summary>
            This call override window.close within the HTML page
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.WindowAlert(System.String)">
      <summary>
            This call overrides the window.alert within the HTML page
            </summary>
      <param name="msg">Message to display</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.WindowPrompt(System.String,System.String)">
      <summary>
            This call overrides the window.prompt within the HTML page
            </summary>
      <param name="msg">Question to display</param>
      <param name="defaultText">Default input</param>
      <returns>New input</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.WindowOnError(System.String,System.String,System.Int32)">
      <summary>
            The call overrides the window.onerror event within the HTML page
            </summary>
      <param name="description">Description of error</param>
      <param name="url">Page error ocurred on</param>
      <param name="line">Line in script tag error appeared at</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.WindowOpen(System.String,System.String,System.String,System.Boolean)">
      <summary>
            The call overrides the window.open within the HTML page
            </summary>
      <param name="url">Url to open</param>
      <param name="name">Target</param>
      <param name="features">Window attributes (ie size, scrollbars, etc...)</param>
      <param name="replace">Links inside appear inside</param>
      <returns>IHTMLWindow</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.WindowOpenModalDialog(System.String,System.Object,System.String)">
      <summary>
            The call overrides the window.openModal within the HTML page
            </summary>
      <param name="url">Url to open</param>
      <param name="args">Window arguments to be passed to new window</param>
      <param name="features">Window attributes (ie size, scrollbars, etc...)</param>
      <returns>IHTMLWindow</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.WindowOpenModelessDialog(System.String,System.Object,System.String)">
      <summary>
            The call overrides the window.openModeless within the HTML page
            </summary>
      <param name="url">Url to open</param>
      <param name="args">Window arguments to be passed to new window</param>
      <param name="features">Window attributes (ie size, scrollbars, etc...)</param>
      <returns>IHTMLWindow</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.WindowConfirm(System.String)">
      <summary>
            The call overrides the window.confirm within the HTML page
            </summary>
      <param name="msg">Question to display</param>
      <returns>True (OK)/False (Cancel, Close window)</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.setTimeout(System.String,System.Int32)">
      <summary>
            Javascript function call after X milliseconds
            </summary>
      <param name="function">Function to be called with timeout</param>
      <param name="ms">Time delay in milliseconds</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MAT.Web.WebBrowser.ExtendedWebBrowser" /> class.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Windows.Forms.WebBrowser" /> control is hosted inside Internet Explorer.</exception>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.AttachInterfaces(System.Object)">
      <summary>
            This method supports the .NET Framework infrastructure and is not intended to be used directly from your code. 
            Called by the control when the underlying ActiveX control is created. 
            </summary>
      <param name="nativeActiveXObject">
      </param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.DetachInterfaces">
      <summary>
            This method supports the .NET Framework infrastructure and is not intended to be used directly from your code. 
            Called by the control when the underlying ActiveX control is discarded. 
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.CreateSink">
      <summary>
            This method will be called to give you a chance to create your own event sink
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.DetachSink">
      <summary>
            Detaches the event sink
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Overridden
            </summary>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" /> send to this procedure</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ExtendedWebBrowser.OnQuit">
      <summary>
            Raises the <see cref="E:MAT.Web.WebBrowser.ExtendedWebBrowser.Quit" /> event
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.ExtendedWebBrowser.Data">
      <summary>
            Used for passing data from browser to code
            </summary>
      <example>
            Passing a simple string through Data
            <code>
            browser.ExecuteJavaScript("window.external.Data = 'A simple string'");
            Debug.WriteLine(browser.Data);
            </code></example>
    </member>
    <member name="P:MAT.Web.WebBrowser.ExtendedWebBrowser.dialogArguments">
      <summary>
            This overload of the dialogArguments helps pass information to and from dialogs using 
            window.open, window.showModalDialog, and window.showModelessDialog.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.ExtendedWebBrowser.returnValue">
      <summary>
            This overload of the window.returnValue helps pass information to and from dialogs using 
            window.open, window.showModalDialog, and window.showModelessDialog.
            </summary>
      <seealso cref="P:MAT.Web.WebBrowser.ExtendedWebBrowser.dialogArguments" />
    </member>
    <member name="P:MAT.Web.WebBrowser.ExtendedWebBrowser.Browser">
      <summary>
            Gets the browser.
            </summary>
      <value>The browser.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.ExtendedWebBrowser.Application">
      <summary>
            Returns the automation object for the web browser
            </summary>
    </member>
    <member name="E:MAT.Web.WebBrowser.ExtendedWebBrowser.Quit">
      <summary>
            Raised when the browser application quits
            </summary>
      <remarks>
            Do not confuse this with DWebBrowserEvents2.Quit... That's something else.
            </remarks>
    </member>
    <member name="T:MAT.Web.WebBrowser.UnsafeNativeMethods">
      <exclude />
    </member>
    <member name="T:MAT.Web.WebBrowser.UnsafeNativeMethods.DWebBrowserEvents2">
      <exclude />
    </member>
    <member name="T:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2">
      <exclude />
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.GoBack">
      <summary>
            Back button on browser
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.GoForward">
      <summary>
            Forward button on browser
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.GoHome">
      <summary>
            Goes home.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.GoSearch">
      <summary>
            Calls search box
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Navigate(System.String,System.Object@,System.Object@,System.Object@,System.Object@)">
      <summary>
            Navigates the specified URL.
            </summary>
      <param name="Url">The URL.</param>
      <param name="flags">The flags.</param>
      <param name="targetFrameName">Name of the target frame.</param>
      <param name="postData">The post data.</param>
      <param name="headers">The headers.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Refresh">
      <summary>
            Refreshes the page.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Refresh2(System.Object@)">
      <summary>
            Refreshs the page per specified level.
            </summary>
      <param name="level">The level.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Stop">
      <summary>
            Stops the page load.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Quit">
      <summary>
            Quits this instance.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.ClientToWindow(System.Int32@,System.Int32@)">
      <summary>
            Clients to window.
            </summary>
      <param name="pcx">The PCX.</param>
      <param name="pcy">The pcy.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.PutProperty(System.String,System.Object)">
      <summary>
            Puts the property.
            </summary>
      <param name="property">The property.</param>
      <param name="vtValue">The vt value.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.GetProperty(System.String)">
      <summary>
            Gets the property.
            </summary>
      <param name="property">The property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Navigate2(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
      <summary>
            Navigate2s the specified URL.
            </summary>
      <param name="URL">The URL.</param>
      <param name="flags">The flags.</param>
      <param name="targetFrameName">Name of the target frame.</param>
      <param name="postData">The post data.</param>
      <param name="headers">The headers.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.QueryStatusWB(MAT.Web.WebBrowser.NativeMethods.OLECMDID)">
      <summary>
            Queries the status WB.
            </summary>
      <param name="cmdID">The CMD ID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.ExecWB(MAT.Web.WebBrowser.NativeMethods.OLECMDID,MAT.Web.WebBrowser.NativeMethods.OLECMDEXECOPT,System.Object@,System.IntPtr)">
      <summary>
            Execs the WB.
            </summary>
      <param name="cmdID">The CMD ID.</param>
      <param name="cmdexecopt">The cmdexecopt.</param>
      <param name="pvaIn">The pva in.</param>
      <param name="pvaOut">The pva out.</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.ShowBrowserBar(System.Object@,System.Object@,System.Object@)">
      <summary>
            Shows the browser bar.
            </summary>
      <param name="pvaClsid">The pva CLSID.</param>
      <param name="pvarShow">The pvar show.</param>
      <param name="pvarSize">Size of the pvar.</param>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Application">
      <summary>
            Gets the application.
            </summary>
      <value>The application.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Parent">
      <summary>
            Gets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Container">
      <summary>
            Gets the container.
            </summary>
      <value>The container.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Document">
      <summary>
            Gets the document.
            </summary>
      <value>The document.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.TopLevelContainer">
      <summary>
            Is top level container?
            </summary>
      <value>
        <c>true</c> if top level; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Type">
      <summary>
            Gets the type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Left">
      <summary>
            Gets or sets the left.
            </summary>
      <value>The left.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Top">
      <summary>
            Gets or sets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Width">
      <summary>
            Gets or sets the width.
            </summary>
      <value>The width.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Height">
      <summary>
            Gets or sets the height.
            </summary>
      <value>The height.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.LocationName">
      <summary>
            Gets the name of the location.
            </summary>
      <value>The name of the location.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.LocationURL">
      <summary>
            Gets the location URL.
            </summary>
      <value>The location URL.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Busy">
      <summary>
            Gets a value indicating whether this <see cref="T:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2" /> is busy.
            </summary>
      <value>
        <c>true</c> if busy; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.HWND">
      <summary>
            Gets the HWND.
            </summary>
      <value>The HWND.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.FullName">
      <summary>
            Gets the full name.
            </summary>
      <value>The full name.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Path">
      <summary>
            Gets the path.
            </summary>
      <value>The path.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Visible">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2" /> is visible.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.StatusBar">
      <summary>
            Gets or sets a value indicating whether [status bar].
            </summary>
      <value>
        <c>true</c> if [status bar]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.StatusText">
      <summary>
            Gets or sets the status text.
            </summary>
      <value>The status text.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.ToolBar">
      <summary>
            Gets or sets the tool bar.
            </summary>
      <value>The tool bar.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.MenuBar">
      <summary>
            Gets or sets a value indicating whether [menu bar].
            </summary>
      <value>
        <c>true</c> if [menu bar]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.FullScreen">
      <summary>
            Gets or sets a value indicating whether [full screen].
            </summary>
      <value>
        <c>true</c> if [full screen]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.ReadyState">
      <summary>
            Gets the state of the ready.
            </summary>
      <value>The state of the ready.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Offline">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2" /> is offline.
            </summary>
      <value>
        <c>true</c> if offline; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Silent">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2" /> is silent.
            </summary>
      <value>
        <c>true</c> if silent; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.RegisterAsBrowser">
      <summary>
            Gets or sets a value indicating whether [register as browser].
            </summary>
      <value>
        <c>true</c> if [register as browser]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.RegisterAsDropTarget">
      <summary>
            Gets or sets a value indicating whether [register as drop target].
            </summary>
      <value>
        <c>true</c> if [register as drop target]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.TheaterMode">
      <summary>
            Gets or sets a value indicating whether [theater mode].
            </summary>
      <value>
        <c>true</c> if [theater mode]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.AddressBar">
      <summary>
            Gets or sets a value indicating whether [address bar].
            </summary>
      <value>
        <c>true</c> if [address bar]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2.Resizable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:MAT.Web.WebBrowser.UnsafeNativeMethods.IWebBrowser2" /> is resizable.
            </summary>
      <value>
        <c>true</c> if resizable; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:MAT.Web.WebBrowser.Alert">
      <summary>
            Mock Alert Dialog
            </summary>
      <exclude />
    </member>
    <member name="F:MAT.Web.WebBrowser.Alert.Message">
      <summary>
            Message
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.Alert.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.Alert.#ctor">
      <summary>
            Mock Alert Dialog
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.Alert.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.Alert.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.ScriptException">
      <summary>
            Represents a script exception thrown from the browser.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ScriptException.#ctor">
      <summary>
            Represents a script exception thrown from the browser.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.ScriptException.#ctor(System.String)">
      <summary>
            Represents a script exception thrown from the browser.
            </summary>
      <param name="description">Error Message</param>
    </member>
    <member name="M:MAT.Web.WebBrowser.ScriptException.#ctor(System.String,System.String,System.Int32)">
      <summary>
            Represents a script exception thrown from the browser.
            </summary>
      <param name="description">Error Message</param>
      <param name="url">Page the error happened on</param>
      <param name="line">Line of code the error was found</param>
    </member>
    <member name="P:MAT.Web.WebBrowser.ScriptException.Message">
      <summary>
            Description of the error including url and line where exception was found.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.ScriptException.Description">
      <summary>
            Description of the error
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.ScriptException.Url">
      <summary>
            Page the error happened on
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.ScriptException.Line">
      <summary>
            Line of code the error was found
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.UnknownDialogException">
      <summary>
            Thrown when a dialog that is unanticipated is invoked.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnknownDialogException.#ctor">
      <summary>
            Thrown when a dialog that is unanticipated is invoked.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.UnknownDialogException.#ctor(MAT.Web.WebBrowser.IBrowserDialogEvent)">
      <summary>
            Thrown when a dialog that is unanticipated is invoked.
            </summary>
      <param name="dialogEvent">Event arguments used</param>
    </member>
    <member name="P:MAT.Web.WebBrowser.UnknownDialogException.Message">
      <summary>
            Description of the error including url and line where exception was found.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.StringParsing">
      <summary>
            The StringParsing class contains a set of utility functions for parsing of modifying strings specifically aimed towards HTML page results
            although XMLEncode is also included.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.StringParsing.#ctor">
      <summary>
            The StringParsing class contains a set of utility functions for parsing of modifying strings specifically aimed towards HTML page results.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.StringParsing.GetTextBetween(System.String,System.String,System.String)">
      <summary>Returns the text between two parts of a string.</summary>
      <remarks>This code
            <code>GetTextBetween("This sentence is short.","sentence","short")</code> would return " is ".  
            Use nulls for beginning or end.  This <code>GetTextBetween("This sentence is short.", null, "sentence")</code>
            would return "This ".
            If the start and end Delimiters are not in the source then String.Empty is returned.
            </remarks>
      <param name="source">Content to search</param>
      <param name="startDelimiter">left side of search; null for beginning of source</param>
      <param name="endDelimiter">right side of search; null for end of source</param>
      <returns>Content between start and end or String.Empty if not found.</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.StringParsing.GetTextBetween(System.String,System.String,System.String,System.Int32)">
      <summary>Returns the text between two parts of a string.</summary>
      <remarks>This code
            <code>GetTextBetween("This sentence is short.","sentence","short")</code> would return " is ".  
            Use nulls for beginning or end.  This <code>GetTextBetween("This sentence is short.", null, "sentence")</code>
            would return "This ".
            If the start and end Delimiters are not in the source then String.Empty is returned.
            </remarks>
      <param name="source">Content to search</param>
      <param name="startDelimiter">left side of search; null for beginning of source</param>
      <param name="endDelimiter">right side of search; null for end of source</param>
      <param name="startIndex">First character to start search at</param>
      <returns>Content between start and end or String.Empty if not found.</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.StringParsing.GetTextBetween(System.String,System.String,System.String,System.Int32,System.Int32@)">
      <summary>Returns the text between two parts of a string.</summary>
      <remarks>This code
            <code>GetTextBetween("This sentence is short.","sentence","short")</code> would return " is ".  
            Use nulls for beginning or end.  This <code>GetTextBetween("This sentence is short.", null, "sentence")</code>
            would return "This ".
            If the start and end Delimiters are not in the source then String.Empty is returned.
            </remarks>
      <param name="source">Content to search</param>
      <param name="startDelimiter">left side of search; null for beginning of source</param>
      <param name="endDelimiter">right side of search; null for end of source</param>
      <param name="startIndex">First character to start search at</param>
      <param name="endIndex">(out) Index of last character of return (0 if not found)</param>
      <returns>
      </returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.StringParsing.StripComments(System.String)">
      <summary>
            Removes comments from HTML text and any text between
            &lt;!-- is a comment --&gt;
            </summary>
      <param name="pageText">HTML text to parse</param>
      <returns>pageText without comments</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.StringParsing.RemoveHTMLTags(System.String)">
      <summary>
            Removes any HTML tags and attribute text from the source content.
            Leaves text between tags.
            </summary>
      <param name="source">HTML source to strip</param>
      <returns>Plain text</returns>
    </member>
    <member name="M:MAT.Web.WebBrowser.StringParsing.XmlEncode(System.String)">
      <summary>
            Encodes characters in a string that may be used as XML encodings.
            </summary>
      <param name="source">String to encode</param>
      <returns>Encoded string</returns>
    </member>
    <member name="T:MAT.Web.WebBrowser.PassportLoginException">
      <summary>
            Represents a failed attempt to login to Passport
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.PassportLoginException.#ctor(System.String)">
      <summary>
            Represents a failed attempt to login to Passport
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.PassportLoginException.Message">
      <summary>
            Gets a message that describes the current exception
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.IBrowserDialogEvent">
      <summary>
            Base for all HTML dialog events used in BrowserControl
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.IBrowserDialogEvent.DialogType">
      <summary>
            Type of dialog used by this event
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.IBrowserDialogEvent.RaiseUnknownDialogException">
      <summary>
            If the code the originated the event needs to know of an unknown dialog
            set this variable to true.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlEventHandler">
      <summary>
            Represents the method that will handle general BrowserControl events.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlMouseEventHandler">
      <summary>
            Represents the method that will handle BrowserControl MouseDown events.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlKeyEventHandler">
      <summary>
            Represents the method that will handle BrowserControl key events.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventHandler">
      <summary>
            Represents the method that will handle BrowserControl Confirm dialog events.
            These are events raised when the web page calls window.confirm(message) and expects
            a response of true or false.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlPromptDialogEventHandler">
      <summary>
            Represents the method that will handle BrowserControl Prompt dialog events.
            These are events raised when the web page calls window.prompt(message, default) and expects
            a response of a string.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlAlertDialogEventHandler">
      <summary>
            Represents the method that will handle BrowserControl Alert dialog events.
            These are events raised when the web page calls window.alert(message) 
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlOpenDialogEventHandler">
      <summary>
            Represents the method that will handle BrowserControl Open dialog events.
            These are events raised when the web page calls window.open(url) 
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventHandler">
      <summary>
            Represents the method that will handle BrowserControl Open dialog events.
            These are events raised when the web page calls window.open(url) 
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventHandler">
      <summary>
            Represents the method that will handle BrowserControl Open dialog events.
            These are events raised when the web page calls window.open(url) 
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlCustomDialogEventArgs">
      <summary>
            Custom dialog not handled in the other cases such as Security Alerts
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlCustomDialogEventArgs.#ctor(System.String,System.String)">
      <summary>
            Custom dialog not handled in the other cases such as Security Alerts
            </summary>
      <param name="Caption">Caption of dialog found</param>
      <param name="Button">Text of button clicked when dialog was found</param>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlCustomDialogEventArgs.Button">
      <summary>
            Text of button clicked when dialog was found
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlCustomDialogEventArgs.Caption">
      <summary>
            Caption of dialog found
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlCustomDialogEventArgs.RaiseUnknownDialogException">
      <summary>
            If the code the originated the event needs to know of an unknown dialog
            set this property to true.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlCustomDialogEventArgs.DialogType">
      <summary>
            Type of dialog that uses this event
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventArgs">
      <summary>
            Provides data for handling window.confirm dialogs.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventArgs.#ctor(System.String)">
      <summary>
            Creates a new instance of BrowserControlConfirmDialogEventArgs.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventArgs.RaiseUnknownDialogException">
      <summary>
            If the code the originated the event needs to know of an unknown dialog
            set this property to true.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventArgs.DialogType">
      <summary>
            Type of dialog that uses this event
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventArgs.Message">
      <summary>
            Message displayed in the confirmation question?
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlConfirmDialogEventArgs.Response">
      <summary>
            Response to return to the given code.  Default is false.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlPromptDialogEventArgs">
      <summary>
            Provides data for handling window.prompt dialogs.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlPromptDialogEventArgs.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of BrowserControlPromptDialogEventArgs.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlPromptDialogEventArgs.RaiseUnknownDialogException">
      <summary>
            If the code the originated the event needs to know of an unknown dialog
            set this property to true.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlPromptDialogEventArgs.DialogType">
      <summary>
            Type of dialog that uses this event
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlPromptDialogEventArgs.Message">
      <summary>
            Message displayed in the question?
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlPromptDialogEventArgs.DefaultResponse">
      <summary>
            Default response displayed in the question?
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlPromptDialogEventArgs.Response">
      <summary>
            Response to return to the given code.  Default is DefaultResponse.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlAlertDialogEventArgs">
      <summary>
            Provides data for handling window.alert dialogs.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlAlertDialogEventArgs.#ctor(System.String)">
      <summary>
            Creates a new instance of BrowserControlAlertDialogEventArgs.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlAlertDialogEventArgs.RaiseUnknownDialogException">
      <summary>
            If the code the originated the event needs to know of an unknown dialog
            set this property to true.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlAlertDialogEventArgs.DialogType">
      <summary>
            Type of dialog that uses this event
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlAlertDialogEventArgs.Message">
      <summary>
            Message displayed in the alert
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs">
      <summary>
            Provides data for handling window.open dialogs.
            See http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/methods/open_0.asp for more info.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs.#ctor(System.String,System.String,System.String,System.Boolean,MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Creates a new instance of BrowserControlOpenDialogEventArgs.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs.RaiseUnknownDialogException">
      <summary>
            If the code the originated the event needs to know of an unknown dialog
            set this property to true.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs.DialogType">
      <summary>
            Type of dialog that uses this event
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs.Url">
      <summary>
            String that specifies the URL of the document to display. If no URL is specified, a new window with about:blank is displayed.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs.Name">
      <summary>
            String that specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an a element.
            See http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/methods/open_0.asp for more info.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs.Features">
      <summary>
            This String parameter is a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following features are supported.
            See http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/methods/open_0.asp for more info.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs.Replace">
      <summary>
            When the sURL is loaded into the same window, this Boolean parameter specifies whether the sURL creates a new entry or replaces the current entry in the window's history list. 
            See http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/methods/open_0.asp for more info.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs.Window">
      <summary>
            Window of new document
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenDialogEventArgs.Browser">
      <summary>
            BrowserControl of new window
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs">
      <summary>
            Provides data for handling window.openModalDialog dialogs.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs.#ctor(System.String,System.Object,System.String,MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Creates a new instance of BrowserControlOpenModalDialogEventArgs.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs.RaiseUnknownDialogException">
      <summary>
            If the code the originated the event needs to know of an unknown dialog
            set this property to true.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs.DialogType">
      <summary>
            Type of dialog that uses this event
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs.Url">
      <summary>
            String that specifies the URL of the document to display. If no URL is specified, a new window with about:blank is displayed.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs.Args">
      <summary>
            Variant that specifies the arguments to use when displaying the document. Use this parameter to pass a value of any type, including an array of values. The dialog box can extract the values passed by the caller from the dialogArguments property of the window object.
            See http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/methods/open_0.asp for more info.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs.Features">
      <summary>
            This String parameter is a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following features are supported.
            See http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/methods/open_0.asp for more info.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs.ReturnValue">
      <summary>
            Variant that returns a reference to the new window object. Use this reference to script properties and methods on the new window.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModelessDialogEventArgs.Browser">
      <summary>
            BrowserControl of new window
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs">
      <summary>
            Provides data for handling window.openModalDialog dialogs.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs.#ctor(System.String,System.Object,System.String,MAT.Web.WebBrowser.BrowserControl)">
      <summary>
            Creates a new instance of BrowserControlOpenModalDialogEventArgs.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs.RaiseUnknownDialogException">
      <summary>
            If the code the originated the event needs to know of an unknown dialog
            set this property to true.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs.DialogType">
      <summary>
            Type of dialog that uses this event
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs.Url">
      <summary>
            String that specifies the URL of the document to display. If no URL is specified, a new window with about:blank is displayed.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs.Args">
      <summary>
            Variant that specifies the arguments to use when displaying the document. Use this parameter to pass a value of any type, including an array of values. The dialog box can extract the values passed by the caller from the dialogArguments property of the window object.
            See http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/methods/open_0.asp for more info.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs.Features">
      <summary>
            This String parameter is a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following features are supported.
            See http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/methods/open_0.asp for more info.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs.ReturnValue">
      <summary>
            Variant that returns a reference to the new window object. Use this reference to script properties and methods on the new window.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlOpenModalDialogEventArgs.Browser">
      <summary>
            BrowserControl of new window
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlEventArgs">
      <summary>
            Provides data for the various web browser events.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlEventArgs.#ctor(mshtml.IHTMLEventObj)">
      <summary>
            Creates a new instance of BrowserControlEventArgs.
            </summary>
      <param name="htmlEventObj">The original object passed to the event by the browser control.</param>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlEventArgs.HtmlEventObj">
      <summary>
            Gets or set the original object passed to the event by the browser control.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlKeyEventArgs">
      <summary>
            Provides data for handling HTML document key events.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlKeyEventArgs.#ctor(System.Windows.Forms.Keys)">
      <summary>
            Creates a new instance of BrowserControlKeyEventArgs.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlKeyEventArgs.#ctor(System.Windows.Forms.Keys,mshtml.IHTMLEventObj)">
      <summary>
            Creates a new instance of BrowserControlKeyEventArgs.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlKeyEventArgs.HtmlEventObj">
      <summary>
            Gets or set the original object passed to the event by the browser control.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserControlMouseEventArgs">
      <summary>
            Provides data for HTML document key events.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlMouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new instance of BrowserControlMouseEventArgs.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.BrowserControlMouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32,mshtml.IHTMLEventObj)">
      <summary>
            Creates a new instance of BrowserControlMouseEventArgs.
            </summary>
    </member>
    <member name="P:MAT.Web.WebBrowser.BrowserControlMouseEventArgs.HtmlEventObj">
      <summary>
            Gets or set the original object passed to the event by the browser control.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.HTMLDialogType">
      <summary>
            Types of HTML Dialogs that can ocurr.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.HTMLDialogType.Custom">
      <summary>
            Custom dialog not handled in the other cases such as Security Alerts
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.HTMLDialogType.Confirm">
      <summary>
            Confirmation dialog
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.HTMLDialogType.Alert">
      <summary>
            Alert dialog
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.HTMLDialogType.Prompt">
      <summary>
            Prompt (input) dialog
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.HTMLDialogType.Open">
      <summary>
            Open new window
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.HTMLDialogType.OpenModal">
      <summary>
            Modal (parent page disabled until dialog closed) HTML dialog
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.HTMLDialogType.OpenModeless">
      <summary>
            Modell HTML dialog
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.NavigateOptions">
      <summary>
            Used to specify options for navigating to Urls.
            </summary>
      <remarks>
            Reference: <see href="http://msdn.microsoft.com/workshop/browser/webbrowser/reference/enums/browsernavconstants.asp">MSDN</see></remarks>
    </member>
    <member name="F:MAT.Web.WebBrowser.NavigateOptions.None">
      <summary>
            The Url will open in the same window, with no other options.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.NavigateOptions.OpenInNewWindow">
      <summary>
            The Url will launch in a new browser window.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.NavigateOptions.NoHistory">
      <summary>
            The Url is not stored in the default IE history list.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.NavigateOptions.NoReadFromCache">
      <summary>
            Not supported.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.NavigateOptions.NoWriteToCache">
      <summary>
            Not supported.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.NavigateOptions.AllowAutoSearch">
      <summary>
            If the browser cannot find the Url, then setting this option will set the browser
            to default to searching for the Url using its default search engine.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.NavigateOptions.BrowserBar">
      <summary>
            Causes the current Explorer Bar to navigate to the given item, if possible. 
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.NavigateOptions.Hyperlink">
      <summary>
            If the navigation fails when a hyperlink is being followed, this constant specifies that the resource should then be bound to the moniker using the BINDF_HYPERLINK flag.
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.RefreshType">
      <summary>
            Specifies the type of refresh that is performed when a page is refreshed.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.RefreshType.Normal">
      <summary>
            Refresh that does not include sending the HTTP "pragma:nocache" header to the server.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.RefreshType.IfExpired">
      <summary>
            Refresh that occurs if the page has expired.
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.RefreshType.Completely">
      <summary>
            Refresh that includes sending a "pragma:nocache" header to the server (HTTP URLs only).
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.BrowserSize">
      <summary>
            Used to set a form to a standard viewing size
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserSize.Custom">
      <summary>
            Not a default size
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserSize.Low">
      <summary>
            640x480
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserSize.Medium">
      <summary>
            800x600
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserSize.High">
      <summary>
            1024x768
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.BrowserSize.VeryHigh">
      <summary>
            1280x720
            </summary>
    </member>
    <member name="T:MAT.Web.WebBrowser.Confirm">
      <summary>
            Mock Confirm dialog
            </summary>
      <exclude />
    </member>
    <member name="F:MAT.Web.WebBrowser.Confirm.btnOk">
      <summary>
            OK Button
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.Confirm.btnCancel">
      <summary>
            Cancel Button
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.Confirm.Message">
      <summary>
            Message
            </summary>
    </member>
    <member name="F:MAT.Web.WebBrowser.Confirm.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.Confirm.#ctor">
      <summary>
             Mock Confirm dialog
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.Confirm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:MAT.Web.WebBrowser.Confirm.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
  </members>
</doc>